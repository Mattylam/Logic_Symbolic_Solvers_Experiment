[
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-811",
    "context": "The bear is big. The bear is round. The bear visits the cat. The bear visits the dog. The cat is nice. The cat likes the bear. The cat likes the dog. The cat visits the bear. The cat visits the dog. The dog is nice. The dog is round. The dog likes the bear. The dog needs the bear. The dog needs the cat. The dog visits the bear. The dog visits the cat. If the bear needs the dog and the dog visits the bear then the bear likes the cat. If something is rough then it likes the dog. If something is big then it needs the bear. If something needs the bear and it needs the dog then the bear likes the dog. If something likes the bear then the bear needs the cat. If something likes the bear then it is rough. If the dog is big then the dog is round. If something is rough then it likes the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog likes the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nVisits(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nRough(x) ::: x is rough.\nPremises:\nBig(bear) ::: The bear is big.\nRound(bear) ::: The bear is round.\nVisits(bear, cat) ::: The bear visits the cat.\nVisits(bear, dog) ::: The bear visits the dog.\nNice(cat) ::: The cat is nice.\nLikes(cat, bear) ::: The cat likes the bear.\nLikes(cat, dog) ::: The cat likes the dog.\nVisits(cat, bear) ::: The cat visits the bear.\nVisits(cat, dog) ::: The cat visits the dog.\nNice(dog) ::: The dog is nice.\nRound(dog) ::: The dog is round.\nLikes(dog, bear) ::: The dog likes the bear.\nNeeds(dog, bear) ::: The dog needs the bear.\nNeeds(dog, cat) ::: The dog needs the cat.\nVisits(dog, bear) ::: The dog visits the bear.\nVisits(dog, cat) ::: The dog visits the cat.\n∀x ((Needs(bear, dog) ∧ Visits(dog, bear)) → Likes(bear, cat)) ::: If the bear needs the dog and the dog visits the bear then the bear likes the cat.\n∀x (Rough(x) → Likes(x, dog)) ::: If something is rough then it likes the dog.\n∀x (Big(x) → Needs(x, bear)) ::: If something is big then it needs the bear.\n∀x ((Needs(x, bear) ∧ Needs(x, dog)) → Likes(bear, dog)) ::: If something needs the bear and it needs the dog then the bear likes the dog.\n∀x (Likes(x, bear) → Needs(bear, cat)) ::: If something likes the bear then the bear needs the cat.\n∀x (Likes(x, bear) → Rough(x)) ::: If something likes the bear then it is rough.\n∀x (Big(dog) → Round(dog)) ::: If the dog is big then the dog is round.\n∀x (Rough(x) → Likes(x, cat)) ::: If something is rough then it likes the cat.\nConclusion:\nLikes(dog, bear) ::: The dog likes the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1874",
    "context": "The bald eagle sees the cow. The cow is nice. The squirrel sees the cow. If someone eats the bald eagle then the bald eagle eats the squirrel. If someone sees the cow then the cow eats the bald eagle. If someone sees the cow then they eat the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not see the cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nNice(x) ::: x is nice.\nEats(x, y) ::: x eats y.\nBaldEagle(x) ::: x is a bald eagle.\nCow(x) ::: x is a cow.\nSquirrel(x) ::: x is a squirrel.\nPremises:\nSees(BaldEagle, Cow) ::: The bald eagle sees the cow.\nNice(Cow) ::: The cow is nice.\nSees(Squirrel, Cow) ::: The squirrel sees the cow.\n∀x (Eats(x, BaldEagle) → Eats(BaldEagle, Squirrel)) ::: If someone eats the bald eagle then the bald eagle eats the squirrel.\n∀x (Sees(x, Cow) → Eats(Cow, BaldEagle)) ::: If someone sees the cow then the cow eats the bald eagle.\n∀x (Sees(x, Cow) → Eats(x, BaldEagle)) ::: If someone sees the cow then they eat the bald eagle.\nConclusion:\n¬Sees(BaldEagle, Cow) ::: The bald eagle does not see the cow."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1258",
    "context": "Bob is big. Bob is blue. Bob is cold. Bob is smart. Fiona is cold. Fiona is furry. Fiona is smart. If something is smart and cold then it is big. If Fiona is young and Fiona is smart then Fiona is big. If something is big then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nPremises:\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\nCold(Bob) ::: Bob is cold.\nSmart(Bob) ::: Bob is smart.\nCold(Fiona) ::: Fiona is cold.\nFurry(Fiona) ::: Fiona is furry.\nSmart(Fiona) ::: Fiona is smart.\n∀x ((Smart(x) ∧ Cold(x)) → Big(x)) ::: If something is smart and cold then it is big.\n∀x ((Young(x) ∧ Smart(x)) → Big(x)) ::: If someone is young and smart then they are big.\n∀x (Big(x) → Blue(x)) ::: If something is big then it is blue.\nConclusion:\n¬Round(Bob) ::: Bob is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-82",
    "context": "Anne is furry. Anne is white. Charlie is nice. Fiona is cold. Fiona is rough. Fiona is smart. Harry is smart. Smart things are cold. All rough things are smart. Round, nice things are furry. If Harry is round then Harry is white. Smart things are cold. All smart, cold things are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is rough.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nPremises:\nFurry(Anne) ::: Anne is furry.\nWhite(Anne) ::: Anne is white.\nNice(Charlie) ::: Charlie is nice.\nCold(Fiona) ::: Fiona is cold.\nRough(Fiona) ::: Fiona is rough.\nSmart(Fiona) ::: Fiona is smart.\nSmart(Harry) ::: Harry is smart.\n∀x (Smart(x) → Cold(x)) ::: Smart things are cold.\n∀x (Rough(x) → Smart(x)) ::: All rough things are smart.\n∀x ((Round(x) ∧ Nice(x)) → Furry(x)) ::: Round, nice things are furry.\n∀x ((Harry(x) ∧ Round(x)) → White(x)) ::: If Harry is round then Harry is white.\n∀x ((Smart(x) ∧ Cold(x)) → Round(x)) ::: All smart, cold things are round.\nConclusion:\nRough(Fiona) ::: Fiona is rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-726",
    "context": "Bob is kind. Bob is white. Gary is kind. If something is kind then it is white. If something is white and red then it is smart. Kind, white things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nPremises:\nKind(Bob) ::: Bob is kind.\nWhite(Bob) ::: Bob is white.\nKind(Gary) ::: Gary is kind.\n∀x (Kind(x) → White(x)) ::: If something is kind then it is white.\n∀x ((White(x) ∧ Red(x)) → Smart(x)) ::: If something is white and red then it is smart.\n∀x ((Kind(x) ∧ White(x)) → Red(x)) ::: Kind, white things are red.\nConclusion:\n¬Kind(Bob) ::: Bob is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-830",
    "context": "Charlie is green. Charlie is rough. Fiona is smart. All smart things are furry. Round things are smart. Round, green things are smart. Rough things are smart. If Charlie is green and Charlie is blue then Charlie is round. If Charlie is round then Charlie is rough. Furry things are rough. All green, round things are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nPremises:\nGreen(Charlie) ::: Charlie is green.\nRough(Charlie) ::: Charlie is rough.\nSmart(Fiona) ::: Fiona is smart.\n∀x (Smart(x) → Furry(x)) ::: All smart things are furry.\n∀x (Round(x) → Smart(x)) ::: Round things are smart.\n∀x ((Green(x) ∧ Round(x)) → Smart(x)) ::: Round, green things are smart.\n∀x (Rough(x) → Smart(x)) ::: Rough things are smart.\n∀x ((Green(Charlie) ∧ Blue(Charlie)) → Round(Charlie)) ::: If Charlie is green and Charlie is blue then Charlie is round.\n∀x ((Round(x) → Rough(x))) ::: If Charlie is round then Charlie is rough.\n∀x (Furry(x) → Rough(x)) ::: Furry things are rough.\n∀x ((Green(x) ∧ Round(x)) → Furry(x)) ::: All green, round things are furry.\nConclusion:\n¬Round(Charlie) ::: Charlie is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1042",
    "context": "Charlie is not cold. Charlie is green. Charlie is nice. Charlie is red. Dave is blue. Dave is not green. Dave is rough. Gary is not cold. Gary is not green. Gary is nice. Gary is rough. Gary is white. If someone is blue then they are not cold. If someone is rough and cold then they are white. All nice people are blue. If Charlie is cold then Charlie is not nice. All rough, blue people are not red. If Dave is red and Dave is nice then Dave is not blue. If Gary is red and Gary is blue then Gary is white. If Dave is not blue then Dave is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is red.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nPremises:\n¬Cold(Charlie) ::: Charlie is not cold.\nGreen(Charlie) ::: Charlie is green.\nNice(Charlie) ::: Charlie is nice.\nRed(Charlie) ::: Charlie is red.\nBlue(Dave) ::: Dave is blue.\n¬Green(Dave) ::: Dave is not green.\nRough(Dave) ::: Dave is rough.\n¬Cold(Gary) ::: Gary is not cold.\n¬Green(Gary) ::: Gary is not green.\nNice(Gary) ::: Gary is nice.\nRough(Gary) ::: Gary is rough.\nWhite(Gary) ::: Gary is white.\n∀x ((Blue(x) → ¬Cold(x))) ::: If someone is blue then they are not cold.\n∀x ((Rough(x) ∧ Cold(x)) → White(x)) ::: If someone is rough and cold then they are white.\n∀x (Nice(x) → Blue(x)) ::: All nice people are blue.\n∀x ((Cold(Charlie) → ¬Nice(Charlie))) ::: If Charlie is cold then Charlie is not nice.\n∀x ((Rough(x) ∧ Blue(x)) → ¬Red(x)) ::: All rough, blue people are not red.\n∀x ((Red(Dave) ∧ Nice(Dave)) → ¬Blue(Dave)) ::: If Dave is red and Dave is nice then Dave is not blue.\n∀x ((Red(Gary) ∧ Blue(Gary)) → White(Gary)) ::: If Gary is red and Gary is blue then Gary is white.\n∀x ((¬Blue(Dave)) → White(Dave)) ::: If Dave is not blue then Dave is white.\nConclusion:\nRed(Charlie) ::: Charlie is red."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-673",
    "context": "Anne is nice. Anne is quiet. Anne is rough. Anne is round. Bob is not furry. Bob is kind. Bob is quiet. Bob is rough. Charlie is not big. Dave is rough. If something is furry then it is kind. If Bob is nice and Bob is furry then Bob is round. All round things are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nPremises:\nNice(Anne) ::: Anne is nice.\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nRound(Anne) ::: Anne is round.\n¬Furry(Bob) ::: Bob is not furry.\nKind(Bob) ::: Bob is kind.\nQuiet(Bob) ::: Bob is quiet.\nRough(Bob) ::: Bob is rough.\n¬Big(Charlie) ::: Charlie is not big.\nRough(Dave) ::: Dave is rough.\n∀x (Furry(x) → Kind(x)) ::: If something is furry then it is kind.\n∀x ((Nice(Bob) ∧ Furry(Bob)) → Round(Bob)) ::: If Bob is nice and Bob is furry then Bob is round.\n∀x (Round(x) → Furry(x)) ::: All round things are furry.\nConclusion:\n¬Round(Anne) ::: Anne is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1537",
    "context": "Anne is furry. Anne is not green. Anne is kind. Anne is quiet. Anne is red. Anne is not rough. Anne is round. Erin is furry. Erin is green. Erin is not red. Erin is rough. Erin is not round. Gary is green. Gary is kind. Gary is red. Green things are rough. If something is kind and not red then it is rough. If Gary is rough and Gary is green then Gary is furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nPremises:\nFurry(Anne) ::: Anne is furry.\n¬Green(Anne) ::: Anne is not green.\nKind(Anne) ::: Anne is kind.\nQuiet(Anne) ::: Anne is quiet.\nRed(Anne) ::: Anne is red.\n¬Rough(Anne) ::: Anne is not rough.\nRound(Anne) ::: Anne is round.\nFurry(Erin) ::: Erin is furry.\nGreen(Erin) ::: Erin is green.\n¬Red(Erin) ::: Erin is not red.\nRough(Erin) ::: Erin is rough.\n¬Round(Erin) ::: Erin is not round.\nGreen(Gary) ::: Gary is green.\nKind(Gary) ::: Gary is kind.\nRed(Gary) ::: Gary is red.\n∀x (Green(x) → Rough(x)) ::: Green things are rough.\n∀x ((Kind(x) ∧ ¬Red(x)) → Rough(x)) ::: If something is kind and not red then it is rough.\n∀x ((Rough(Gary) ∧ Green(Gary)) → Furry(Gary)) ::: If Gary is rough and Gary is green then Gary is furry.\nConclusion:\n¬Quiet(Gary) ::: Gary is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1360",
    "context": "Harry is red. Harry is smart. Harry is young. Red, kind things are young. Young, red things are kind. All red, kind things are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is smart.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nFurry(x) ::: x is furry.\nPremises:\nRed(Harry) ::: Harry is red.\nSmart(Harry) ::: Harry is smart.\nYoung(Harry) ::: Harry is young.\n∀x ((Red(x) ∧ Kind(x)) → Young(x)) ::: Red, kind things are young.\n∀x ((Young(x) ∧ Red(x)) → Kind(x)) ::: Young, red things are kind.\n∀x ((Red(x) ∧ Kind(x)) → Furry(x)) ::: All red, kind things are furry.\nConclusion:\nSmart(Harry) ::: Harry is smart."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1365",
    "context": "Charlie is big. Charlie is furry. Charlie is nice. Fiona is not furry. Fiona is not quiet. Fiona is young. Gary is not big. Gary is kind. Gary is rough. Gary is young. If someone is quiet and kind then they are not nice. If someone is nice then they are quiet. Big, kind people are quiet. Rough people are young. If Charlie is quiet then Charlie is young. If someone is quiet and not nice then they are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nPremises:\nBig(Charlie) ::: Charlie is big.\nFurry(Charlie) ::: Charlie is furry.\nNice(Charlie) ::: Charlie is nice.\n¬Furry(Fiona) ::: Fiona is not furry.\n¬Quiet(Fiona) ::: Fiona is not quiet.\nYoung(Fiona) ::: Fiona is young.\n¬Big(Gary) ::: Gary is not big.\nKind(Gary) ::: Gary is kind.\nRough(Gary) ::: Gary is rough.\nYoung(Gary) ::: Gary is young.\n∀x ((Quiet(x) ∧ Kind(x)) → ¬Nice(x)) ::: If someone is quiet and kind then they are not nice.\n∀x (Nice(x) → Quiet(x)) ::: If someone is nice then they are quiet.\n∀x ((Big(x) ∧ Kind(x)) → Quiet(x)) ::: Big, kind people are quiet.\n∀x (Rough(x) → Young(x)) ::: Rough people are young.\n∀x (Quiet(Charlie) → Young(Charlie)) ::: If Charlie is quiet then Charlie is young.\n∀x ((Quiet(x) ∧ ¬Nice(x)) → Furry(x)) ::: If someone is quiet and not nice then they are furry.\nConclusion:\n¬Nice(Charlie) ::: Charlie is not nice."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-254",
    "context": "The mouse does not like the tiger. The tiger needs the mouse. If someone visits the tiger then the tiger does not like the mouse. If someone needs the mouse then the mouse is not red. If someone needs the mouse then the mouse visits the tiger. If someone visits the mouse then the mouse visits the tiger. If the mouse needs the tiger then the tiger needs the mouse. If someone likes the tiger and the tiger is not round then they do not like the mouse. If the mouse does not visit the tiger then the mouse is round. If the tiger likes the mouse and the tiger does not visit the mouse then the mouse is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\n\nPremises:\n¬Likes(Mouse, Tiger) ::: The mouse does not like the tiger.\nNeeds(Tiger, Mouse) ::: The tiger needs the mouse.\n∀x (Visits(x, Tiger) → ¬Likes(x, Mouse)) ::: If someone visits the tiger then the tiger does not like the mouse.\n∀x (Needs(x, Mouse) → ¬Red(Mouse)) ::: If someone needs the mouse then the mouse is not red.\n∀x (Needs(x, Mouse) → Visits(x, Tiger)) ::: If someone needs the mouse then the mouse visits the tiger.\n∀x (Visits(x, Mouse) → Visits(x, Tiger)) ::: If someone visits the mouse then the mouse visits the tiger.\n∀x (Needs(Mouse, Tiger) → Needs(Tiger, Mouse)) ::: If the mouse needs the tiger then the tiger needs the mouse.\n∀x ((Likes(x, Tiger) ∧ ¬Round(Tiger)) → ¬Likes(x, Mouse)) ::: If someone likes the tiger and the tiger is not round then they do not like the mouse.\n∀x (¬Visits(Mouse, Tiger) → Round(Mouse)) ::: If the mouse does not visit the tiger then the mouse is round.\n∀x ((Likes(Tiger, Mouse) ∧ ¬Visits(Tiger, Mouse)) → Round(Mouse)) ::: If the tiger likes the mouse and the tiger does not visit the mouse then the mouse is round.\n\nConclusion:\n¬Round(Mouse) ::: The mouse is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-928",
    "context": "The squirrel chases the tiger. The tiger visits the squirrel. If the squirrel chases the tiger and the tiger likes the squirrel then the tiger is nice. If the tiger chases the squirrel and the tiger is kind then the tiger is red. If something chases the squirrel then the squirrel chases the tiger. If something likes the squirrel then the squirrel chases the tiger. If something chases the squirrel then it does not chase the tiger. If something is red and it chases the squirrel then it is big. If something chases the squirrel and it visits the tiger then the squirrel does not visit the tiger. If something chases the tiger then the tiger likes the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel chases the tiger.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nVisits(x, y) ::: x visits y.\nLikes(x, y) ::: x likes y.\nNice(x) ::: x is nice.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nBig(x) ::: x is big.\nSquirrel(x) ::: x is a squirrel.\nTiger(x) ::: x is a tiger.\nPremises:\nChases(Squirrel, Tiger) ::: The squirrel chases the tiger.\nVisits(Tiger, Squirrel) ::: The tiger visits the squirrel.\n∀x ((Chases(Squirrel, Tiger) ∧ Likes(Tiger, Squirrel)) → Nice(Tiger)) ::: If the squirrel chases the tiger and the tiger likes the squirrel then the tiger is nice.\n∀x ((Chases(Tiger, Squirrel) ∧ Kind(Tiger)) → Red(Tiger)) ::: If the tiger chases the squirrel and the tiger is kind then the tiger is red.\n∀x (Chases(x, Squirrel) → Chases(Squirrel, Tiger)) ::: If something chases the squirrel then the squirrel chases the tiger.\n∀x (Likes(x, Squirrel) → Chases(Squirrel, Tiger)) ::: If something likes the squirrel then the squirrel chases the tiger.\n∀x (Chases(x, Squirrel) → ¬Chases(x, Tiger)) ::: If something chases the squirrel then it does not chase the tiger.\n∀x ((Red(x) ∧ Chases(x, Squirrel)) → Big(x)) ::: If something is red and it chases the squirrel then it is big.\n∀x ((Chases(x, Squirrel) ∧ Visits(x, Tiger)) → ¬Visits(Squirrel, Tiger)) ::: If something chases the squirrel and it visits the tiger then the squirrel does not visit the tiger.\n∀x (Chases(x, Tiger) → Likes(Tiger, Squirrel)) ::: If something chases the tiger then the tiger likes the squirrel.\nConclusion:\nChases(Squirrel, Tiger) ::: The squirrel chases the tiger."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1614",
    "context": "Charlie is big. Charlie is blue. Charlie is nice. Charlie is white. Fiona is nice. Fiona is red. Fiona is white. All white, blue things are round. All big, kind things are red. All red things are round. Red, white things are round. Nice, round things are big. If Charlie is big and Charlie is kind then Charlie is red. All kind, white things are red. All red, nice things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nKind(x) ::: x is kind.\nPremises:\nBig(Charlie) ::: Charlie is big.\nBlue(Charlie) ::: Charlie is blue.\nNice(Charlie) ::: Charlie is nice.\nWhite(Charlie) ::: Charlie is white.\nNice(Fiona) ::: Fiona is nice.\nRed(Fiona) ::: Fiona is red.\nWhite(Fiona) ::: Fiona is white.\n∀x ((White(x) ∧ Blue(x)) → Round(x)) ::: All white, blue things are round.\n∀x ((Big(x) ∧ Kind(x)) → Red(x)) ::: All big, kind things are red.\n∀x (Red(x) → Round(x)) ::: All red things are round.\n∀x ((Red(x) ∧ White(x)) → Round(x)) ::: Red, white things are round.\n∀x ((Nice(x) ∧ Round(x)) → Big(x)) ::: Nice, round things are big.\n∀x ((Big(Charlie) ∧ Kind(Charlie)) → Red(Charlie)) ::: If Charlie is big and Charlie is kind then Charlie is red.\n∀x ((Kind(x) ∧ White(x)) → Red(x)) ::: All kind, white things are red.\n∀x ((Red(x) ∧ Nice(x)) → Kind(x)) ::: All red, nice things are kind.\nConclusion:\n¬Nice(Charlie) ::: Charlie is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-192",
    "context": "Charlie is nice. Charlie is round. Charlie is smart. Charlie is young. Erin is white. Harry is rough. Harry is round. Harry is smart. Harry is white. Harry is young. Young, nice things are rough. If Harry is white then Harry is nice. All quiet things are rough. If something is young and quiet then it is rough. If something is young then it is quiet. If something is white then it is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not white.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nWhite(x) ::: x is white.\nRough(x) ::: x is rough.\nQuiet(x) ::: x is quiet.\nPremises:\nNice(Charlie) ::: Charlie is nice.\nRound(Charlie) ::: Charlie is round.\nSmart(Charlie) ::: Charlie is smart.\nYoung(Charlie) ::: Charlie is young.\nWhite(Erin) ::: Erin is white.\nRough(Harry) ::: Harry is rough.\nRound(Harry) ::: Harry is round.\nSmart(Harry) ::: Harry is smart.\nWhite(Harry) ::: Harry is white.\nYoung(Harry) ::: Harry is young.\n∀x ((Young(x) ∧ Nice(x)) → Rough(x)) ::: Young, nice things are rough.\n∀x (White(Harry) → Nice(Harry)) ::: If Harry is white then Harry is nice.\n∀x (Quiet(x) → Rough(x)) ::: All quiet things are rough.\n∀x ((Young(x) ∧ Quiet(x)) → Rough(x)) ::: If something is young and quiet then it is rough.\n∀x (Young(x) → Quiet(x)) ::: If something is young then it is quiet.\n∀x (White(x) → Quiet(x)) ::: If something is white then it is quiet.\nConclusion:\n¬White(Charlie) ::: Charlie is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-935",
    "context": "Anne is not smart. Charlie is quiet. Charlie is young. Gary is kind. Gary is round. Gary is smart. Gary is young. Quiet people are young. Quiet, round people are not smart. If someone is quiet then they are rough. If someone is smart then they are round. All rough people are round. If someone is rough and not young then they are cold. If someone is young and not quiet then they are kind. If someone is quiet and not young then they are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nPremises:\n¬Smart(Anne) ::: Anne is not smart.\nQuiet(Charlie) ::: Charlie is quiet.\nYoung(Charlie) ::: Charlie is young.\nKind(Gary) ::: Gary is kind.\nRound(Gary) ::: Gary is round.\nSmart(Gary) ::: Gary is smart.\nYoung(Gary) ::: Gary is young.\n∀x (Quiet(x) → Young(x)) ::: Quiet people are young.\n∀x ((Quiet(x) ∧ Round(x)) → ¬Smart(x)) ::: Quiet, round people are not smart.\n∀x (Quiet(x) → Rough(x)) ::: If someone is quiet then they are rough.\n∀x (Smart(x) → Round(x)) ::: If someone is smart then they are round.\n∀x (Rough(x) → Round(x)) ::: All rough people are round.\n∀x ((Rough(x) ∧ ¬Young(x)) → Cold(x)) ::: If someone is rough and not young then they are cold.\n∀x ((Young(x) ∧ ¬Quiet(x)) → Kind(x)) ::: If someone is young and not quiet then they are kind.\n∀x ((Quiet(x) ∧ ¬Young(x)) → Kind(x)) ::: If someone is quiet and not young then they are kind.\nConclusion:\nYoung(Charlie) ::: Charlie is young."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1011",
    "context": "Anne is round. Anne is young. Dave is not nice. Dave is red. Fiona is green. Fiona is smart. Harry is not smart. All red things are big. All smart things are big. If Dave is young and Dave is not green then Dave is not big. Smart things are not round. All big things are smart. If something is smart and not young then it is not red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nSmart(x) ::: x is smart.\nBig(x) ::: x is big.\nPremises:\nRound(Anne) ::: Anne is round.\nYoung(Anne) ::: Anne is young.\n¬Nice(Dave) ::: Dave is not nice.\nRed(Dave) ::: Dave is red.\nGreen(Fiona) ::: Fiona is green.\nSmart(Fiona) ::: Fiona is smart.\n¬Smart(Harry) ::: Harry is not smart.\n∀x (Red(x) → Big(x)) ::: All red things are big.\n∀x (Smart(x) → Big(x)) ::: All smart things are big.\n∀x ((Young(Dave) ∧ ¬Green(Dave)) → ¬Big(Dave)) ::: If Dave is young and Dave is not green then Dave is not big.\n∀x (Smart(x) → ¬Round(x)) ::: Smart things are not round.\n∀x (Big(x) → Smart(x)) ::: All big things are smart.\n∀x ((Smart(x) ∧ ¬Young(x)) → ¬Red(x)) ::: If something is smart and not young then it is not red.\nConclusion:\nSmart(Harry) ::: Harry is smart."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1800",
    "context": "The dog likes the tiger. The lion likes the tiger. The tiger is young. If something is nice and young then it likes the dog. If something chases the tiger and it is green then the tiger chases the lion. If something likes the dog then the dog likes the lion. If something likes the tiger then it chases the dog. Nice things are young. If something chases the tiger then it is green. If something is young then it chases the tiger. If something is young and big then it chases the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nChases(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nPremises:\nLikes(Dog, Tiger) ::: The dog likes the tiger.\nLikes(Lion, Tiger) ::: The lion likes the tiger.\nYoung(Tiger) ::: The tiger is young.\n∀x ((Nice(x) ∧ Young(x)) → Likes(x, Dog)) ::: If something is nice and young then it likes the dog.\n∀x ((Chases(x, Tiger) ∧ Green(x)) → Chases(Tiger, Lion)) ::: If something chases the tiger and it is green then the tiger chases the lion.\n∀x (Likes(x, Dog) → Likes(Dog, Lion)) ::: If something likes the dog then the dog likes the lion.\n∀x (Likes(x, Tiger) → Chases(Tiger, Dog)) ::: If something likes the tiger then it chases the dog.\n∀x (Nice(x) → Young(x)) ::: Nice things are young.\n∀x (Chases(x, Tiger) → Green(x)) ::: If something chases the tiger then it is green.\n∀x (Young(x) → Chases(x, Tiger)) ::: If something is young then it chases the tiger.\n∀x ((Young(x) ∧ Big(x)) → Chases(x, Tiger)) ::: If something is young and big then it chases the tiger.\nConclusion:\n¬Young(Lion) ::: The lion is not young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-758",
    "context": "The bear is big. The bear is young. The bear needs the lion. The cat eats the lion. The cat is young. The cat needs the bear. The cat needs the lion. The lion is blue. The lion needs the cat. The lion visits the bear. If something visits the bear then the bear visits the cat. If something is big and it visits the cat then it is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat needs the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nEats(x, y) ::: x eats y.\nBlue(x) ::: x is blue.\nVisits(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nPremises:\nBig(bear) ::: The bear is big.\nYoung(bear) ::: The bear is young.\nNeeds(bear, lion) ::: The bear needs the lion.\nEats(cat, lion) ::: The cat eats the lion.\nYoung(cat) ::: The cat is young.\nNeeds(cat, bear) ::: The cat needs the bear.\nNeeds(cat, lion) ::: The cat needs the lion.\nBlue(lion) ::: The lion is blue.\nNeeds(lion, cat) ::: The lion needs the cat.\nVisits(lion, bear) ::: The lion visits the bear.\n∀x (Visits(x, bear) → Visits(bear, cat)) ::: If something visits the bear then the bear visits the cat.\n∀x ((Big(x) ∧ Visits(x, cat)) → Nice(x)) ::: If something is big and it visits the cat then it is nice.\nConclusion:\nNeeds(cat, lion) ::: The cat needs the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2060",
    "context": "Charlie is big. Charlie is blue. Charlie is green. Gary is big. Gary is quiet. Gary is smart. Gary is white. All nice people are white. All big, nice people are blue. White, big people are blue. White people are smart. All big, nice people are blue. All blue people are green. Nice people are big. If Gary is quiet then Gary is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nPremises:\nBig(Charlie) ::: Charlie is big.\nBlue(Charlie) ::: Charlie is blue.\nGreen(Charlie) ::: Charlie is green.\nBig(Gary) ::: Gary is big.\nQuiet(Gary) ::: Gary is quiet.\nSmart(Gary) ::: Gary is smart.\nWhite(Gary) ::: Gary is white.\n∀x (Nice(x) → White(x)) ::: All nice people are white.\n∀x ((Big(x) ∧ Nice(x)) → Blue(x)) ::: All big, nice people are blue.\n∀x ((White(x) ∧ Big(x)) → Blue(x)) ::: White, big people are blue.\n∀x (White(x) → Smart(x)) ::: White people are smart.\n∀x ((Big(x) ∧ Nice(x)) → Blue(x)) ::: All big, nice people are blue.\n∀x (Blue(x) → Green(x)) ::: All blue people are green.\n∀x (Nice(x) → Big(x)) ::: Nice people are big.\n∀x (Quiet(Gary) → Big(Gary)) ::: If Gary is quiet then Gary is big.\nConclusion:\n¬Quiet(Gary) ::: Gary is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-562",
    "context": "Anne is blue. Anne is furry. Anne is quiet. Anne is rough. Harry is blue. Harry is nice. Harry is rough. If someone is furry and cold then they are blue. If someone is round and quiet then they are nice. All quiet people are furry. All furry people are cold. If Anne is furry and Anne is cold then Anne is nice. All cold, blue people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not furry.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nNice(x) ::: x is nice.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nPremises:\nBlue(Anne) ::: Anne is blue.\nFurry(Anne) ::: Anne is furry.\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nBlue(Harry) ::: Harry is blue.\nNice(Harry) ::: Harry is nice.\nRough(Harry) ::: Harry is rough.\n∀x ((Furry(x) ∧ Cold(x)) → Blue(x)) ::: If someone is furry and cold then they are blue.\n∀x ((Round(x) ∧ Quiet(x)) → Nice(x)) ::: If someone is round and quiet then they are nice.\n∀x (Quiet(x) → Furry(x)) ::: All quiet people are furry.\n∀x (Furry(x) → Cold(x)) ::: All furry people are cold.\n∀x ((Furry(x) ∧ Cold(x)) → Nice(x)) ::: If someone is furry and cold then they are nice.\n∀x ((Cold(x) ∧ Blue(x)) → Rough(x)) ::: All cold, blue people are rough.\nConclusion:\n¬Furry(Harry) ::: Harry is not furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1887",
    "context": "The bear chases the cow. The bear is blue. The bear is cold. The cow is round. The cow needs the bear. The cow visits the bear. The cow visits the dog. The dog visits the cow. The rabbit is blue. The rabbit needs the bear. The rabbit visits the bear. The rabbit visits the cow. If someone visits the dog then they visit the rabbit. If someone visits the rabbit and the rabbit visits the cow then the rabbit chases the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow needs the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nPremises:\nChases(Bear, Cow) ::: The bear chases the cow.\nBlue(Bear) ::: The bear is blue.\nCold(Bear) ::: The bear is cold.\nRound(Cow) ::: The cow is round.\nNeeds(Cow, Bear) ::: The cow needs the bear.\nVisits(Cow, Bear) ::: The cow visits the bear.\nVisits(Cow, Dog) ::: The cow visits the dog.\nVisits(Dog, Cow) ::: The dog visits the cow.\nBlue(Rabbit) ::: The rabbit is blue.\nNeeds(Rabbit, Bear) ::: The rabbit needs the bear.\nVisits(Rabbit, Bear) ::: The rabbit visits the bear.\nVisits(Rabbit, Cow) ::: The rabbit visits the cow.\n∀x (Visits(x, Dog) → Visits(x, Rabbit)) ::: If someone visits the dog then they visit the rabbit.\n∀x ((Visits(x, Rabbit) ∧ Visits(Rabbit, Cow)) → Chases(Rabbit, Cow)) ::: If someone visits the rabbit and the rabbit visits the cow then the rabbit chases the cow.\nConclusion:\nNeeds(Cow, Bear) ::: The cow needs the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-625",
    "context": "Anne is blue. Bob is big. Bob is blue. Bob is furry. Bob is nice. Bob is quiet. Bob is white. Gary is furry. Gary is quiet. Gary is rough. Harry is big. Harry is furry. Harry is nice. Harry is quiet. Harry is rough. Harry is white. If someone is quiet then they are big. All big people are nice. If Gary is blue then Gary is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nRough(x) ::: x is rough.\nPremises:\nBlue(Anne) ::: Anne is blue.\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\nFurry(Bob) ::: Bob is furry.\nNice(Bob) ::: Bob is nice.\nQuiet(Bob) ::: Bob is quiet.\nWhite(Bob) ::: Bob is white.\nFurry(Gary) ::: Gary is furry.\nQuiet(Gary) ::: Gary is quiet.\nRough(Gary) ::: Gary is rough.\nBig(Harry) ::: Harry is big.\nFurry(Harry) ::: Harry is furry.\nNice(Harry) ::: Harry is nice.\nQuiet(Harry) ::: Harry is quiet.\nRough(Harry) ::: Harry is rough.\nWhite(Harry) ::: Harry is white.\n∀x (Quiet(x) → Big(x)) ::: If someone is quiet then they are big.\n∀x (Big(x) → Nice(x)) ::: All big people are nice.\n∀x (Blue(Gary) → Nice(Gary)) ::: If Gary is blue then Gary is nice.\nConclusion:\n¬Nice(Bob) ::: Bob is not nice."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-897",
    "context": "The cat is young. All nice things are young. Rough things are nice. If the cat is nice then the cat is red. Young things are rough. If something is rough and not young then it is not red. If something is nice then it is red. All rough, young things are not round. If something is young and not red then it is not round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not like the cat.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nLikes(x, y) ::: x likes y.\nCat(x) ::: x is a cat.\nPremises:\nYoung(Cat) ::: The cat is young.\n∀x (Nice(x) → Young(x)) ::: All nice things are young.\n∀x (Rough(x) → Nice(x)) ::: Rough things are nice.\n∀x ((Cat(x) ∧ Nice(x)) → Red(x)) ::: If the cat is nice then the cat is red.\n∀x (Young(x) → Rough(x)) ::: Young things are rough.\n∀x ((Rough(x) ∧ ¬Young(x)) → ¬Red(x)) ::: If something is rough and not young then it is not red.\n∀x (Nice(x) → Red(x)) ::: If something is nice then it is red.\n∀x ((Rough(x) ∧ Young(x)) → ¬Round(x)) ::: All rough, young things are not round.\n∀x ((Young(x) ∧ ¬Red(x)) → ¬Round(x)) ::: If something is young and not red then it is not round.\nConclusion:\n¬Likes(Cat, Cat) ::: The cat does not like the cat."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1386",
    "context": "The bear likes the dog. The dog is green. The dog is red. The dog is rough. The dog does not need the bear. The dog visits the squirrel. The lion is big. The lion is rough. The lion is young. The lion likes the bear. The lion likes the squirrel. The lion needs the bear. The lion needs the dog. The lion visits the bear. The squirrel is young. The squirrel does not need the lion. If something is green and red then it visits the lion. Green things are red. If something visits the lion then it visits the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion visits the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nBig(x) ::: x is big.\nYoung(x) ::: x is young.\nPremises:\nLikes(bear, dog) ::: The bear likes the dog.\nGreen(dog) ::: The dog is green.\nRed(dog) ::: The dog is red.\nRough(dog) ::: The dog is rough.\n¬Needs(dog, bear) ::: The dog does not need the bear.\nVisits(dog, squirrel) ::: The dog visits the squirrel.\nBig(lion) ::: The lion is big.\nRough(lion) ::: The lion is rough.\nYoung(lion) ::: The lion is young.\nLikes(lion, bear) ::: The lion likes the bear.\nLikes(lion, squirrel) ::: The lion likes the squirrel.\nNeeds(lion, bear) ::: The lion needs the bear.\nNeeds(lion, dog) ::: The lion needs the dog.\nVisits(lion, bear) ::: The lion visits the bear.\nYoung(squirrel) ::: The squirrel is young.\n¬Needs(squirrel, lion) ::: The squirrel does not need the lion.\n∀x ((Green(x) ∧ Red(x)) → Visits(x, lion)) ::: If something is green and red then it visits the lion.\n∀x (Green(x) → Red(x)) ::: Green things are red.\n∀x (Visits(x, lion) → Visits(x, bear)) ::: If something visits the lion then it visits the bear.\nConclusion:\nVisits(lion, bear) ::: The lion visits the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1890",
    "context": "The bald eagle chases the rabbit. The bald eagle is red. The bald eagle sees the cat. The cat is young. The rabbit sees the cat. The rabbit sees the squirrel. The squirrel is young. If someone is red then they chase the bald eagle. If someone chases the bald eagle then the bald eagle is rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is not red.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nRed(x) ::: x is red.\nSees(x, y) ::: x sees y.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nBaldEagle(x) ::: x is a bald eagle.\nRabbit(x) ::: x is a rabbit.\nCat(x) ::: x is a cat.\nSquirrel(x) ::: x is a squirrel.\nPremises:\nChases(BaldEagle, Rabbit) ::: The bald eagle chases the rabbit.\nRed(BaldEagle) ::: The bald eagle is red.\nSees(BaldEagle, Cat) ::: The bald eagle sees the cat.\nYoung(Cat) ::: The cat is young.\nSees(Rabbit, Cat) ::: The rabbit sees the cat.\nSees(Rabbit, Squirrel) ::: The rabbit sees the squirrel.\nYoung(Squirrel) ::: The squirrel is young.\n∀x (Red(x) → Chases(x, BaldEagle)) ::: If someone is red then they chase the bald eagle.\n∀x (Chases(x, BaldEagle) → Rough(BaldEagle)) ::: If someone chases the bald eagle then the bald eagle is rough.\nConclusion:\n¬Red(BaldEagle) ::: The bald eagle is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-717",
    "context": "The cat is young. The dog visits the cat. If the cat is round then the cat does not chase the dog. If something chases the cat then it is young. If something sees the cat and the cat sees the dog then the cat is not rough. If the dog visits the cat then the dog chases the cat. If something sees the dog and the dog visits the cat then the cat is young. If something is young and it does not chase the dog then the dog is not round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not see the dog.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nChase(x, y) ::: x chases y.\nSees(x, y) ::: x sees y.\nRough(x) ::: x is rough.\nPremises:\nYoung(cat) ::: The cat is young.\n∀x (Cat(x) → ∃y (Dog(y) ∧ Visits(y, x))) ::: The dog visits the cat.\n∀x ((Cat(x) ∧ Round(x)) → ¬Chase(x, Dog)) ::: If the cat is round then the cat does not chase the dog.\n∀x ((Chase(y, x)) → Young(x)) ::: If something chases the cat then it is young.\n∀x ((Sees(y, cat) ∧ Sees(cat, Dog)) → ¬Rough(cat)) ::: If something sees the cat and the cat sees the dog then the cat is not rough.\n∀x ((Dog(x) ∧ Visits(x, cat)) → Chase(x, cat)) ::: If the dog visits the cat then the dog chases the cat.\n∀x ((Sees(y, dog) ∧ Visits(dog, cat)) → Young(cat)) ::: If something sees the dog and the dog visits the cat then the cat is young.\n∀x ((Young(x) ∧ ¬Chase(x, dog)) → ¬Round(dog)) ::: If something is young and it does not chase the dog then the dog is not round.\nConclusion:\n¬Sees(cat, dog) ::: The cat does not see the dog."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-711",
    "context": "The cow likes the rabbit. The rabbit is kind. The rabbit visits the cow. If someone visits the cow then the cow chases the rabbit. If someone chases the rabbit then they visit the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow likes the rabbit.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nKind(x) ::: x is kind.\nVisits(x, y) ::: x visits y.\nChases(x, y) ::: x chases y.\nPremises:\nLikes(cow, rabbit) ::: The cow likes the rabbit.\nKind(rabbit) ::: The rabbit is kind.\nVisits(rabbit, cow) ::: The rabbit visits the cow.\n∀x (Visits(x, cow) → Chases(x, rabbit)) ::: If someone visits the cow then the cow chases the rabbit.\n∀x (Chases(x, rabbit) → Visits(x, cow)) ::: If someone chases the rabbit then they visit the cow.\nConclusion:\nLikes(cow, rabbit) ::: The cow likes the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-2016",
    "context": "Charlie is furry. Charlie is kind. Charlie is not red. All kind, young people are green. All furry people are young. If someone is kind then they are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nPremises:\nFurry(Charlie) ::: Charlie is furry.\nKind(Charlie) ::: Charlie is kind.\n¬Red(Charlie) ::: Charlie is not red.\n∀x ((Kind(x) ∧ Young(x)) → Green(x)) ::: All kind, young people are green.\n∀x (Furry(x) → Young(x)) ::: All furry people are young.\n∀x (Kind(x) → Big(x)) ::: If someone is kind then they are big.\nConclusion:\n¬Furry(Charlie) ::: Charlie is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1619",
    "context": "Anne is smart. Charlie is nice. Charlie is white. Dave is not young. Fiona is green. Fiona is nice. Fiona is white. Nice people are not young. All nice, white people are rough. Rough people are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nPremises:\nSmart(Anne) ::: Anne is smart.\nNice(Charlie) ::: Charlie is nice.\nWhite(Charlie) ::: Charlie is white.\n¬Young(Dave) ::: Dave is not young.\nGreen(Fiona) ::: Fiona is green.\nNice(Fiona) ::: Fiona is nice.\nWhite(Fiona) ::: Fiona is white.\n∀x (Nice(x) → ¬Young(x)) ::: Nice people are not young.\n∀x ((Nice(x) ∧ White(x)) → Rough(x)) ::: All nice, white people are rough.\n∀x (Rough(x) → Red(x)) ::: Rough people are red.\nConclusion:\n¬Rough(Dave) ::: Dave is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-715",
    "context": "Bob is round. Erin is quiet. Erin is smart. Round things are furry. Round things are nice. All smart things are rough. If something is smart then it is green. Nice things are quiet. If something is rough and smart then it is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nGreen(x) ::: x is green.\nPremises:\nRound(Bob) ::: Bob is round.\nQuiet(Erin) ::: Erin is quiet.\nSmart(Erin) ::: Erin is smart.\n∀x (Round(x) → Furry(x)) ::: Round things are furry.\n∀x (Round(x) → Nice(x)) ::: Round things are nice.\n∀x (Smart(x) → Rough(x)) ::: All smart things are rough.\n∀x (Smart(x) → Green(x)) ::: If something is smart then it is green.\n∀x (Nice(x) → Quiet(x)) ::: Nice things are quiet.\n∀x ((Rough(x) ∧ Smart(x)) → Nice(x)) ::: If something is rough and smart then it is nice.\nConclusion:\nQuiet(Erin) ::: Erin is quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-634",
    "context": "Anne is cold. Anne is rough. Anne is round. Anne is smart. Anne is young. Fiona is cold. Fiona is nice. Fiona is rough. Fiona is round. Harry is cold. Harry is nice. Harry is red. Harry is rough. Harry is round. Harry is smart. Harry is young. Smart, cold people are young. Nice, round people are smart. All cold people are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not young.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nPremises:\nCold(Anne) ::: Anne is cold.\nRough(Anne) ::: Anne is rough.\nRound(Anne) ::: Anne is round.\nSmart(Anne) ::: Anne is smart.\nYoung(Anne) ::: Anne is young.\nCold(Fiona) ::: Fiona is cold.\nNice(Fiona) ::: Fiona is nice.\nRough(Fiona) ::: Fiona is rough.\nRound(Fiona) ::: Fiona is round.\nCold(Harry) ::: Harry is cold.\nNice(Harry) ::: Harry is nice.\nRed(Harry) ::: Harry is red.\nRough(Harry) ::: Harry is rough.\nRound(Harry) ::: Harry is round.\nSmart(Harry) ::: Harry is smart.\nYoung(Harry) ::: Harry is young.\n∀x ((Smart(x) ∧ Cold(x)) → Young(x)) ::: Smart, cold people are young.\n∀x ((Nice(x) ∧ Round(x)) → Smart(x)) ::: Nice, round people are smart.\n∀x (Cold(x) → Red(x)) ::: All cold people are red.\nConclusion:\n¬Young(Anne) ::: Anne is not young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-102",
    "context": "Dave is white. Gary is blue. If something is white then it is round. If Dave is round then Dave is rough. If Gary is blue then Gary is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite(x) ::: x is white.\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nRough(x) ::: x is rough.\nKind(x) ::: x is kind.\nPremises:\nWhite(Dave) ::: Dave is white.\nBlue(Gary) ::: Gary is blue.\n∀x (White(x) → Round(x)) ::: If something is white then it is round.\n∀x ((Round(x) ∧ Dave) → Rough(Dave)) ::: If Dave is round then Dave is rough.\n∀x ((Blue(x) → Kind(x))) ::: If Gary is blue then Gary is kind.\nConclusion:\n¬Round(Gary) ::: Gary is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1671",
    "context": "Fiona is blue. Fiona is cold. Fiona is nice. Fiona is round. Fiona is smart. Fiona is young. Gary is blue. Gary is green. Gary is nice. Gary is round. All nice people are cold. All nice, cold people are green. All smart people are blue. If someone is young then they are blue. Cold people are young. Round people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nPremises:\nBlue(Fiona) ::: Fiona is blue.\nCold(Fiona) ::: Fiona is cold.\nNice(Fiona) ::: Fiona is nice.\nRound(Fiona) ::: Fiona is round.\nSmart(Fiona) ::: Fiona is smart.\nYoung(Fiona) ::: Fiona is young.\nBlue(Gary) ::: Gary is blue.\nGreen(Gary) ::: Gary is green.\nNice(Gary) ::: Gary is nice.\nRound(Gary) ::: Gary is round.\n∀x (Nice(x) → Cold(x)) ::: All nice people are cold.\n∀x ((Nice(x) ∧ Cold(x)) → Green(x)) ::: All nice, cold people are green.\n∀x (Smart(x) → Blue(x)) ::: All smart people are blue.\n∀x (Young(x) → Blue(x)) ::: If someone is young then they are blue.\n∀x (Cold(x) → Young(x)) ::: Cold people are young.\n∀x (Round(x) → Cold(x)) ::: Round people are cold.\nConclusion:\nCold(Fiona) ::: Fiona is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-2276",
    "context": "Anne is nice. Bob is quiet. Erin is not white. White people are blue. If someone is quiet then they are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nBlue(x) ::: x is blue.\nPremises:\nNice(Anne) ::: Anne is nice.\nQuiet(Bob) ::: Bob is quiet.\n¬White(Erin) ::: Erin is not white.\n∀x (White(x) → Blue(x)) ::: White people are blue.\n∀x (Quiet(x) → White(x)) ::: If someone is quiet then they are white.\nConclusion:\nWhite(Erin) ::: Erin is white."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-995",
    "context": "The cow chases the lion. The cow is cold. The cow is red. The cow is rough. The cow needs the lion. The cow visits the lion. The lion chases the cow. The lion is cold. The lion is red. The lion is round. The lion is young. The lion visits the cow. If something visits the cow and it needs the cow then the cow is round. If something is rough and it visits the lion then the lion needs the cow. If something is rough then it needs the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not need the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nPremises:\nChases(Cow, Lion) ::: The cow chases the lion.\nCold(Cow) ::: The cow is cold.\nRed(Cow) ::: The cow is red.\nRough(Cow) ::: The cow is rough.\nNeeds(Cow, Lion) ::: The cow needs the lion.\nVisits(Cow, Lion) ::: The cow visits the lion.\nChases(Lion, Cow) ::: The lion chases the cow.\nCold(Lion) ::: The lion is cold.\nRed(Lion) ::: The lion is red.\nRound(Lion) ::: The lion is round.\nYoung(Lion) ::: The lion is young.\nVisits(x, Cow) ∧ Needs(x, Cow) → Round(Cow) ::: If something visits the cow and it needs the cow then the cow is round.\nRough(x) ∧ Visits(x, Lion) → Needs(Lion, Cow) ::: If something is rough and it visits the lion then the lion needs the cow.\nRough(x) → Needs(x, Lion) ::: If something is rough then it needs the lion.\nConclusion:\n¬Needs(Lion, Lion) ::: The lion does not need the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-813",
    "context": "The cat does not eat the tiger. The tiger eats the cat. If something sees the cat and the cat sees the tiger then the tiger is not cold. If something eats the cat then the cat visits the tiger. If something eats the cat and it visits the cat then it visits the tiger. If something sees the tiger and it is kind then the tiger visits the cat. If the tiger eats the cat and the cat visits the tiger then the cat sees the tiger. If something is cold then it sees the cat. If something visits the cat and the cat is green then the cat is blue. If something sees the cat and the cat does not visit the tiger then the cat is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not eat the tiger.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEat(x, y) ::: x eats y.\nSee(x, y) ::: x sees y.\nCold(x) ::: x is cold.\nVisit(x, y) ::: x visits y.\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nCat(x) ::: x is a cat.\nTiger(x) ::: x is a tiger.\nPremises:\n¬Eat(Cat, Tiger) ::: The cat does not eat the tiger.\nEat(Tiger, Cat) ::: The tiger eats the cat.\n∀x ((See(x, Cat) ∧ See(Cat, Tiger)) → ¬Cold(Tiger)) ::: If something sees the cat and the cat sees the tiger then the tiger is not cold.\n∀x (Eat(x, Cat) → Visit(x, Tiger)) ::: If something eats the cat then the cat visits the tiger.\n∀x ((Eat(x, Cat) ∧ Visit(x, Cat)) → Visit(x, Tiger)) ::: If something eats the cat and it visits the cat then it visits the tiger.\n∀x ((See(x, Tiger) ∧ Kind(x)) → Visit(Tiger, Cat)) ::: If something sees the tiger and it is kind then the tiger visits the cat.\n∀x ((Eat(Tiger, Cat) ∧ Visit(Cat, Tiger)) → See(Cat, Tiger)) ::: If the tiger eats the cat and the cat visits the tiger then the cat sees the tiger.\n∀x (Cold(x) → See(x, Cat)) ::: If something is cold then it sees the cat.\n∀x ((Visit(x, Cat) ∧ Green(Cat)) → Blue(Cat)) ::: If something visits the cat and the cat is green then the cat is blue.\n∀x ((See(x, Cat) ∧ ¬Visit(Cat, Tiger)) → Green(Cat)) ::: If something sees the cat and the cat does not visit the tiger then the cat is green.\nConclusion:\n¬Eat(Cat, Tiger) ::: The cat does not eat the tiger."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-958",
    "context": "The bald eagle visits the mouse. The mouse does not chase the bald eagle. The tiger visits the bald eagle. If someone chases the mouse then the mouse is cold. If someone visits the mouse then they chase the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not visit the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nVisits(x, y) ::: x visits y.\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nBaldEagle(x) ::: x is a bald eagle.\nMouse(x) ::: x is a mouse.\nTiger(x) ::: x is a tiger.\nPremises:\nVisits(BaldEagle, Mouse) ::: The bald eagle visits the mouse.\n¬Chases(Mouse, BaldEagle) ::: The mouse does not chase the bald eagle.\nVisits(Tiger, BaldEagle) ::: The tiger visits the bald eagle.\n∀x (Chases(x, Mouse) → Cold(Mouse)) ::: If someone chases the mouse then the mouse is cold.\n∀x (Visits(x, Mouse) → Chases(x, Mouse)) ::: If someone visits the mouse then they chase the mouse.\nConclusion:\n¬Visits(Tiger, BaldEagle) ::: The tiger does not visit the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1141",
    "context": "The lion chases the mouse. The lion eats the mouse. The lion is cold. The lion is green. The lion is nice. The lion is red. The lion is rough. The lion sees the mouse. The mouse chases the lion. The mouse eats the lion. The mouse is cold. The mouse is green. The mouse is nice. The mouse is red. The mouse is rough. The mouse sees the lion. If someone is cold and they see the lion then the lion eats the mouse. If someone is nice then they eat the lion. If someone sees the mouse then the mouse is cold. If someone is nice and they see the mouse then they chase the mouse. If someone is green and cold then they see the mouse. If someone eats the mouse and they see the lion then they chase the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not chase the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nPremises:\nChases(lion, mouse) ::: The lion chases the mouse.\nEats(lion, mouse) ::: The lion eats the mouse.\nCold(lion) ::: The lion is cold.\nGreen(lion) ::: The lion is green.\nNice(lion) ::: The lion is nice.\nRed(lion) ::: The lion is red.\nRough(lion) ::: The lion is rough.\nSees(lion, mouse) ::: The lion sees the mouse.\nChases(mouse, lion) ::: The mouse chases the lion.\nEats(mouse, lion) ::: The mouse eats the lion.\nCold(mouse) ::: The mouse is cold.\nGreen(mouse) ::: The mouse is green.\nNice(mouse) ::: The mouse is nice.\nRed(mouse) ::: The mouse is red.\nRough(mouse) ::: The mouse is rough.\nSees(mouse, lion) ::: The mouse sees the lion.\n∀x ((Cold(x) ∧ Sees(x, lion)) → Eats(lion, mouse)) ::: If someone is cold and they see the lion then the lion eats the mouse.\n∀x (Nice(x) → Eats(x, lion)) ::: If someone is nice then they eat the lion.\n∀x (Sees(x, mouse) → Cold(mouse)) ::: If someone sees the mouse then the mouse is cold.\n∀x ((Nice(x) ∧ Sees(x, mouse)) → Chases(x, mouse)) ::: If someone is nice and they see the mouse then they chase the mouse.\n∀x ((Green(x) ∧ Cold(x)) → Sees(x, mouse)) ::: If someone is green and cold then they see the mouse.\n∀x ((Eats(x, mouse) ∧ Sees(x, lion)) → Chases(x, mouse)) ::: If someone eats the mouse and they see the lion then they chase the mouse.\nConclusion:\n¬Chases(lion, lion) ::: The lion does not chase the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-827",
    "context": "The cow is kind. If someone is big and kind then they are young. Kind people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nYoung(x) ::: x is young.\nPremises:\nKind(cow) ::: The cow is kind.\n∀x ((Big(x) ∧ Kind(x)) → Young(x)) ::: If someone is big and kind then they are young.\n∀x (Kind(x) → Big(x)) ::: Kind people are big.\nConclusion:\nKind(cow) ::: The cow is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-190",
    "context": "Bob is round. Charlie is big. Charlie is kind. Charlie is quiet. Erin is blue. Erin is kind. Erin is round. Erin is smart. Gary is furry. Gary is kind. Gary is quiet. Gary is smart. If someone is big and smart then they are furry. If Gary is blue then Gary is big. If someone is round and furry then they are kind. All big, blue people are furry. All smart people are quiet. Kind people are smart. All furry, kind people are smart. If Gary is blue and Gary is furry then Gary is smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nPremises:\nRound(Bob) ::: Bob is round.\nBig(Charlie) ::: Charlie is big.\nKind(Charlie) ::: Charlie is kind.\nQuiet(Charlie) ::: Charlie is quiet.\nBlue(Erin) ::: Erin is blue.\nKind(Erin) ::: Erin is kind.\nRound(Erin) ::: Erin is round.\nSmart(Erin) ::: Erin is smart.\nFurry(Gary) ::: Gary is furry.\nKind(Gary) ::: Gary is kind.\nQuiet(Gary) ::: Gary is quiet.\nSmart(Gary) ::: Gary is smart.\n∀x ((Big(x) ∧ Smart(x)) → Furry(x)) ::: If someone is big and smart then they are furry.\n∀x ((Blue(x) → Big(x)) ::: If Gary is blue then Gary is big.\n∀x ((Round(x) ∧ Furry(x)) → Kind(x)) ::: If someone is round and furry then they are kind.\n∀x ((Big(x) ∧ Blue(x)) → Furry(x)) ::: All big, blue people are furry.\n∀x (Smart(x) → Quiet(x)) ::: All smart people are quiet.\n∀x (Kind(x) → Smart(x)) ::: Kind people are smart.\n∀x ((Furry(x) ∧ Kind(x)) → Smart(x)) ::: All furry, kind people are smart.\n∀x ((Blue(x) ∧ Furry(x)) → Smart(x)) ::: If Gary is blue and Gary is furry then Gary is smart.\nConclusion:\n¬Big(Charlie) ::: Charlie is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1057",
    "context": "Bob is kind. Bob is red. Bob is rough. Bob is round. Bob is smart. Dave is cold. Dave is kind. Gary is kind. Gary is rough. Gary is white. Harry is red. Harry is not white. If Dave is rough then Dave is cold. If someone is white and round then they are cold. All smart, white people are cold. If someone is red and kind then they are smart. If someone is rough and not white then they are not smart. All kind people are smart. If someone is smart and not round then they are kind. Round, kind people are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nWhite(x) ::: x is white.\nDave(x) ::: x is Dave.\nGary(x) ::: x is Gary.\nHarry(x) ::: x is Harry.\nPremises:\nKind(Bob) ::: Bob is kind.\nRed(Bob) ::: Bob is red.\nRough(Bob) ::: Bob is rough.\nRound(Bob) ::: Bob is round.\nSmart(Bob) ::: Bob is smart.\nCold(Dave) ::: Dave is cold.\nKind(Dave) ::: Dave is kind.\nKind(Gary) ::: Gary is kind.\nRough(Gary) ::: Gary is rough.\nWhite(Gary) ::: Gary is white.\nRed(Harry) ::: Harry is red.\n¬White(Harry) ::: Harry is not white.\n∀x ((Dave(x) ∧ Rough(x)) → Cold(x)) ::: If Dave is rough then Dave is cold.\n∀x ((White(x) ∧ Round(x)) → Cold(x)) ::: If someone is white and round then they are cold.\n∀x ((Smart(x) ∧ White(x)) → Cold(x)) ::: All smart, white people are cold.\n∀x ((Red(x) ∧ Kind(x)) → Smart(x)) ::: If someone is red and kind then they are smart.\n∀x ((Rough(x) ∧ ¬White(x)) → ¬Smart(x)) ::: If someone is rough and not white then they are not smart.\n∀x (Kind(x) → Smart(x)) ::: All kind people are smart.\n∀x ((Smart(x) ∧ ¬Round(x)) → Kind(x)) ::: If someone is smart and not round then they are kind.\n∀x ((Round(x) ∧ Kind(x)) → Red(x)) ::: Round, kind people are red.\nConclusion:\n¬Cold(Bob) ::: Bob is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-738",
    "context": "Bob is big. Bob is blue. Bob is green. Bob is not kind. Charlie is nice. Fiona is blue. Fiona is kind. All nice things are blue. If something is kind and green then it is blue. If something is smart and not big then it is not blue. Cold things are not blue. All cold things are not kind. Blue, nice things are not kind. If Fiona is not smart then Fiona is nice. Blue things are not cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nPremises:\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\nGreen(Bob) ::: Bob is green.\n¬Kind(Bob) ::: Bob is not kind.\nNice(Charlie) ::: Charlie is nice.\nBlue(Fiona) ::: Fiona is blue.\nKind(Fiona) ::: Fiona is kind.\n∀x (Nice(x) → Blue(x)) ::: All nice things are blue.\n∀x ((Kind(x) ∧ Green(x)) → Blue(x)) ::: If something is kind and green then it is blue.\n∀x ((Smart(x) ∧ ¬Big(x)) → ¬Blue(x)) ::: If something is smart and not big then it is not blue.\n∀x (Cold(x) → ¬Blue(x)) ::: Cold things are not blue.\n∀x (Cold(x) → ¬Kind(x)) ::: All cold things are not kind.\n∀x ((Blue(x) ∧ Nice(x)) → ¬Kind(x)) ::: Blue, nice things are not kind.\n∀x (¬Smart(Fiona) → Nice(Fiona)) ::: If Fiona is not smart then Fiona is nice.\n∀x (Blue(x) → ¬Cold(x)) ::: Blue things are not cold.\nConclusion:\nBig(Bob) ::: Bob is big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-57",
    "context": "The cow is green. The cow is kind. The cow is young. Green, young people are cold. All kind, cold people are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nPremises:\nGreen(cow) ::: The cow is green.\nKind(cow) ::: The cow is kind.\nYoung(cow) ::: The cow is young.\n∀x ((Green(x) ∧ Young(x)) → Cold(x)) ::: Green, young people are cold.\n∀x ((Kind(x) ∧ Cold(x)) → Nice(x)) ::: All kind, cold people are nice.\nConclusion:\n¬Kind(cow) ::: The cow is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-968",
    "context": "The bald eagle chases the lion. The lion does not need the bald eagle. The mouse needs the lion. The tiger chases the bald eagle. If something chases the bald eagle then the bald eagle is young. If something chases the lion then the lion is not young. If the tiger chases the bald eagle and the tiger does not like the mouse then the tiger is big. If the bald eagle is young and the bald eagle chases the lion then the bald eagle needs the mouse. If something is cold and it likes the tiger then the tiger likes the bald eagle. If the bald eagle needs the mouse and the mouse chases the tiger then the mouse does not need the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not like the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nNeeds(x, y) ::: x needs y.\nLikes(x, y) ::: x likes y.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nPremises:\nChases(bald eagle, lion) ::: The bald eagle chases the lion.\n¬Needs(lion, bald eagle) ::: The lion does not need the bald eagle.\nNeeds(mouse, lion) ::: The mouse needs the lion.\nChases(tiger, bald eagle) ::: The tiger chases the bald eagle.\n∀x (Chases(x, bald eagle) → Young(bald eagle)) ::: If something chases the bald eagle then the bald eagle is young.\n∀x (Chases(x, lion) → ¬Young(lion)) ::: If something chases the lion then the lion is not young.\n∀x ((Chases(tiger, bald eagle) ∧ ¬Likes(tiger, mouse)) → Big(tiger)) ::: If the tiger chases the bald eagle and the tiger does not like the mouse then the tiger is big.\n∀x ((Young(bald eagle) ∧ Chases(bald eagle, lion)) → Needs(bald eagle, mouse)) ::: If the bald eagle is young and the bald eagle chases the lion then the bald eagle needs the mouse.\n∀x (Cold(x) ∧ Likes(x, tiger) → Likes(tiger, bald eagle)) ::: If something is cold and it likes the tiger then the tiger likes the bald eagle.\n∀x ((Needs(bald eagle, mouse) ∧ Chases(mouse, tiger)) → ¬Needs(mouse, tiger)) ::: If the bald eagle needs the mouse and the mouse chases the tiger then the mouse does not need the tiger.\nConclusion:\n¬Likes(tiger, bald eagle) ::: The tiger does not like the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1272",
    "context": "The bald eagle is big. The bald eagle is green. The bald eagle is red. The bald eagle is rough. The bald eagle sees the dog. The dog sees the bald eagle. The lion chases the dog. The lion is green. The lion is rough. The lion sees the bald eagle. If the bald eagle chases the dog then the bald eagle chases the lion. If something sees the dog then it is red. If the bald eagle visits the dog then the dog visits the lion. If something is cold and it sees the lion then it visits the lion. If something chases the bald eagle then it visits the bald eagle. If something chases the lion then the lion visits the dog. If something chases the dog then it sees the dog. If something chases the bald eagle and the bald eagle sees the dog then it sees the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog sees the bald eagle.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nChases(x, y) ::: x chases y.\nVisits(x, y) ::: x visits y.\nCold(x) ::: x is cold.\n\nPremises:\nBig(bald_eagle) ::: The bald eagle is big.\nGreen(bald_eagle) ::: The bald eagle is green.\nRed(bald_eagle) ::: The bald eagle is red.\nRough(bald_eagle) ::: The bald eagle is rough.\nSees(bald_eagle, dog) ::: The bald eagle sees the dog.\nSees(dog, bald_eagle) ::: The dog sees the bald eagle.\nChases(lion, dog) ::: The lion chases the dog.\nGreen(lion) ::: The lion is green.\nRough(lion) ::: The lion is rough.\nSees(lion, bald_eagle) ::: The lion sees the bald eagle.\n∀x ((Chases(bald_eagle, dog)) → Chases(bald_eagle, lion)) ::: If the bald eagle chases the dog then the bald eagle chases the lion.\n∀x ((Sees(x, dog)) → Red(x)) ::: If something sees the dog then it is red.\n∀x ((Visits(bald_eagle, dog)) → Visits(dog, lion)) ::: If the bald eagle visits the dog then the dog visits the lion.\n∀x ((Cold(x) ∧ Sees(x, lion)) → Visits(x, lion)) ::: If something is cold and it sees the lion then it visits the lion.\n∀x ((Chases(x, bald_eagle)) → Visits(x, bald_eagle)) ::: If something chases the bald eagle then it visits the bald eagle.\n∀x ((Chases(x, lion)) → Visits(lion, dog)) ::: If something chases the lion then the lion visits the dog.\n∀x ((Chases(x, dog)) → Sees(x, dog)) ::: If something chases the dog then it sees the dog.\n∀x ((Chases(x, bald_eagle) ∧ Sees(bald_eagle, dog)) → Sees(x, lion)) ::: If something chases the bald eagle and the bald eagle sees the dog then it sees the lion.\n\nConclusion:\nSees(dog, bald_eagle) ::: The dog sees the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-596",
    "context": "Anne is cold. Anne is young. Bob is quiet. Bob is round. Erin is round. Gary is big. Gary is red. If someone is big then they are cold. If Erin is round then Erin is big. If someone is cold and not big then they are red. If someone is red and not cold then they are not quiet. If someone is red and blue then they are quiet. All cold people are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not cold.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nPremises:\nCold(Anne) ::: Anne is cold.\nYoung(Anne) ::: Anne is young.\nQuiet(Bob) ::: Bob is quiet.\nRound(Bob) ::: Bob is round.\nRound(Erin) ::: Erin is round.\nBig(Gary) ::: Gary is big.\nRed(Gary) ::: Gary is red.\n∀x (Big(x) → Cold(x)) ::: If someone is big then they are cold.\n∀x (Round(Erin) → Big(Erin)) ::: If Erin is round then Erin is big.\n∀x ((Cold(x) ∧ ¬Big(x)) → Red(x)) ::: If someone is cold and not big then they are red.\n∀x ((Red(x) ∧ ¬Cold(x)) → ¬Quiet(x)) ::: If someone is red and not cold then they are not quiet.\n∀x ((Red(x) ∧ Blue(x)) → Quiet(x)) ::: If someone is red and blue then they are quiet.\n∀x (Cold(x) → Quiet(x)) ::: All cold people are quiet.\nConclusion:\n¬Cold(Anne) ::: Anne is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-770",
    "context": "The bear sees the cat. The cat eats the tiger. The lion is red. The tiger is rough. If someone is rough and they see the lion then they eat the cat. If someone sees the tiger then they eat the lion. If someone eats the lion and they see the lion then they eat the cat. If the lion chases the cat and the cat eats the lion then the cat chases the bear. If someone eats the tiger then the tiger sees the lion. If the tiger sees the bear then the bear is rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not eat the cat.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nEats(x, y) ::: x eats y.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nChases(x, y) ::: x chases y.\nConclusion:\n¬Eats(bear, cat) ::: The bear does not eat the cat.\nPremises:\nSees(bear, cat) ::: The bear sees the cat.\nEats(cat, tiger) ::: The cat eats the tiger.\nRed(lion) ::: The lion is red.\nRough(tiger) ::: The tiger is rough.\n∀x ((Rough(x) ∧ Sees(x, lion)) → Eats(x, cat)) ::: If someone is rough and they see the lion then they eat the cat.\n∀x (Sees(x, tiger) → Eats(x, lion)) ::: If someone sees the tiger then they eat the lion.\n∀x ((Eats(x, lion) ∧ Sees(x, lion)) → Eats(x, cat)) ::: If someone eats the lion and they see the lion then they eat the cat.\n∀x ((Chases(lion, cat) ∧ Eats(cat, lion)) → Chases(cat, bear)) ::: If the lion chases the cat and the cat eats the lion then the cat chases the bear.\n∀x (Eats(x, tiger) → Sees(tiger, lion)) ::: If someone eats the tiger then the tiger sees the lion.\n∀x (Sees(tiger, bear) → Rough(bear)) ::: If the tiger sees the bear then the bear is rough."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-207",
    "context": "The lion chases the rabbit. The lion is not big. The lion is not green. The lion is nice. The lion is young. The lion does not like the rabbit. The lion sees the rabbit. The rabbit chases the lion. The rabbit is big. The rabbit is green. The rabbit is nice. The rabbit is red. The rabbit is young. The rabbit likes the lion. The rabbit sees the lion. If someone chases the rabbit then they see the rabbit. If someone is big then they chase the rabbit. If someone likes the rabbit then the rabbit chases the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion sees the rabbit.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nPremises:\nChases(Lion, Rabbit) ::: The lion chases the rabbit.\n¬Big(Lion) ::: The lion is not big.\n¬Green(Lion) ::: The lion is not green.\nNice(Lion) ::: The lion is nice.\nYoung(Lion) ::: The lion is young.\n¬Likes(Lion, Rabbit) ::: The lion does not like the rabbit.\nSees(Lion, Rabbit) ::: The lion sees the rabbit.\nChases(Rabbit, Lion) ::: The rabbit chases the lion.\nBig(Rabbit) ::: The rabbit is big.\nGreen(Rabbit) ::: The rabbit is green.\nNice(Rabbit) ::: The rabbit is nice.\nRed(Rabbit) ::: The rabbit is red.\nYoung(Rabbit) ::: The rabbit is young.\nLikes(Rabbit, Lion) ::: The rabbit likes the lion.\nSees(Rabbit, Lion) ::: The rabbit sees the lion.\n∀x ∀y ((Chases(x, Rabbit) → Sees(x, Rabbit))) ::: If someone chases the rabbit then they see the rabbit.\n∀x ((Big(x) → Chases(x, Rabbit))) ::: If someone is big then they chase the rabbit.\n∀x ∀y ((Likes(x, Rabbit) → Chases(Rabbit, y))) ::: If someone likes the rabbit then the rabbit chases the lion.\nConclusion:\nSees(Lion, Rabbit) ::: The lion sees the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-723",
    "context": "Erin is furry. Erin is green. Erin is quiet. Erin is white. Erin is young. Gary is big. Gary is green. Gary is nice. Gary is young. Harry is big. Harry is furry. Harry is green. Harry is nice. Harry is quiet. Harry is young. If Erin is young and Erin is big then Erin is nice. White, young things are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nPremises:\nFurry(Erin) ::: Erin is furry.\nGreen(Erin) ::: Erin is green.\nQuiet(Erin) ::: Erin is quiet.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\nBig(Gary) ::: Gary is big.\nGreen(Gary) ::: Gary is green.\nNice(Gary) ::: Gary is nice.\nYoung(Gary) ::: Gary is young.\nBig(Harry) ::: Harry is big.\nFurry(Harry) ::: Harry is furry.\nGreen(Harry) ::: Harry is green.\nNice(Harry) ::: Harry is nice.\nQuiet(Harry) ::: Harry is quiet.\nYoung(Harry) ::: Harry is young.\n∀x ((Young(x) ∧ Big(x)) → Nice(x)) ::: If Erin is young and Erin is big then Erin is nice.\n∀x ((White(x) ∧ Young(x)) → Big(x)) ::: White, young things are big.\nConclusion:\n¬Big(Harry) ::: Harry is not big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-883",
    "context": "The bald eagle eats the lion. The bald eagle is green. The bald eagle needs the lion. The bald eagle visits the lion. The lion eats the bald eagle. The lion is nice. The lion does not need the bald eagle. If someone needs the lion then the lion is rough. If someone is rough then they eat the lion. If someone needs the bald eagle and they do not visit the bald eagle then the bald eagle does not visit the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not visit the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nPremises:\nEats(BaldEagle, Lion) ::: The bald eagle eats the lion.\nGreen(BaldEagle) ::: The bald eagle is green.\nNeeds(BaldEagle, Lion) ::: The bald eagle needs the lion.\nVisits(BaldEagle, Lion) ::: The bald eagle visits the lion.\nEats(Lion, BaldEagle) ::: The lion eats the bald eagle.\nNice(Lion) ::: The lion is nice.\n¬Needs(Lion, BaldEagle) ::: The lion does not need the bald eagle.\n∀x (Needs(x, Lion) → Rough(Lion)) ::: If someone needs the lion then the lion is rough.\n∀x (Rough(x) → Eats(x, Lion)) ::: If someone is rough then they eat the lion.\n∀x ((Needs(x, BaldEagle) ∧ ¬Visits(x, BaldEagle)) → ¬Visits(BaldEagle, Lion)) ::: If someone needs the bald eagle and they do not visit the bald eagle then the bald eagle does not visit the lion.\nConclusion:\n¬Visits(BaldEagle, BaldEagle) ::: The bald eagle does not visit the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-55",
    "context": "Bob is blue. Erin is not kind. Fiona is quiet. Gary is big. All kind things are cold. Big things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nPremises:\nBlue(Bob) ::: Bob is blue.\n¬Kind(Erin) ::: Erin is not kind.\nQuiet(Fiona) ::: Fiona is quiet.\nBig(Gary) ::: Gary is big.\n∀x (Kind(x) → Cold(x)) ::: All kind things are cold.\n∀x (Big(x) → Kind(x)) ::: Big things are kind.\nConclusion:\nBig(Gary) ::: Gary is big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-954",
    "context": "The bear does not eat the mouse. The cow is big. The mouse needs the cow. The rabbit is not young. If something is red then it needs the cow. If something visits the cow and it is cold then it is red. All young things are red. If the rabbit is red and the rabbit does not eat the bear then the rabbit needs the mouse. If something is big then it is young. If something needs the rabbit and the rabbit is young then the rabbit eats the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not need the cow.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEat(x, y) ::: x eats y.\nBig(x) ::: x is big.\nNeeds(x, y) ::: x needs y.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nVisit(x, y) ::: x visits y.\nCold(x) ::: x is cold.\nRabbit(x) ::: x is a rabbit.\nMouse(x) ::: x is a mouse.\nCow(x) ::: x is a cow.\nPremises:\n¬Eat(bear, mouse) ::: The bear does not eat the mouse.\nBig(cow) ::: The cow is big.\nNeeds(mouse, cow) ::: The mouse needs the cow.\n¬Young(rabbit) ::: The rabbit is not young.\n∀x (Red(x) → Needs(x, cow)) ::: If something is red then it needs the cow.\n∀x ((Visit(x, cow) ∧ Cold(x)) → Red(x)) ::: If something visits the cow and it is cold then it is red.\n∀x (Young(x) → Red(x)) ::: All young things are red.\n∀x ((Rabbit(x) ∧ Red(x) ∧ ¬Eat(x, bear)) → Needs(x, mouse)) ::: If the rabbit is red and the rabbit does not eat the bear then the rabbit needs the mouse.\n∀x (Big(x) → Young(x)) ::: If something is big then it is young.\n∀x ((Needs(x, rabbit) ∧ Young(rabbit)) → Eat(rabbit, mouse)) ::: If something needs the rabbit and the rabbit is young then the rabbit eats the mouse.\nConclusion:\n¬Needs(mouse, cow) ::: The mouse does not need the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1004",
    "context": "The bald eagle sees the bear. The bear sees the tiger. The mouse does not see the bald eagle. The tiger eats the bear. If something eats the bear then the bear is green. If the bear is green then the bear is not cold. All nice, cold things are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nEats(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nPremises:\nSees(BaldEagle, Bear) ::: The bald eagle sees the bear.\nSees(Bear, Tiger) ::: The bear sees the tiger.\n¬Sees(Mouse, BaldEagle) ::: The mouse does not see the bald eagle.\nEats(Tiger, Bear) ::: The tiger eats the bear.\n∀x (Eats(x, Bear) → Green(Bear)) ::: If something eats the bear then the bear is green.\n∀x (Green(Bear) → ¬Cold(Bear)) ::: If the bear is green then the bear is not cold.\n∀x (Nice(x) ∧ Cold(x) → Green(x)) ::: All nice, cold things are green.\nConclusion:\n¬Green(Tiger) ::: The tiger is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-2127",
    "context": "The bald eagle eats the bear. The bald eagle eats the tiger. The bald eagle needs the mouse. The bear is kind. The bear likes the mouse. The mouse likes the bear. The mouse needs the bear. The tiger is young. The tiger likes the bear. The tiger likes the mouse. If someone needs the bald eagle then they eat the bear. If someone likes the bear and they eat the mouse then they like the mouse. If someone eats the mouse then they need the bear. If someone needs the bald eagle then they are red. If the bear is young then the bear likes the mouse. If someone likes the bald eagle then the bald eagle is young. If someone eats the bear then the bear needs the mouse. If someone eats the bear then the bear likes the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nLikes(x, y) ::: x likes y.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nPremises:\nEats(BaldEagle, Bear) ::: The bald eagle eats the bear.\nEats(BaldEagle, Tiger) ::: The bald eagle eats the tiger.\nNeeds(BaldEagle, Mouse) ::: The bald eagle needs the mouse.\nKind(Bear) ::: The bear is kind.\nLikes(Bear, Mouse) ::: The bear likes the mouse.\nLikes(Mouse, Bear) ::: The mouse likes the bear.\nNeeds(Mouse, Bear) ::: The mouse needs the bear.\nYoung(Tiger) ::: The tiger is young.\nLikes(Tiger, Bear) ::: The tiger likes the bear.\nLikes(Tiger, Mouse) ::: The tiger likes the mouse.\n∀x (Needs(x, BaldEagle) → Eats(x, Bear)) ::: If someone needs the bald eagle then they eat the bear.\n∀x ((Likes(x, Bear) ∧ Eats(x, Mouse)) → Likes(x, Mouse)) ::: If someone likes the bear and they eat the mouse then they like the mouse.\n∀x (Eats(x, Mouse) → Needs(x, Bear)) ::: If someone eats the mouse then they need the bear.\n∀x (Needs(x, BaldEagle) → Red(x)) ::: If someone needs the bald eagle then they are red.\n∀x ((Young(Bear) → Likes(Bear, Mouse))) ::: If the bear is young then the bear likes the mouse.\n∀x (Likes(x, BaldEagle) → Young(BaldEagle)) ::: If someone likes the bald eagle then the bald eagle is young.\n∀x (Eats(x, Bear) → Needs(x, Mouse)) ::: If someone eats the bear then the bear needs the mouse.\n∀x (Eats(x, Bear) → Likes(Bear, BaldEagle)) ::: If someone eats the bear then the bear likes the bald eagle.\nConclusion:\nYoung(Tiger) ::: The tiger is young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-831",
    "context": "The lion does not eat the mouse. The lion eats the tiger. The lion is cold. The lion is kind. The lion likes the tiger. The lion visits the mouse. The lion visits the tiger. The mouse is blue. The mouse likes the lion. The mouse does not like the tiger. The tiger is cold. The tiger is round. If something visits the tiger then the tiger is green. If the mouse visits the tiger then the tiger eats the lion. If the tiger likes the lion then the tiger is round. If the mouse does not like the lion then the mouse visits the tiger. Round things are green. If something is green and round then it visits the mouse. If something eats the lion and the lion eats the mouse then it is kind. If the tiger eats the mouse and the tiger does not visit the mouse then the tiger is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not like the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEat(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nLike(x, y) ::: x likes y.\nVisit(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nMouse(x) ::: x is a mouse.\nTiger(x) ::: x is a tiger.\nLion(x) ::: x is a lion.\nPremises:\n¬Eat(Lion, Mouse) ::: The lion does not eat the mouse.\nEat(Lion, Tiger) ::: The lion eats the tiger.\nCold(Lion) ::: The lion is cold.\nKind(Lion) ::: The lion is kind.\nLike(Lion, Tiger) ::: The lion likes the tiger.\nVisit(Lion, Mouse) ::: The lion visits the mouse.\nVisit(Lion, Tiger) ::: The lion visits the tiger.\nBlue(Mouse) ::: The mouse is blue.\nLike(Mouse, Lion) ::: The mouse likes the lion.\n¬Like(Mouse, Tiger) ::: The mouse does not like the tiger.\nCold(Tiger) ::: The tiger is cold.\nRound(Tiger) ::: The tiger is round.\n∀x ((Visit(x, Tiger)) → Green(Tiger)) ::: If something visits the tiger then the tiger is green.\n∀x ((Visit(Mouse, Tiger)) → Eat(Tiger, Lion)) ::: If the mouse visits the tiger then the tiger eats the lion.\n∀x ((Like(Tiger, Lion)) → Round(Tiger)) ::: If the tiger likes the lion then the tiger is round.\n∀x (¬Like(Mouse, Lion) → Visit(Mouse, Tiger)) ::: If the mouse does not like the lion then the mouse visits the tiger.\n∀x (Round(x) → Green(x)) ::: Round things are green.\n∀x ((Green(x) ∧ Round(x)) → Visit(x, Mouse)) ::: If something is green and round then it visits the mouse.\n∀x ((Eat(x, Lion) ∧ Eat(Lion, Mouse)) → Kind(x)) ::: If something eats the lion and the lion eats the mouse then it is kind.\n∀x ((Eat(Tiger, Mouse) ∧ ¬Visit(Tiger, Mouse)) → Cold(Tiger)) ::: If the tiger eats the mouse and the tiger does not visit the mouse then the tiger is cold.\nConclusion:\n¬Like(Mouse, Lion) ::: The mouse does not like the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-206",
    "context": "Bob is quiet. Bob is rough. Bob is white. Dave is kind. Dave is quiet. Dave is red. Dave is rough. Dave is white. Dave is young. Fiona is green. Fiona is kind. Fiona is quiet. Fiona is red. Fiona is rough. Fiona is white. Fiona is young. Quiet things are green. If something is kind and not quiet then it is green. If something is rough and not quiet then it is red. All quiet, red things are white. All green things are young. If something is rough and not red then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nPremises:\nQuiet(Bob) ::: Bob is quiet.\nRough(Bob) ::: Bob is rough.\nWhite(Bob) ::: Bob is white.\nKind(Dave) ::: Dave is kind.\nQuiet(Dave) ::: Dave is quiet.\nRed(Dave) ::: Dave is red.\nRough(Dave) ::: Dave is rough.\nWhite(Dave) ::: Dave is white.\nYoung(Dave) ::: Dave is young.\nGreen(Fiona) ::: Fiona is green.\nKind(Fiona) ::: Fiona is kind.\nQuiet(Fiona) ::: Fiona is quiet.\nRed(Fiona) ::: Fiona is red.\nRough(Fiona) ::: Fiona is rough.\nWhite(Fiona) ::: Fiona is white.\nYoung(Fiona) ::: Fiona is young.\n∀x ((Quiet(x) ∧ Green(x)) → Green(x)) ::: Quiet things are green.\n∀x ((Kind(x) ∧ ¬Quiet(x)) → Green(x)) ::: If something is kind and not quiet then it is green.\n∀x ((Rough(x) ∧ ¬Quiet(x)) → Red(x)) ::: If something is rough and not quiet then it is red.\n∀x ((Quiet(x) ∧ Red(x)) → White(x)) ::: All quiet, red things are white.\n∀x (Green(x) → Young(x)) ::: All green things are young.\n∀x ((Rough(x) ∧ ¬Red(x)) → Young(x)) ::: If something is rough and not red then it is young.\nConclusion:\n¬Red(Bob) ::: Bob is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-289",
    "context": "The bald eagle sees the bear. The bald eagle does not see the tiger. The bald eagle does not visit the bear. The bear is kind. The bear is red. The cat does not need the tiger. The cat sees the bald eagle. The tiger is kind. The tiger visits the bear. The tiger visits the cat. If someone sees the bald eagle then they see the tiger. If someone sees the tiger then the tiger is rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger visits the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nNeed(x, y) ::: x needs y.\nRough(x) ::: x is rough.\nBaldEagle(x) ::: x is a bald eagle.\nBear(x) ::: x is a bear.\nTiger(x) ::: x is a tiger.\nCat(x) ::: x is a cat.\nPremises:\nSees(BaldEagle, Bear) ::: The bald eagle sees the bear.\n¬Sees(BaldEagle, Tiger) ::: The bald eagle does not see the tiger.\n¬Visits(BaldEagle, Bear) ::: The bald eagle does not visit the bear.\nKind(Bear) ::: The bear is kind.\nRed(Bear) ::: The bear is red.\n¬Need(Cat, Tiger) ::: The cat does not need the tiger.\nSees(Cat, BaldEagle) ::: The cat sees the bald eagle.\nKind(Tiger) ::: The tiger is kind.\nVisits(Tiger, Bear) ::: The tiger visits the bear.\nVisits(Tiger, Cat) ::: The tiger visits the cat.\n∀x (Sees(x, BaldEagle) → Sees(x, Tiger)) ::: If someone sees the bald eagle then they see the tiger.\n∀x (Sees(x, Tiger) → Rough(Tiger)) ::: If someone sees the tiger then the tiger is rough.\nConclusion:\nVisits(Tiger, Bear) ::: The tiger visits the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-644",
    "context": "Charlie is smart. Charlie is white. Fiona is big. Fiona is smart. Gary is not big. Gary is not round. Harry is quiet. All quiet things are round. If something is round and quiet then it is young. All big things are not blue. All blue, round things are white. If something is white and not young then it is big. If something is round and big then it is not smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nSmart(Charlie) ::: Charlie is smart.\nWhite(Charlie) ::: Charlie is white.\nBig(Fiona) ::: Fiona is big.\nSmart(Fiona) ::: Fiona is smart.\n¬Big(Gary) ::: Gary is not big.\n¬Round(Gary) ::: Gary is not round.\nQuiet(Harry) ::: Harry is quiet.\n∀x (Quiet(x) → Round(x)) ::: All quiet things are round.\n∀x ((Round(x) ∧ Quiet(x)) → Young(x)) ::: If something is round and quiet then it is young.\n∀x (Big(x) → ¬Blue(x)) ::: All big things are not blue.\n∀x ((Blue(x) ∧ Round(x)) → White(x)) ::: All blue, round things are white.\n∀x ((White(x) ∧ ¬Young(x)) → Big(x)) ::: If something is white and not young then it is big.\n∀x ((Round(x) ∧ Big(x)) → ¬Smart(x)) ::: If something is round and big then it is not smart.\nConclusion:\n¬White(Charlie) ::: Charlie is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1616",
    "context": "Bob is blue. Charlie is not furry. Erin is big. Erin is rough. Fiona is not big. Fiona is not blue. Fiona is young. Young people are rough. All white people are round. If someone is young and not rough then they are not big. If someone is blue and not rough then they are big. If Erin is big then Erin is blue. Blue people are not furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nPremises:\nBlue(Bob) ::: Bob is blue.\n¬Furry(Charlie) ::: Charlie is not furry.\nBig(Erin) ::: Erin is big.\nRough(Erin) ::: Erin is rough.\n¬Big(Fiona) ::: Fiona is not big.\n¬Blue(Fiona) ::: Fiona is not blue.\nYoung(Fiona) ::: Fiona is young.\n∀x (Young(x) → Rough(x)) ::: Young people are rough.\n∀x (White(x) → Round(x)) ::: All white people are round.\n∀x ((Young(x) ∧ ¬Rough(x)) → ¬Big(x)) ::: If someone is young and not rough then they are not big.\n∀x ((Blue(x) ∧ ¬Rough(x)) → Big(x)) ::: If someone is blue and not rough then they are big.\n∀x (Big(Erin) → Blue(Erin)) ::: If Erin is big then Erin is blue.\n∀x (Blue(x) → ¬Furry(x)) ::: Blue people are not furry.\nConclusion:\n¬Rough(Bob) ::: Bob is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1818",
    "context": "Anne is cold. Anne is green. Anne is nice. Bob is nice. Bob is quiet. Dave is cold. Dave is quiet. Erin is not green. Erin is nice. Erin is quiet. All green, quiet people are young. If someone is cold then they are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nPremises:\nCold(Anne) ::: Anne is cold.\nGreen(Anne) ::: Anne is green.\nNice(Anne) ::: Anne is nice.\nNice(Bob) ::: Bob is nice.\nQuiet(Bob) ::: Bob is quiet.\nCold(Dave) ::: Dave is cold.\nQuiet(Dave) ::: Dave is quiet.\n¬Green(Erin) ::: Erin is not green.\nNice(Erin) ::: Erin is nice.\nQuiet(Erin) ::: Erin is quiet.\n∀x ((Green(x) ∧ Quiet(x)) → Young(x)) ::: All green, quiet people are young.\n∀x (Cold(x) → Quiet(x)) ::: If someone is cold then they are quiet.\nConclusion:\nQuiet(Bob) ::: Bob is quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1715",
    "context": "Bob is green. Gary is red. Gary is rough. If someone is cold and green then they are blue. Green people are kind. If someone is rough then they are red. Cold people are rough. If someone is cold then they are blue. If Bob is kind then Bob is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not green.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nPremises:\nGreen(Bob) ::: Bob is green.\nRed(Gary) ::: Gary is red.\nRough(Gary) ::: Gary is rough.\n∀x ((Cold(x) ∧ Green(x)) → Blue(x)) ::: If someone is cold and green then they are blue.\n∀x (Green(x) → Kind(x)) ::: Green people are kind.\n∀x (Rough(x) → Red(x)) ::: If someone is rough then they are red.\n∀x (Cold(x) → Rough(x)) ::: Cold people are rough.\n∀x (Cold(x) → Blue(x)) ::: If someone is cold then they are blue.\n∀x (Kind(x) → Young(x)) ::: If someone is kind then they are young.\nConclusion:\n¬Green(Bob) ::: Bob is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-2157",
    "context": "The dog chases the squirrel. The dog eats the squirrel. The dog sees the squirrel. The lion is nice. The lion is round. The lion sees the dog. The lion sees the squirrel. The squirrel chases the lion. The squirrel eats the dog. The squirrel is big. The squirrel is nice. The squirrel does not see the lion. If the lion eats the squirrel and the squirrel does not eat the lion then the lion eats the dog. If the squirrel sees the lion and the squirrel is not big then the lion is kind. If someone is big then they eat the squirrel. If the lion is kind then the lion eats the squirrel. If someone eats the squirrel then the squirrel does not see the dog. If someone eats the squirrel then they are round. If the lion chases the squirrel then the lion is big. If someone chases the squirrel and they do not eat the squirrel then they do not eat the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not eat the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nSees(x, y) ::: x sees y.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nPremises:\nChases(Dog, Squirrel) ::: The dog chases the squirrel.\nEats(Dog, Squirrel) ::: The dog eats the squirrel.\nSees(Dog, Squirrel) ::: The dog sees the squirrel.\nNice(Lion) ::: The lion is nice.\nRound(Lion) ::: The lion is round.\nSees(Lion, Dog) ::: The lion sees the dog.\nSees(Lion, Squirrel) ::: The lion sees the squirrel.\nChases(Squirrel, Lion) ::: The squirrel chases the lion.\nEats(Squirrel, Dog) ::: The squirrel eats the dog.\nBig(Squirrel) ::: The squirrel is big.\nNice(Squirrel) ::: The squirrel is nice.\n¬Sees(Squirrel, Lion) ::: The squirrel does not see the lion.\n∀x ((Eats(Lion, Squirrel) ∧ ¬Eats(Squirrel, Lion)) → Eats(Lion, Dog)) ::: If the lion eats the squirrel and the squirrel does not eat the lion then the lion eats the dog.\n∀x ((Sees(Squirrel, Lion) ∧ ¬Big(Squirrel)) → Kind(Lion)) ::: If the squirrel sees the lion and the squirrel is not big then the lion is kind.\n∀x (Big(x) → Eats(x, Squirrel)) ::: If someone is big then they eat the squirrel.\n∀x (Kind(x) → Eats(x, Squirrel)) ::: If the lion is kind then the lion eats the squirrel.\n∀x (Eats(x, Squirrel) → ¬Sees(Squirrel, Dog)) ::: If someone eats the squirrel then the squirrel does not see the dog.\n∀x (Eats(x, Squirrel) → Round(x)) ::: If someone eats the squirrel then they are round.\n∀x ((Chases(Lion, Squirrel)) → Big(Lion)) ::: If the lion chases the squirrel then the lion is big.\n∀x ((Chases(x, Squirrel) ∧ ¬Eats(x, Squirrel)) → ¬Eats(x, Dog)) ::: If someone chases the squirrel and they do not eat the squirrel then they do not eat the dog.\nConclusion:\n¬Eats(Lion, Squirrel) ::: The lion does not eat the squirrel."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2251",
    "context": "Dave is cold. Dave is kind. Fiona is big. Fiona is kind. Fiona is smart. Gary is cold. Gary is young. Kind people are young. Nice people are young. Big, kind people are young. If someone is young and big then they are furry. Nice, kind people are furry. Smart, young people are nice. Big, nice people are cold. If someone is big and furry then they are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nPremises:\nCold(Dave) ::: Dave is cold.\nKind(Dave) ::: Dave is kind.\nBig(Fiona) ::: Fiona is big.\nKind(Fiona) ::: Fiona is kind.\nSmart(Fiona) ::: Fiona is smart.\nCold(Gary) ::: Gary is cold.\nYoung(Gary) ::: Gary is young.\n∀x (Kind(x) → Young(x)) ::: Kind people are young.\n∀x (Nice(x) → Young(x)) ::: Nice people are young.\n∀x ((Big(x) ∧ Kind(x)) → Young(x)) ::: Big, kind people are young.\n∀x ((Young(x) ∧ Big(x)) → Furry(x)) ::: If someone is young and big then they are furry.\n∀x ((Nice(x) ∧ Kind(x)) → Furry(x)) ::: Nice, kind people are furry.\n∀x ((Smart(x) ∧ Young(x)) → Nice(x)) ::: Smart, young people are nice.\n∀x ((Big(x) ∧ Nice(x)) → Cold(x)) ::: Big, nice people are cold.\n∀x ((Big(x) ∧ Furry(x)) → Nice(x)) ::: If someone is big and furry then they are nice.\nConclusion:\nCold(Gary) ::: Gary is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-767",
    "context": "Dave is not big. Dave is nice. Dave is smart. Dave is white. Dave is not young. Erin is big. Erin is cold. Erin is not nice. Erin is rough. Erin is not smart. Erin is white. Erin is young. White things are rough. If something is rough and not young then it is cold. If Erin is cold and Erin is nice then Erin is big. If something is nice and not cold then it is not smart. Rough, big things are not nice. If something is smart and not rough then it is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nPremises:\n¬Big(Dave) ::: Dave is not big.\nNice(Dave) ::: Dave is nice.\nSmart(Dave) ::: Dave is smart.\nWhite(Dave) ::: Dave is white.\n¬Young(Dave) ::: Dave is not young.\nBig(Erin) ::: Erin is big.\nCold(Erin) ::: Erin is cold.\n¬Nice(Erin) ::: Erin is not nice.\nRough(Erin) ::: Erin is rough.\n¬Smart(Erin) ::: Erin is not smart.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\n∀x (White(x) → Rough(x)) ::: White things are rough.\n∀x ((Rough(x) ∧ ¬Young(x)) → Cold(x)) ::: If something is rough and not young then it is cold.\n∀x ((Cold(Erin) ∧ Nice(Erin)) → Big(Erin)) ::: If Erin is cold and Erin is nice then Erin is big.\n∀x ((Nice(x) ∧ ¬Cold(x)) → ¬Smart(x)) ::: If something is nice and not cold then it is not smart.\n∀x ((Rough(x) ∧ Big(x)) → ¬Nice(x)) ::: Rough, big things are not nice.\n∀x ((Smart(x) ∧ ¬Rough(x)) → Nice(x)) ::: If something is smart and not rough then it is nice.\nConclusion:\nNice(Erin) ::: Erin is nice."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1773",
    "context": "Anne is smart. Gary is rough. Gary is smart. All round things are green. If something is smart and not nice then it is rough. Round, nice things are rough. Kind, red things are rough. All rough things are round. If Gary is red and Gary is green then Gary is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nPremises:\nSmart(Anne) ::: Anne is smart.\nRough(Gary) ::: Gary is rough.\nSmart(Gary) ::: Gary is smart.\n∀x ((Round(x) → Green(x))) ::: All round things are green.\n∀x ((Smart(x) ∧ ¬Nice(x)) → Rough(x)) ::: If something is smart and not nice then it is rough.\n∀x ((Round(x) ∧ Nice(x)) → Rough(x)) ::: Round, nice things are rough.\n∀x ((Kind(x) ∧ Red(x)) → Rough(x)) ::: Kind, red things are rough.\n∀x (Rough(x) → Round(x)) ::: All rough things are round.\n∀x ((Red(Gary) ∧ Green(Gary)) → Kind(Gary)) ::: If Gary is red and Gary is green then Gary is kind.\nConclusion:\n¬Rough(Anne) ::: Anne is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1875",
    "context": "Erin is furry. Harry is cold. Harry is round. Cold, round people are nice. White, furry people are cold. Nice people are cold. If someone is round then they are furry. All cold, round people are white. All furry, cold people are green. Green people are furry. All furry, white people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nPremises:\nFurry(Erin) ::: Erin is furry.\nCold(Harry) ::: Harry is cold.\nRound(Harry) ::: Harry is round.\n∀x ((Cold(x) ∧ Round(x)) → Nice(x)) ::: Cold, round people are nice.\n∀x ((White(x) ∧ Furry(x)) → Cold(x)) ::: White, furry people are cold.\n∀x (Nice(x) → Cold(x)) ::: Nice people are cold.\n∀x (Round(x) → Furry(x)) ::: If someone is round then they are furry.\n∀x ((Cold(x) ∧ Round(x)) → White(x)) ::: All cold, round people are white.\n∀x ((Furry(x) ∧ Cold(x)) → Green(x)) ::: All furry, cold people are green.\n∀x (Green(x) → Furry(x)) ::: Green people are furry.\n∀x ((Furry(x) ∧ White(x)) → Cold(x)) ::: All furry, white people are cold.\nConclusion:\nFurry(Erin) ::: Erin is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-380",
    "context": "The bald eagle is blue. The cat needs the mouse. The cat needs the tiger. The cat visits the mouse. The mouse is blue. The tiger is young. The tiger visits the bald eagle. If someone needs the mouse then the mouse likes the tiger. If someone needs the cat then the cat likes the bald eagle. If someone is kind and they like the mouse then they are blue. If someone is young and they need the cat then the cat needs the tiger. If someone needs the mouse then they are kind. If someone needs the cat then they need the mouse. If someone is kind and they like the cat then the cat likes the mouse. If someone needs the mouse then they like the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nKind(x) ::: x is kind.\nBaldEagle(x) ::: x is a bald eagle.\nCat(x) ::: x is a cat.\nMouse(x) ::: x is a mouse.\nTiger(x) ::: x is a tiger.\nPremises:\nBlue(BaldEagle) ::: The bald eagle is blue.\nNeeds(Cat, Mouse) ::: The cat needs the mouse.\nNeeds(Cat, Tiger) ::: The cat needs the tiger.\nVisits(Cat, Mouse) ::: The cat visits the mouse.\nBlue(Mouse) ::: The mouse is blue.\nYoung(Tiger) ::: The tiger is young.\nVisits(Tiger, BaldEagle) ::: The tiger visits the bald eagle.\n∀x ((Needs(x, Mouse)) → Likes(Mouse, Tiger)) ::: If someone needs the mouse then the mouse likes the tiger.\n∀x ((Needs(x, Cat)) → Likes(Cat, BaldEagle)) ::: If someone needs the cat then the cat likes the bald eagle.\n∀x ((Kind(x) ∧ Likes(x, Mouse)) → Blue(x)) ::: If someone is kind and they like the mouse then they are blue.\n∀x ((Young(x) ∧ Needs(x, Cat)) → Needs(Cat, Tiger)) ::: If someone is young and they need the cat then the cat needs the tiger.\n∀x (Needs(x, Mouse) → Kind(x)) ::: If someone needs the mouse then they are kind.\n∀x (Needs(x, Cat) → Needs(Cat, Mouse)) ::: If someone needs the cat then they need the mouse.\n∀x ((Kind(x) ∧ Likes(x, Cat)) → Likes(Cat, Mouse)) ::: If someone is kind and they like the cat then the cat likes the mouse.\n∀x (Needs(x, Mouse) → Likes(x, Cat)) ::: If someone needs the mouse then they like the cat.\nConclusion:\n¬Blue(BaldEagle) ::: The bald eagle is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-838",
    "context": "Anne is big. Anne is smart. Anne is not young. Charlie is big. Charlie is not rough. Gary is big. Gary is blue. Gary is cold. Gary is furry. Gary is rough. Gary is smart. Gary is young. Harry is big. Harry is not furry. Harry is smart. Harry is young. If someone is cold and not young then they are not rough. All big people are cold. If Harry is big then Harry is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nPremises:\nBig(Anne) ::: Anne is big.\nSmart(Anne) ::: Anne is smart.\n¬Young(Anne) ::: Anne is not young.\nBig(Charlie) ::: Charlie is big.\n¬Rough(Charlie) ::: Charlie is not rough.\nBig(Gary) ::: Gary is big.\nBlue(Gary) ::: Gary is blue.\nCold(Gary) ::: Gary is cold.\nFurry(Gary) ::: Gary is furry.\nRough(Gary) ::: Gary is rough.\nSmart(Gary) ::: Gary is smart.\nYoung(Gary) ::: Gary is young.\nBig(Harry) ::: Harry is big.\n¬Furry(Harry) ::: Harry is not furry.\nSmart(Harry) ::: Harry is smart.\nYoung(Harry) ::: Harry is young.\n∀x ((Cold(x) ∧ ¬Young(x)) → ¬Rough(x)) ::: If someone is cold and not young then they are not rough.\n∀x (Big(x) → Cold(x)) ::: All big people are cold.\n∀x (Big(Harry) → Cold(Harry)) ::: If Harry is big then Harry is cold.\nConclusion:\n¬Blue(Anne) ::: Anne is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1370",
    "context": "Bob is furry. Bob is green. Bob is red. Bob is rough. Bob is round. Bob is smart. Bob is white. Gary is furry. Gary is green. Gary is red. Gary is smart. Gary is white. White things are rough. Furry, smart things are rough. If Gary is round and Gary is green then Gary is red. Round, green things are red. Green, smart things are furry. If something is rough and green then it is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nPremises:\nFurry(Bob) ::: Bob is furry.\nGreen(Bob) ::: Bob is green.\nRed(Bob) ::: Bob is red.\nRough(Bob) ::: Bob is rough.\nRound(Bob) ::: Bob is round.\nSmart(Bob) ::: Bob is smart.\nWhite(Bob) ::: Bob is white.\nFurry(Gary) ::: Gary is furry.\nGreen(Gary) ::: Gary is green.\nRed(Gary) ::: Gary is red.\nSmart(Gary) ::: Gary is smart.\nWhite(Gary) ::: Gary is white.\n∀x (White(x) → Rough(x)) ::: White things are rough.\n∀x ((Furry(x) ∧ Smart(x)) → Rough(x)) ::: Furry, smart things are rough.\n∀x ((Round(x) ∧ Green(x)) → Red(x)) ::: If Gary is round and Gary is green then Gary is red.\n∀x ((Round(x) ∧ Green(x)) → Red(x)) ::: Round, green things are red.\n∀x ((Green(x) ∧ Smart(x)) → Furry(x)) ::: Green, smart things are furry.\n∀x ((Rough(x) ∧ Green(x)) → Round(x)) ::: If something is rough and green then it is round.\nConclusion:\nFurry(Bob) ::: Bob is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-909",
    "context": "The cat chases the lion. The lion chases the cat. If something chases the lion and it chases the cat then it needs the cat. If something sees the lion then it needs the lion. If something chases the lion then it is red. If something sees the lion and the lion is nice then the lion needs the cat. If the cat chases the lion then the lion needs the cat. Red things are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not chase the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nCat(x) ::: x is a cat.\nLion(x) ::: x is a lion.\nPremises:\nChases(Cat, Lion) ::: The cat chases the lion.\nChases(Lion, Cat) ::: The lion chases the cat.\n∀x ((Chases(x, Lion) ∧ Chases(x, Cat)) → Needs(x, Cat)) ::: If something chases the lion and it chases the cat then it needs the cat.\n∀x (Sees(x, Lion) → Needs(x, Lion)) ::: If something sees the lion then it needs the lion.\n∀x (Chases(x, Lion) → Red(x)) ::: If something chases the lion then it is red.\n∀x ((Sees(x, Lion) ∧ Nice(Lion)) → Needs(Lion, Cat)) ::: If something sees the lion and the lion is nice then the lion needs the cat.\n∀x (Chases(Cat, Lion) → Needs(Lion, Cat)) ::: If the cat chases the lion then the lion needs the cat.\n∀x (Red(x) → Round(x)) ::: Red things are round.\nConclusion:\n¬Chases(Cat, Lion) ::: The cat does not chase the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-809",
    "context": "Bob is red. Charlie is nice. Erin is smart. Gary is red. If someone is smart and not round then they are nice. Cold people are white. All smart people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nWhite(x) ::: x is white.\nPremises:\nRed(Bob) ::: Bob is red.\nNice(Charlie) ::: Charlie is nice.\nSmart(Erin) ::: Erin is smart.\nRed(Gary) ::: Gary is red.\n∀x ((Smart(x) ∧ ¬Round(x)) → Nice(x)) ::: If someone is smart and not round then they are nice.\n∀x (Cold(x) → White(x)) ::: Cold people are white.\n∀x (Smart(x) → Cold(x)) ::: All smart people are cold.\nConclusion:\n¬Cold(Charlie) ::: Charlie is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1748",
    "context": "The bald eagle eats the dog. The bald eagle eats the squirrel. The bald eagle is big. The bald eagle sees the dog. The bald eagle visits the squirrel. The cow eats the bald eagle. The cow eats the squirrel. The cow visits the bald eagle. The cow visits the squirrel. The dog eats the cow. The dog is red. The dog visits the cow. The squirrel eats the dog. The squirrel is blue. The squirrel is rough. The squirrel sees the bald eagle. If someone eats the dog then they see the cow. If someone is red then they see the dog. If someone sees the cow then the cow is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow eats the bald eagle.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nBig(x) ::: x is big.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nPremises:\nEats(bald eagle, dog) ::: The bald eagle eats the dog.\nEats(bald eagle, squirrel) ::: The bald eagle eats the squirrel.\nBig(bald eagle) ::: The bald eagle is big.\nSees(bald eagle, dog) ::: The bald eagle sees the dog.\nVisits(bald eagle, squirrel) ::: The bald eagle visits the squirrel.\nEats(cow, bald eagle) ::: The cow eats the bald eagle.\nEats(cow, squirrel) ::: The cow eats the squirrel.\nVisits(cow, bald eagle) ::: The cow visits the bald eagle.\nVisits(cow, squirrel) ::: The cow visits the squirrel.\nEats(dog, cow) ::: The dog eats the cow.\nRed(dog) ::: The dog is red.\nVisits(dog, cow) ::: The dog visits the cow.\nEats(squirrel, dog) ::: The squirrel eats the dog.\nBlue(squirrel) ::: The squirrel is blue.\nRough(squirrel) ::: The squirrel is rough.\nSees(squirrel, bald eagle) ::: The squirrel sees the bald eagle.\n∀x (Eats(x, dog) → Sees(x, cow)) ::: If someone eats the dog then they see the cow.\n∀x (Red(x) → Sees(x, dog)) ::: If someone is red then they see the dog.\n∀x (Sees(x, cow) → Big(cow)) ::: If someone sees the cow then the cow is big.\nConclusion:\nEats(cow, bald eagle) ::: The cow eats the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-2215",
    "context": "Anne is furry. Bob is green. Dave is rough. Erin is furry. If someone is round and green then they are blue. Green people are blue. Blue people are quiet. If Dave is green and Dave is not rough then Dave is not furry. Furry people are not round. If Dave is blue then Dave is not white. All rough, quiet people are green. If someone is rough and not green then they are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nPremises:\nFurry(Anne) ::: Anne is furry.\nGreen(Bob) ::: Bob is green.\nRough(Dave) ::: Dave is rough.\nFurry(Erin) ::: Erin is furry.\n∀x ((Round(x) ∧ Green(x)) → Blue(x)) ::: If someone is round and green then they are blue.\n∀x (Green(x) → Blue(x)) ::: Green people are blue.\n∀x (Blue(x) → Quiet(x)) ::: Blue people are quiet.\n∀x ((Green(Dave) ∧ ¬Rough(Dave)) → ¬Furry(Dave)) ::: If Dave is green and Dave is not rough then Dave is not furry.\n∀x (Furry(x) → ¬Round(x)) ::: Furry people are not round.\n∀x (Blue(Dave) → ¬White(Dave)) ::: If Dave is blue then Dave is not white.\n∀x ((Rough(x) ∧ Quiet(x)) → Green(x)) ::: All rough, quiet people are green.\n∀x ((Rough(x) ∧ ¬Green(x)) → White(x)) ::: If someone is rough and not green then they are white.\nConclusion:\n¬Furry(Anne) ::: Anne is not furry."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-501",
    "context": "The mouse sees the tiger. The tiger chases the mouse. If someone is nice then they do not see the mouse. If someone sees the tiger then the tiger is blue. If someone is blue then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nChases(x, y) ::: x chases y.\nNice(x) ::: x is nice.\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nMouse(x) ::: x is a mouse.\nTiger(x) ::: x is a tiger.\nPremises:\nSees(Mouse, Tiger) ::: The mouse sees the tiger.\nChases(Tiger, Mouse) ::: The tiger chases the mouse.\n∀x (Nice(x) → ¬Sees(x, Mouse)) ::: If someone is nice then they do not see the mouse.\n∀x (Sees(x, Tiger) → Blue(Tiger)) ::: If someone sees the tiger then the tiger is blue.\n∀x (Blue(x) → Round(x)) ::: If someone is blue then they are round.\nConclusion:\n¬Round(Mouse) ::: The mouse is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1345",
    "context": "The dog is green. The dog is nice. The dog likes the mouse. The dog needs the mouse. The dog sees the mouse. The dog sees the rabbit. The mouse is kind. The mouse is round. The mouse likes the dog. The mouse likes the rabbit. The mouse needs the rabbit. The mouse sees the dog. The rabbit is green. The rabbit likes the dog. The rabbit needs the dog. The rabbit sees the dog. If something needs the dog then it is nice. If something is green and nice then it needs the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nPremises:\nGreen(dog) ::: The dog is green.\nNice(dog) ::: The dog is nice.\nLikes(dog, mouse) ::: The dog likes the mouse.\nNeeds(dog, mouse) ::: The dog needs the mouse.\nSees(dog, mouse) ::: The dog sees the mouse.\nSees(dog, rabbit) ::: The dog sees the rabbit.\nKind(mouse) ::: The mouse is kind.\nRound(mouse) ::: The mouse is round.\nLikes(mouse, dog) ::: The mouse likes the dog.\nLikes(mouse, rabbit) ::: The mouse likes the rabbit.\nNeeds(mouse, rabbit) ::: The mouse needs the rabbit.\nSees(mouse, dog) ::: The mouse sees the dog.\nGreen(rabbit) ::: The rabbit is green.\nLikes(rabbit, dog) ::: The rabbit likes the dog.\nNeeds(rabbit, dog) ::: The rabbit needs the dog.\nSees(rabbit, dog) ::: The rabbit sees the dog.\n∀x (Needs(x, dog) → Nice(x)) ::: If something needs the dog then it is nice.\n∀x ((Green(x) ∧ Nice(x)) → Needs(x, rabbit)) ::: If something is green and nice then it needs the rabbit.\nConclusion:\nKind(mouse) ::: The mouse is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1884",
    "context": "Bob is blue. Gary is blue. Gary is smart. If someone is smart then they are not round. If someone is furry and not quiet then they are not cold. Smart, round people are cold. All smart people are big. If someone is blue then they are smart. If Gary is blue and Gary is furry then Gary is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nCold(x) ::: x is cold.\nBig(x) ::: x is big.\nPremises:\nBlue(Bob) ::: Bob is blue.\nBlue(Gary) ::: Gary is blue.\nSmart(Gary) ::: Gary is smart.\n∀x (Smart(x) → ¬Round(x)) ::: If someone is smart then they are not round.\n∀x ((Furry(x) ∧ ¬Quiet(x)) → ¬Cold(x)) ::: If someone is furry and not quiet then they are not cold.\n∀x ((Smart(x) ∧ Round(x)) → Cold(x)) ::: Smart, round people are cold.\n∀x (Smart(x) → Big(x)) ::: All smart people are big.\n∀x (Blue(x) → Smart(x)) ::: If someone is blue then they are smart.\n∀x ((Blue(Gary) ∧ Furry(Gary)) → Big(Gary)) ::: If Gary is blue and Gary is furry then Gary is big.\nConclusion:\n¬Blue(Bob) ::: Bob is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1254",
    "context": "The bear eats the rabbit. The bear is blue. The bear is nice. The bear is red. The bear is round. The bear is young. The bear needs the rabbit. The bear visits the rabbit. The rabbit eats the bear. The rabbit is blue. The rabbit is not red. The rabbit is round. The rabbit is not young. The rabbit needs the bear. The rabbit visits the bear. If something eats the rabbit and it visits the bear then the rabbit is nice. If something eats the rabbit and it needs the rabbit then it visits the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not need the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nPremises:\nEats(bear, rabbit) ::: The bear eats the rabbit.\nBlue(bear) ::: The bear is blue.\nNice(bear) ::: The bear is nice.\nRed(bear) ::: The bear is red.\nRound(bear) ::: The bear is round.\nYoung(bear) ::: The bear is young.\nNeeds(bear, rabbit) ::: The bear needs the rabbit.\nVisits(bear, rabbit) ::: The bear visits the rabbit.\nEats(rabbit, bear) ::: The rabbit eats the bear.\nBlue(rabbit) ::: The rabbit is blue.\n¬Red(rabbit) ::: The rabbit is not red.\nRound(rabbit) ::: The rabbit is round.\n¬Young(rabbit) ::: The rabbit is not young.\nNeeds(rabbit, bear) ::: The rabbit needs the bear.\nVisits(rabbit, bear) ::: The rabbit visits the bear.\n∀x ∀y ((Eats(x, rabbit) ∧ Visits(y, bear)) → Nice(rabbit)) ::: If something eats the rabbit and it visits the bear then the rabbit is nice.\n∀x ∀y ((Eats(x, rabbit) ∧ Needs(x, rabbit)) → Visits(y, bear)) ::: If something eats the rabbit and it needs the rabbit then it visits the bear.\nConclusion:\n¬Needs(bear, bear) ::: The bear does not need the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-166",
    "context": "The cow sees the mouse. The lion sees the mouse. The mouse needs the tiger. The tiger visits the mouse. If someone visits the tiger and the tiger needs the cow then the tiger visits the lion. If someone needs the mouse and the mouse is round then the mouse is young. If someone sees the mouse and they see the cow then they need the mouse. If someone visits the mouse and they are big then they visit the lion. If someone sees the cow and they are nice then the cow is young. If someone sees the mouse then they see the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow sees the mouse.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nPremises:\nSees(Cow, Mouse) ::: The cow sees the mouse.\nSees(Lion, Mouse) ::: The lion sees the mouse.\nNeeds(Mouse, Tiger) ::: The mouse needs the tiger.\nVisits(Tiger, Mouse) ::: The tiger visits the mouse.\n∀x∀y ((Visits(x, Tiger) ∧ Needs(Tiger, Cow)) → Visits(Tiger, Lion)) ::: If someone visits the tiger and the tiger needs the cow then the tiger visits the lion.\n∀x ((Needs(x, Mouse) ∧ Round(Mouse)) → Young(Mouse)) ::: If someone needs the mouse and the mouse is round then the mouse is young.\n∀x∀y ((Sees(x, Mouse) ∧ Sees(x, Cow)) → Needs(x, Mouse)) ::: If someone sees the mouse and they see the cow then they need the mouse.\n∀x ((Visits(x, Mouse) ∧ Big(x)) → Visits(x, Lion)) ::: If someone visits the mouse and they are big then they visit the lion.\n∀x ((Sees(x, Cow) ∧ Nice(x)) → Young(Cow)) ::: If someone sees the cow and they are nice then the cow is young.\n∀x (Sees(x, Mouse) → Sees(x, Cow)) ::: If someone sees the mouse then they see the cow.\nConclusion:\nSees(Cow, Mouse) ::: The cow sees the mouse."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1108",
    "context": "The cat visits the squirrel. The lion needs the cat. The squirrel visits the lion. The tiger is not kind. If someone visits the squirrel then the squirrel needs the lion. If the cat is blue and the cat is young then the cat is rough. If someone needs the lion then the lion needs the squirrel. If the tiger chases the lion and the tiger chases the cat then the cat visits the tiger. If someone is blue and they do not chase the lion then the lion visits the cat. If someone needs the lion and they do not visit the tiger then they need the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not need the cat.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nVisits(x, y) ::: x visits y.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nChases(x, y) ::: x chases y.\nPremises:\nVisits(Cat, Squirrel) ::: The cat visits the squirrel.\nNeeds(Lion, Cat) ::: The lion needs the cat.\nVisits(Squirrel, Lion) ::: The squirrel visits the lion.\n¬Kind(Tiger) ::: The tiger is not kind.\n∀x (Visits(x, Squirrel) → Needs(Squirrel, Lion)) ::: If someone visits the squirrel then the squirrel needs the lion.\n∀x ((Blue(x) ∧ Young(x)) → Rough(x)) ::: If the cat is blue and young then the cat is rough.\n∀x (Needs(x, Lion) → Needs(Lion, Squirrel)) ::: If someone needs the lion then the lion needs the squirrel.\n∀x ((Chases(Tiger, Lion) ∧ Chases(Tiger, Cat)) → Visits(Cat, Tiger)) ::: If the tiger chases the lion and the tiger chases the cat then the cat visits the tiger.\n∀x ((Blue(x) ∧ ¬Chases(x, Lion)) → Visits(Lion, Cat)) ::: If someone is blue and they do not chase the lion then the lion visits the cat.\n∀x (Needs(x, Lion) → ¬Visits(x, Tiger)) ::: If someone needs the lion and they do not visit the tiger then they need the cat.\nConclusion:\n¬Needs(Lion, Cat) ::: The lion does not need the cat."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2365",
    "context": "Fiona is blue. Fiona is cold. Fiona is quiet. Gary is blue. Gary is cold. Gary is green. Gary is young. If Gary is green and Gary is nice then Gary is big. All blue things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nBig(x) ::: x is big.\nPremises:\nBlue(Fiona) ::: Fiona is blue.\nCold(Fiona) ::: Fiona is cold.\nQuiet(Fiona) ::: Fiona is quiet.\nBlue(Gary) ::: Gary is blue.\nCold(Gary) ::: Gary is cold.\nGreen(Gary) ::: Gary is green.\nYoung(Gary) ::: Gary is young.\n∀x ((Green(x) ∧ Nice(x)) → Big(x)) ::: If someone is green and nice then they are big.\n∀x (Blue(x) → Nice(x)) ::: All blue things are nice.\nConclusion:\n¬Green(Fiona) ::: Fiona is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-2015",
    "context": "The bald eagle chases the lion. The bald eagle does not chase the mouse. The bald eagle eats the lion. The bald eagle does not eat the mouse. The bald eagle is green. The bald eagle visits the mouse. The lion chases the tiger. The lion is big. The lion visits the tiger. The mouse does not chase the bald eagle. The mouse is nice. The mouse does not visit the lion. The tiger chases the mouse. The tiger does not eat the lion. The tiger is green. If something is big and it chases the tiger then it visits the mouse. If something chases the mouse and it eats the bald eagle then it visits the bald eagle. If something eats the lion and the lion does not chase the tiger then it visits the tiger. If something chases the bald eagle and it chases the tiger then it chases the lion. If something is big then it chases the lion. If something chases the tiger then the tiger is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger chases the mouse.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nBaldEagle(x) ::: x is a bald eagle.\nLion(x) ::: x is a lion.\nMouse(x) ::: x is a mouse.\nTiger(x) ::: x is a tiger.\nPremises:\nChases(BaldEagle, Lion) ::: The bald eagle chases the lion.\n¬Chases(BaldEagle, Mouse) ::: The bald eagle does not chase the mouse.\nEats(BaldEagle, Lion) ::: The bald eagle eats the lion.\n¬Eats(BaldEagle, Mouse) ::: The bald eagle does not eat the mouse.\nGreen(BaldEagle) ::: The bald eagle is green.\nVisits(BaldEagle, Mouse) ::: The bald eagle visits the mouse.\nChases(Lion, Tiger) ::: The lion chases the tiger.\nBig(Lion) ::: The lion is big.\nVisits(Lion, Tiger) ::: The lion visits the tiger.\n¬Chases(Mouse, BaldEagle) ::: The mouse does not chase the bald eagle.\nNice(Mouse) ::: The mouse is nice.\n¬Visits(Mouse, Lion) ::: The mouse does not visit the lion.\nChases(Tiger, Mouse) ::: The tiger chases the mouse.\n¬Eats(Tiger, Lion) ::: The tiger does not eat the lion.\nGreen(Tiger) ::: The tiger is green.\n∀x ((Big(x) ∧ Chases(x, Tiger)) → Visits(x, Mouse)) ::: If something is big and it chases the tiger then it visits the mouse.\n∀x ((Chases(x, Mouse) ∧ Eats(x, BaldEagle)) → Visits(x, BaldEagle)) ::: If something chases the mouse and it eats the bald eagle then it visits the bald eagle.\n∀x ((Eats(x, Lion) ∧ ¬Chases(Lion, Tiger)) → Visits(x, Tiger)) ::: If something eats the lion and the lion does not chase the tiger then it visits the tiger.\n∀x ((Chases(x, BaldEagle) ∧ Chases(x, Tiger)) → Chases(x, Lion)) ::: If something chases the bald eagle and it chases the tiger then it chases the lion.\n∀x (Big(x) → Chases(x, Lion)) ::: If something is big then it chases the lion.\n∀x (Chases(x, Tiger) → Big(Tiger)) ::: If something chases the tiger then the tiger is big.\nConclusion:\nChases(Tiger, Mouse) ::: The tiger chases the mouse."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1447",
    "context": "The bear is green. The bear does not need the mouse. The bear does not visit the lion. The lion is cold. The mouse is young. The mouse likes the bear. The mouse needs the bear. If someone likes the bear then they do not like the lion. If someone visits the lion and they need the lion then the lion likes the bear. If someone visits the bear and the bear needs the mouse then the bear is green. If someone needs the lion then the lion is big. If the lion is green and the lion likes the bear then the bear visits the mouse. If someone needs the bear and they do not like the lion then the bear is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not like the bear.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nNeed(x, y) ::: x needs y.\nVisit(x, y) ::: x visits y.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nBig(x) ::: x is big.\nPremises:\nGreen(bear) ::: The bear is green.\n¬Need(bear, mouse) ::: The bear does not need the mouse.\n¬Visit(bear, lion) ::: The bear does not visit the lion.\nCold(lion) ::: The lion is cold.\nYoung(mouse) ::: The mouse is young.\nLikes(mouse, bear) ::: The mouse likes the bear.\nNeed(mouse, bear) ::: The mouse needs the bear.\n∀x ((Likes(x, bear)) → (¬Likes(x, lion))) ::: If someone likes the bear then they do not like the lion.\n∀x ((Visit(x, lion) ∧ Need(x, lion)) → Likes(lion, bear)) ::: If someone visits the lion and they need the lion then the lion likes the bear.\n∀x ((Visit(x, bear) ∧ Need(bear, mouse)) → Green(bear)) ::: If someone visits the bear and the bear needs the mouse then the bear is green.\n∀x (Need(x, lion) → Big(lion)) ::: If someone needs the lion then the lion is big.\n∀x ((Green(lion) ∧ Likes(lion, bear)) → Visit(bear, mouse)) ::: If the lion is green and the lion likes the bear then the bear visits the mouse.\n∀x ((Need(bear, x) ∧ ¬Likes(bear, lion)) → Big(bear)) ::: If someone needs the bear and they do not like the lion then the bear is big.\nConclusion:\n¬Likes(mouse, bear) ::: The mouse does not like the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1639",
    "context": "The bald eagle is blue. The bald eagle is cold. The bald eagle is kind. The bald eagle is rough. The bald eagle likes the tiger. The squirrel chases the tiger. The squirrel likes the bald eagle. The squirrel likes the tiger. The squirrel visits the bald eagle. The tiger chases the bald eagle. The tiger is big. The tiger is cold. The tiger likes the squirrel. The tiger visits the bald eagle. The tiger visits the squirrel. If something is kind then it visits the bald eagle. If something chases the squirrel and it visits the tiger then it likes the bald eagle. If something visits the bald eagle then it visits the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not like the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nChases(x, y) ::: x chases y.\nVisits(x, y) ::: x visits y.\nBig(x) ::: x is big.\nBaldEagle(x) ::: x is a bald eagle.\nSquirrel(x) ::: x is a squirrel.\nTiger(x) ::: x is a tiger.\nPremises:\nBlue(BaldEagle) ::: The bald eagle is blue.\nCold(BaldEagle) ::: The bald eagle is cold.\nKind(BaldEagle) ::: The bald eagle is kind.\nRough(BaldEagle) ::: The bald eagle is rough.\nLikes(BaldEagle, Tiger) ::: The bald eagle likes the tiger.\nChases(Squirrel, Tiger) ::: The squirrel chases the tiger.\nLikes(Squirrel, BaldEagle) ::: The squirrel likes the bald eagle.\nLikes(Squirrel, Tiger) ::: The squirrel likes the tiger.\nVisits(Squirrel, BaldEagle) ::: The squirrel visits the bald eagle.\nChases(Tiger, BaldEagle) ::: The tiger chases the bald eagle.\nBig(Tiger) ::: The tiger is big.\nCold(Tiger) ::: The tiger is cold.\nLikes(Tiger, Squirrel) ::: The tiger likes the squirrel.\nVisits(Tiger, BaldEagle) ::: The tiger visits the bald eagle.\nVisits(Tiger, Squirrel) ::: The tiger visits the squirrel.\n∀x (Kind(x) → Visits(x, BaldEagle)) ::: If something is kind then it visits the bald eagle.\n∀x ((Chases(x, Squirrel) ∧ Visits(x, Tiger)) → Likes(x, BaldEagle)) ::: If something chases the squirrel and it visits the tiger then it likes the bald eagle.\n∀x (Visits(x, BaldEagle) → Visits(x, Squirrel)) ::: If something visits the bald eagle then it visits the squirrel.\nConclusion:\n¬Likes(Tiger, BaldEagle) ::: The tiger does not like the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1001",
    "context": "The bald eagle is cold. The bald eagle visits the mouse. The cat eats the bald eagle. The cat eats the mouse. The mouse eats the cat. The mouse eats the rabbit. The mouse is round. The mouse sees the bald eagle. The rabbit eats the bald eagle. The rabbit is blue. The rabbit is cold. The rabbit is round. The rabbit sees the cat. The rabbit sees the mouse. The rabbit visits the bald eagle. If someone sees the cat and they eat the cat then the cat visits the rabbit. If someone visits the mouse and they visit the rabbit then they see the bald eagle. If someone sees the mouse then the mouse eats the bald eagle. If someone sees the bald eagle and they eat the bald eagle then the bald eagle is blue. If someone eats the rabbit and the rabbit sees the bald eagle then the bald eagle sees the cat. If the rabbit eats the mouse and the rabbit sees the mouse then the mouse eats the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse eats the cat.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nVisits(x, y) ::: x visits y.\nEats(x, y) ::: x eats y.\nRound(x) ::: x is round.\nSees(x, y) ::: x sees y.\nBlue(x) ::: x is blue.\nPremises:\nCold(BaldEagle) ::: The bald eagle is cold.\nVisits(BaldEagle, Mouse) ::: The bald eagle visits the mouse.\nEats(Cat, BaldEagle) ::: The cat eats the bald eagle.\nEats(Cat, Mouse) ::: The cat eats the mouse.\nEats(Mouse, Cat) ::: The mouse eats the cat.\nEats(Mouse, Rabbit) ::: The mouse eats the rabbit.\nRound(Mouse) ::: The mouse is round.\nSees(Mouse, BaldEagle) ::: The mouse sees the bald eagle.\nEats(Rabbit, BaldEagle) ::: The rabbit eats the bald eagle.\nBlue(Rabbit) ::: The rabbit is blue.\nCold(Rabbit) ::: The rabbit is cold.\nRound(Rabbit) ::: The rabbit is round.\nSees(Rabbit, Cat) ::: The rabbit sees the cat.\nSees(Rabbit, Mouse) ::: The rabbit sees the mouse.\nVisits(Rabbit, BaldEagle) ::: The rabbit visits the bald eagle.\n∀x ((Sees(x, Cat) ∧ Eats(x, Cat)) → Visits(Cat, Rabbit)) ::: If someone sees the cat and they eat the cat then the cat visits the rabbit.\n∀x ((Visits(x, Mouse) ∧ Visits(x, Rabbit)) → Sees(x, BaldEagle)) ::: If someone visits the mouse and they visit the rabbit then they see the bald eagle.\n∀x (Sees(x, Mouse) → Eats(Mouse, BaldEagle)) ::: If someone sees the mouse then the mouse eats the bald eagle.\n∀x ((Sees(x, BaldEagle) ∧ Eats(x, BaldEagle)) → Blue(BaldEagle)) ::: If someone sees the bald eagle and they eat the bald eagle then the bald eagle is blue.\n∀x ((Eats(x, Rabbit) ∧ Sees(Rabbit, BaldEagle)) → Sees(BaldEagle, Cat)) ::: If someone eats the rabbit and the rabbit sees the bald eagle then the bald eagle sees the cat.\n∀x ((Eats(Rabbit, Mouse) ∧ Sees(Rabbit, Mouse)) → Eats(Mouse, Rabbit)) ::: If the rabbit eats the mouse and the rabbit sees the mouse then the mouse eats the rabbit.\nConclusion:\nEats(Mouse, Cat) ::: The mouse eats the cat."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-834",
    "context": "Bob is kind. Erin is white. Gary is green. All green, kind things are young. If Gary is green then Gary is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not green.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nPremises:\nKind(Bob) ::: Bob is kind.\nWhite(Erin) ::: Erin is white.\nGreen(Gary) ::: Gary is green.\n∀x ((Green(x) ∧ Kind(x)) → Young(x)) ::: All green, kind things are young.\n∀x (Green(Gary) → Kind(Gary)) ::: If Gary is green then Gary is kind.\nConclusion:\n¬Green(Gary) ::: Gary is not green."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-791",
    "context": "Anne is blue. Anne is quiet. Anne is round. Anne is not smart. Anne is young. Erin is furry. Erin is not quiet. Erin is smart. Fiona is blue. Fiona is quiet. Fiona is round. Fiona is smart. Smart people are blue. If Erin is not round then Erin is smart. If Erin is blue then Erin is green. All furry, smart people are green. If someone is blue and not smart then they are green. Green people are furry. All round, green people are furry. If someone is green and not furry then they are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nPremises:\nBlue(Anne) ::: Anne is blue.\nQuiet(Anne) ::: Anne is quiet.\nRound(Anne) ::: Anne is round.\n¬Smart(Anne) ::: Anne is not smart.\nYoung(Anne) ::: Anne is young.\nFurry(Erin) ::: Erin is furry.\n¬Quiet(Erin) ::: Erin is not quiet.\nSmart(Erin) ::: Erin is smart.\nBlue(Fiona) ::: Fiona is blue.\nQuiet(Fiona) ::: Fiona is quiet.\nRound(Fiona) ::: Fiona is round.\nSmart(Fiona) ::: Fiona is smart.\n∀x (Smart(x) → Blue(x)) ::: Smart people are blue.\n∀x (¬Round(x) → Smart(x)) ::: If Erin is not round then Erin is smart.\n∀x (Blue(x) → Green(x)) ::: If Erin is blue then Erin is green.\n∀x ((Furry(x) ∧ Smart(x)) → Green(x)) ::: All furry, smart people are green.\n∀x ((Blue(x) ∧ ¬Smart(x)) → Green(x)) ::: If someone is blue and not smart then they are green.\n∀x (Green(x) → Furry(x)) ::: Green people are furry.\n∀x ((Round(x) ∧ Green(x)) → Furry(x)) ::: All round, green people are furry.\n∀x ((Green(x) ∧ ¬Furry(x)) → Young(x)) ::: If someone is green and not furry then they are young.\nConclusion:\n¬Young(Erin) ::: Erin is not young."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-2158",
    "context": "The cow eats the lion. The cow eats the tiger. The cow is red. The cow needs the lion. The lion eats the tiger. The lion is rough. The lion is round. The tiger is kind. The tiger likes the cow. The tiger needs the cow. If someone eats the tiger and the tiger eats the cow then they are round. If someone eats the cow then they need the cow. If someone eats the lion then they eat the cow. If someone needs the lion then they need the cow. If someone is rough then they like the cow. If someone needs the lion and they eat the cow then the cow likes the lion. If someone needs the tiger and the tiger likes the cow then the cow eats the tiger. If someone is green and they need the cow then they eat the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow needs the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nIsRed(x) ::: x is red.\nNeeds(x, y) ::: x needs y.\nIsRough(x) ::: x is rough.\nIsRound(x) ::: x is round.\nIsKind(x) ::: x is kind.\nLikes(x, y) ::: x likes y.\nIsGreen(x) ::: x is green.\nPremises:\nEats(Cow, Lion) ::: The cow eats the lion.\nEats(Cow, Tiger) ::: The cow eats the tiger.\nIsRed(Cow) ::: The cow is red.\nNeeds(Cow, Lion) ::: The cow needs the lion.\nEats(Lion, Tiger) ::: The lion eats the tiger.\nIsRough(Lion) ::: The lion is rough.\nIsRound(Lion) ::: The lion is round.\nIsKind(Tiger) ::: The tiger is kind.\nLikes(Tiger, Cow) ::: The tiger likes the cow.\nNeeds(Tiger, Cow) ::: The tiger needs the cow.\n∀x ∀y ((Eats(x, Tiger) ∧ Eats(Tiger, y)) → IsRound(x)) ::: If someone eats the tiger and the tiger eats the cow then they are round.\n∀x ((Eats(x, Cow)) → Needs(x, Cow)) ::: If someone eats the cow then they need the cow.\n∀x ((Eats(x, Lion)) → Eats(x, Cow)) ::: If someone eats the lion then they eat the cow.\n∀x (Needs(x, Lion) → Needs(x, Cow)) ::: If someone needs the lion then they need the cow.\n∀x (IsRough(x) → Likes(x, Cow)) ::: If someone is rough then they like the cow.\n∀x ∀y ((Needs(x, Lion) ∧ Eats(x, Cow)) → Likes(Cow, Lion)) ::: If someone needs the lion and they eat the cow then the cow likes the lion.\n∀x ∀y ((Needs(x, Tiger) ∧ Likes(Tiger, Cow)) → Eats(Cow, Tiger)) ::: If someone needs the tiger and the tiger likes the cow then the cow eats the tiger.\n∀x ((IsGreen(x) ∧ Needs(x, Cow)) → Eats(x, Cow)) ::: If someone is green and they need the cow then they eat the cow.\nConclusion:\nNeeds(Cow, Lion) ::: The cow needs the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2307",
    "context": "Anne is furry. Anne is quiet. Bob is furry. Bob is green. Bob is kind. Bob is young. Dave is blue. Dave is furry. Dave is kind. Dave is quiet. Dave is white. Dave is young. Erin is blue. Erin is green. Erin is white. Erin is young. All furry things are blue. Furry, blue things are green. If Bob is young then Bob is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nPremises:\nFurry(Anne) ::: Anne is furry.\nQuiet(Anne) ::: Anne is quiet.\nFurry(Bob) ::: Bob is furry.\nGreen(Bob) ::: Bob is green.\nKind(Bob) ::: Bob is kind.\nYoung(Bob) ::: Bob is young.\nBlue(Dave) ::: Dave is blue.\nFurry(Dave) ::: Dave is furry.\nKind(Dave) ::: Dave is kind.\nQuiet(Dave) ::: Dave is quiet.\nWhite(Dave) ::: Dave is white.\nYoung(Dave) ::: Dave is young.\nBlue(Erin) ::: Erin is blue.\nGreen(Erin) ::: Erin is green.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\n∀x (Furry(x) → Blue(x)) ::: All furry things are blue.\n∀x ((Furry(x) ∧ Blue(x)) → Green(x)) ::: Furry, blue things are green.\n∀x ((Young(Bob)) → Kind(Bob)) ::: If Bob is young then Bob is kind.\nConclusion:\n¬Furry(Bob) ::: Bob is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-754",
    "context": "Anne is big. Anne is blue. Anne is not kind. Anne is nice. Anne is quiet. Anne is not red. Anne is rough. Fiona is kind. Fiona is quiet. Fiona is rough. All big things are rough. If Fiona is red then Fiona is quiet. If Anne is not big then Anne is nice. If something is quiet and kind then it is red. Kind, red things are not nice. Rough things are blue. If something is red and not quiet then it is blue. If Fiona is kind and Fiona is not blue then Fiona is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nFurry(x) ::: x is furry.\nPremises:\nBig(Anne) ::: Anne is big.\nBlue(Anne) ::: Anne is blue.\n¬Kind(Anne) ::: Anne is not kind.\nNice(Anne) ::: Anne is nice.\nQuiet(Anne) ::: Anne is quiet.\n¬Red(Anne) ::: Anne is not red.\nRough(Anne) ::: Anne is rough.\nKind(Fiona) ::: Fiona is kind.\nQuiet(Fiona) ::: Fiona is quiet.\nRough(Fiona) ::: Fiona is rough.\n∀x (Big(x) → Rough(x)) ::: All big things are rough.\n∀x (Red(Fiona) → Quiet(Fiona)) ::: If Fiona is red then Fiona is quiet.\n∀x (¬Big(x) → Nice(x)) ::: If someone is not big then they are nice.\n∀x ((Quiet(x) ∧ Kind(x)) → Red(x)) ::: If something is quiet and kind then it is red.\n∀x ((Kind(x) ∧ Red(x)) → ¬Nice(x)) ::: Kind, red things are not nice.\n∀x (Rough(x) → Blue(x)) ::: Rough things are blue.\n∀x ((Red(x) ∧ ¬Quiet(x)) → Blue(x)) ::: If something is red and not quiet then it is blue.\n∀x ((Kind(x) ∧ ¬Blue(x)) → Nice(x)) ::: If someone is kind and not blue then they are nice.\nConclusion:\nNice(Fiona) ::: Fiona is nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-386",
    "context": "Bob is big. Bob is cold. Bob is green. Bob is kind. Bob is nice. Bob is rough. Bob is smart. Gary is big. Gary is cold. Gary is green. Gary is kind. Harry is big. Harry is green. Harry is kind. Harry is nice. All rough, green things are kind. All cold, rough things are nice. If something is green then it is kind. Kind, big things are smart. If Gary is kind then Gary is nice. If something is big then it is green. If something is big then it is nice. If Harry is kind and Harry is smart then Harry is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is smart.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nPremises:\nBig(Bob) ::: Bob is big.\nCold(Bob) ::: Bob is cold.\nGreen(Bob) ::: Bob is green.\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\nRough(Bob) ::: Bob is rough.\nSmart(Bob) ::: Bob is smart.\nBig(Gary) ::: Gary is big.\nCold(Gary) ::: Gary is cold.\nGreen(Gary) ::: Gary is green.\nKind(Gary) ::: Gary is kind.\nBig(Harry) ::: Harry is big.\nGreen(Harry) ::: Harry is green.\nKind(Harry) ::: Harry is kind.\nNice(Harry) ::: Harry is nice.\n∀x ((Rough(x) ∧ Green(x)) → Kind(x)) ::: All rough, green things are kind.\n∀x ((Cold(x) ∧ Rough(x)) → Nice(x)) ::: All cold, rough things are nice.\n∀x (Green(x) → Kind(x)) ::: If something is green then it is kind.\n∀x ((Kind(x) ∧ Big(x)) → Smart(x)) ::: Kind, big things are smart.\n∀x ((Gary → Kind(x)) → Nice(x)) ::: If Gary is kind then Gary is nice.\n∀x (Big(x) → Green(x)) ::: If something is big then it is green.\n∀x (Big(x) → Nice(x)) ::: If something is big then it is nice.\n∀x ((Kind(x) ∧ Smart(x)) → Cold(x)) ::: If someone is kind and smart then they are cold.\nConclusion:\nSmart(Bob) ::: Bob is smart."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1815",
    "context": "Bob is cold. Bob is kind. Bob is not nice. Bob is quiet. Dave is round. Gary is cold. Gary is kind. Gary is quiet. Gary is round. Gary is smart. Harry is green. Harry is kind. Harry is nice. Harry is quiet. Harry is round. Cold, round things are kind. All quiet things are kind. Quiet, nice things are kind. All smart things are kind. If something is green and not nice then it is quiet. All round things are quiet. If something is smart and not nice then it is round. If something is kind and not green then it is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nGreen(x) ::: x is green.\nPremises:\nCold(Bob) ::: Bob is cold.\nKind(Bob) ::: Bob is kind.\n¬Nice(Bob) ::: Bob is not nice.\nQuiet(Bob) ::: Bob is quiet.\nRound(Dave) ::: Dave is round.\nCold(Gary) ::: Gary is cold.\nKind(Gary) ::: Gary is kind.\nQuiet(Gary) ::: Gary is quiet.\nRound(Gary) ::: Gary is round.\nSmart(Gary) ::: Gary is smart.\nGreen(Harry) ::: Harry is green.\nKind(Harry) ::: Harry is kind.\nNice(Harry) ::: Harry is nice.\nQuiet(Harry) ::: Harry is quiet.\nRound(Harry) ::: Harry is round.\n∀x ((Cold(x) ∧ Round(x)) → Kind(x)) ::: Cold, round things are kind.\n∀x (Quiet(x) → Kind(x)) ::: All quiet things are kind.\n∀x ((Quiet(x) ∧ Nice(x)) → Kind(x)) ::: Quiet, nice things are kind.\n∀x (Smart(x) → Kind(x)) ::: All smart things are kind.\n∀x ((Green(x) ∧ ¬Nice(x)) → Quiet(x)) ::: If something is green and not nice then it is quiet.\n∀x (Round(x) → Quiet(x)) ::: All round things are quiet.\n∀x ((Smart(x) ∧ ¬Nice(x)) → Round(x)) ::: If something is smart and not nice then it is round.\n∀x ((Kind(x) ∧ ¬Green(x)) → Round(x)) ::: If something is kind and not green then it is round.\nConclusion:\n¬Kind(Gary) ::: Gary is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-728",
    "context": "Anne is red. Anne is smart. Anne is white. Dave is big. Dave is cold. Dave is white. Fiona is cold. Gary is cold. Gary is kind. Gary is red. If someone is smart and not cold then they are red. Cold, white people are kind. All big, kind people are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nPremises:\nRed(Anne) ::: Anne is red.\nSmart(Anne) ::: Anne is smart.\nWhite(Anne) ::: Anne is white.\nBig(Dave) ::: Dave is big.\nCold(Dave) ::: Dave is cold.\nWhite(Dave) ::: Dave is white.\nCold(Fiona) ::: Fiona is cold.\nCold(Gary) ::: Gary is cold.\nKind(Gary) ::: Gary is kind.\nRed(Gary) ::: Gary is red.\n∀x ((Smart(x) ∧ ¬Cold(x)) → Red(x)) ::: If someone is smart and not cold then they are red.\n∀x ((Cold(x) ∧ White(x)) → Kind(x)) ::: Cold, white people are kind.\n∀x ((Big(x) ∧ Kind(x)) → Blue(x)) ::: All big, kind people are blue.\nConclusion:\n¬Blue(Anne) ::: Anne is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-2147",
    "context": "The bear chases the squirrel. The bear is green. The mouse is round. The mouse sees the rabbit. The mouse sees the squirrel. The rabbit is cold. The rabbit needs the mouse. The squirrel is round. The squirrel sees the bear. The squirrel sees the rabbit. If someone chases the squirrel and the squirrel needs the rabbit then they chase the mouse. If someone chases the mouse and they need the squirrel then they chase the squirrel. If someone chases the squirrel then the squirrel needs the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse sees the squirrel.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nSees(x, y) ::: x sees y.\nCold(x) ::: x is cold.\nNeeds(x, y) ::: x needs y.\nPremises:\nChases(bear, squirrel) ::: The bear chases the squirrel.\nGreen(bear) ::: The bear is green.\nRound(mouse) ::: The mouse is round.\nSees(mouse, rabbit) ::: The mouse sees the rabbit.\nSees(mouse, squirrel) ::: The mouse sees the squirrel.\nCold(rabbit) ::: The rabbit is cold.\nNeeds(rabbit, mouse) ::: The rabbit needs the mouse.\nRound(squirrel) ::: The squirrel is round.\nSees(squirrel, bear) ::: The squirrel sees the bear.\nSees(squirrel, rabbit) ::: The squirrel sees the rabbit.\n∀x ∀y ((Chases(x, squirrel) ∧ Needs(squirrel, rabbit)) → Chases(x, mouse)) ::: If someone chases the squirrel and the squirrel needs the rabbit then they chase the mouse.\n∀x ((Chases(x, mouse) ∧ Needs(x, squirrel)) → Chases(x, squirrel)) ::: If someone chases the mouse and they need the squirrel then they chase the squirrel.\n∀x (Chases(x, squirrel) → Needs(squirrel, rabbit)) ::: If someone chases the squirrel then the squirrel needs the rabbit.\nConclusion:\nSees(mouse, squirrel) ::: The mouse sees the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1079",
    "context": "The tiger is blue. The tiger is cold. The tiger is round. Cold, kind people are nice. Cold people are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nPremises:\nBlue(Tiger) ::: The tiger is blue.\nCold(Tiger) ::: The tiger is cold.\nRound(Tiger) ::: The tiger is round.\n∀x ((Cold(x) ∧ Kind(x)) → Nice(x)) ::: Cold, kind people are nice.\n∀x (Cold(x) → Kind(x)) ::: Cold people are kind.\nConclusion:\n¬Round(Tiger) ::: The tiger is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-862",
    "context": "Anne is furry. Bob is round. Erin is round. If something is round and rough then it is quiet. Young, round things are kind. If Anne is quiet and Anne is kind then Anne is young. If Erin is red and Erin is young then Erin is furry. If something is young then it is quiet. All furry, kind things are red. All furry things are young. If something is young and furry then it is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not kind.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nPremises:\nFurry(Anne) ::: Anne is furry.\nRound(Bob) ::: Bob is round.\nRound(Erin) ::: Erin is round.\n∀x ((Round(x) ∧ Rough(x)) → Quiet(x)) ::: If something is round and rough then it is quiet.\n∀x ((Young(x) ∧ Round(x)) → Kind(x)) ::: Young, round things are kind.\n∀x ((Quiet(Anne) ∧ Kind(Anne)) → Young(Anne)) ::: If Anne is quiet and Anne is kind then Anne is young.\n∀x ((Red(x) ∧ Young(x)) → Furry(x)) ::: If Erin is red and Erin is young then Erin is furry.\n∀x (Young(x) → Quiet(x)) ::: If something is young then it is quiet.\n∀x ((Furry(x) ∧ Kind(x)) → Red(x)) ::: All furry, kind things are red.\n∀x (Furry(x) → Young(x)) ::: All furry things are young.\n∀x ((Young(x) ∧ Furry(x)) → Quiet(x)) ::: If something is young and furry then it is quiet.\nConclusion:\n¬Kind(Erin) ::: Erin is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1778",
    "context": "Anne is green. Anne is quiet. Anne is white. Fiona is big. Fiona is green. Fiona is kind. Fiona is white. Green, quiet things are young. If something is big then it is young. If something is blue then it is quiet. If something is quiet and young then it is big. If something is kind then it is green. If something is young then it is green. If Anne is green and Anne is big then Anne is quiet. If something is green then it is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nGreen(Anne) ::: Anne is green.\nQuiet(Anne) ::: Anne is quiet.\nWhite(Anne) ::: Anne is white.\nBig(Fiona) ::: Fiona is big.\nGreen(Fiona) ::: Fiona is green.\nKind(Fiona) ::: Fiona is kind.\nWhite(Fiona) ::: Fiona is white.\n∀x ((Green(x) ∧ Quiet(x)) → Young(x)) ::: Green, quiet things are young.\n∀x (Big(x) → Young(x)) ::: If something is big then it is young.\n∀x (Blue(x) → Quiet(x)) ::: If something is blue then it is quiet.\n∀x ((Quiet(x) ∧ Young(x)) → Big(x)) ::: If something is quiet and young then it is big.\n∀x (Kind(x) → Green(x)) ::: If something is kind then it is green.\n∀x (Young(x) → Green(x)) ::: If something is young then it is green.\n∀x ((Green(Anne) ∧ Big(Anne)) → Quiet(Anne)) ::: If Anne is green and Anne is big then Anne is quiet.\n∀x (Green(x) → Kind(x)) ::: If something is green then it is kind.\nConclusion:\nQuiet(Anne) ::: Anne is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-328",
    "context": "The cow chases the squirrel. The cow visits the lion. The lion chases the cow. The lion is blue. The lion is cold. The lion is nice. The lion needs the cow. The lion visits the rabbit. The rabbit chases the cow. The rabbit chases the lion. The rabbit chases the squirrel. The rabbit visits the squirrel. The squirrel is kind. The squirrel is nice. The squirrel visits the lion. If someone is nice and they visit the rabbit then they chase the rabbit. If someone is blue then they need the rabbit. If someone needs the lion then the lion visits the squirrel. If someone chases the cow then they chase the rabbit. If someone is big and they visit the squirrel then they need the rabbit. If the rabbit is blue and the rabbit visits the squirrel then the rabbit is kind. If someone chases the rabbit and they chase the cow then they are nice. If someone is blue and they visit the rabbit then they visit the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nVisits(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nPremises:\nChases(cow, squirrel) ::: The cow chases the squirrel.\nVisits(cow, lion) ::: The cow visits the lion.\nChases(lion, cow) ::: The lion chases the cow.\nBlue(lion) ::: The lion is blue.\nCold(lion) ::: The lion is cold.\nNice(lion) ::: The lion is nice.\nNeeds(lion, cow) ::: The lion needs the cow.\nVisits(lion, rabbit) ::: The lion visits the rabbit.\nChases(rabbit, cow) ::: The rabbit chases the cow.\nChases(rabbit, lion) ::: The rabbit chases the lion.\nChases(rabbit, squirrel) ::: The rabbit chases the squirrel.\nVisits(rabbit, squirrel) ::: The rabbit visits the squirrel.\nKind(squirrel) ::: The squirrel is kind.\nNice(squirrel) ::: The squirrel is nice.\nVisits(squirrel, lion) ::: The squirrel visits the lion.\n∀x ((Nice(x) ∧ Visits(x, rabbit)) → Chases(x, rabbit)) ::: If someone is nice and they visit the rabbit then they chase the rabbit.\n∀x (Blue(x) → Needs(x, rabbit)) ::: If someone is blue then they need the rabbit.\n∀x (Needs(x, lion) → Visits(lion, squirrel)) ::: If someone needs the lion then the lion visits the squirrel.\n∀x (Chases(x, cow) → Chases(x, rabbit)) ::: If someone chases the cow then they chase the rabbit.\n∀x ((Big(x) ∧ Visits(x, squirrel)) → Needs(x, rabbit)) ::: If someone is big and they visit the squirrel then they need the rabbit.\n∀x ((Blue(rabbit) ∧ Visits(rabbit, squirrel)) → Kind(rabbit)) ::: If the rabbit is blue and the rabbit visits the squirrel then the rabbit is kind.\n∀x ((Chases(x, rabbit) ∧ Chases(x, cow)) → Nice(x)) ::: If someone chases the rabbit and they chase the cow then they are nice.\n∀x ((Blue(x) ∧ Visits(x, rabbit)) → Visits(x, cow)) ::: If someone is blue and they visit the rabbit then they visit the cow.\nConclusion:\n¬Kind(squirrel) ::: The squirrel is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-702",
    "context": "Dave is cold. Dave is green. Dave is nice. Gary is big. Gary is cold. Gary is green. Gary is nice. Gary is smart. Gary is white. Gary is young. Harry is big. Harry is cold. Harry is smart. Harry is white. Harry is young. If someone is white then they are big. If someone is nice and green then they are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not nice.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nBig(x) ::: x is big.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nCold(Dave) ::: Dave is cold.\nGreen(Dave) ::: Dave is green.\nNice(Dave) ::: Dave is nice.\nBig(Gary) ::: Gary is big.\nCold(Gary) ::: Gary is cold.\nGreen(Gary) ::: Gary is green.\nNice(Gary) ::: Gary is nice.\nSmart(Gary) ::: Gary is smart.\nWhite(Gary) ::: Gary is white.\nYoung(Gary) ::: Gary is young.\nBig(Harry) ::: Harry is big.\nCold(Harry) ::: Harry is cold.\nSmart(Harry) ::: Harry is smart.\nWhite(Harry) ::: Harry is white.\nYoung(Harry) ::: Harry is young.\n∀x (White(x) → Big(x)) ::: If someone is white then they are big.\n∀x ((Nice(x) ∧ Green(x)) → White(x)) ::: If someone is nice and green then they are white.\nConclusion:\n¬Nice(Harry) ::: Harry is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-307",
    "context": "Bob is nice. Bob is not quiet. Bob is red. Charlie is green. Charlie is quiet. Charlie is red. Charlie is smart. Gary is quiet. Harry is blue. Harry is red. All young things are quiet. Blue things are quiet. If something is smart and nice then it is not quiet. All quiet things are red. Nice, smart things are green. All quiet things are green. If something is young and red then it is nice. If something is young then it is not smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is red.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nYoung(x) ::: x is young.\nPremises:\nNice(Bob) ::: Bob is nice.\n¬Quiet(Bob) ::: Bob is not quiet.\nRed(Bob) ::: Bob is red.\nGreen(Charlie) ::: Charlie is green.\nQuiet(Charlie) ::: Charlie is quiet.\nRed(Charlie) ::: Charlie is red.\nSmart(Charlie) ::: Charlie is smart.\nQuiet(Gary) ::: Gary is quiet.\nRed(Harry) ::: Harry is red.\nBlue(Harry) ::: Harry is blue.\n∀x (Young(x) → Quiet(x)) ::: All young things are quiet.\n∀x (Blue(x) → Quiet(x)) ::: Blue things are quiet.\n∀x ((Smart(x) ∧ Nice(x)) → ¬Quiet(x)) ::: If something is smart and nice then it is not quiet.\n∀x (Quiet(x) → Red(x)) ::: All quiet things are red.\n∀x ((Nice(x) ∧ Smart(x)) → Green(x)) ::: Nice, smart things are green.\n∀x (Quiet(x) → Green(x)) ::: All quiet things are green.\n∀x ((Young(x) ∧ Red(x)) → Nice(x)) ::: If something is young and red then it is nice.\n∀x (Young(x) → ¬Smart(x)) ::: If something is young then it is not smart.\nConclusion:\nRed(Harry) ::: Harry is red."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1286",
    "context": "Bob is smart. Charlie is quiet. Erin is smart. Harry is nice. All nice things are smart. If something is smart and nice then it is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nQuiet(x) ::: x is quiet.\nNice(x) ::: x is nice.\nGreen(x) ::: x is green.\nPremises:\nSmart(Bob) ::: Bob is smart.\nQuiet(Charlie) ::: Charlie is quiet.\nSmart(Erin) ::: Erin is smart.\nNice(Harry) ::: Harry is nice.\n∀x (Nice(x) → Smart(x)) ::: All nice things are smart.\n∀x ((Smart(x) ∧ Nice(x)) → Green(x)) ::: If something is smart and nice then it is green.\nConclusion:\n¬Smart(Erin) ::: Erin is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1993",
    "context": "Bob is blue. Bob is green. Bob is white. All furry things are rough. Blue things are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nRough(x) ::: x is rough.\nPremises:\nBlue(Bob) ::: Bob is blue.\nGreen(Bob) ::: Bob is green.\nWhite(Bob) ::: Bob is white.\n∀x (Furry(x) → Rough(x)) ::: All furry things are rough.\n∀x (Blue(x) → Furry(x)) ::: Blue things are furry.\nConclusion:\n¬Red(Bob) ::: Bob is not red."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-2098",
    "context": "Gary is not big. Gary is cold. Harry is nice. Cold things are quiet. All quiet things are not smart. If Gary is not quiet then Gary is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nPremises:\n¬Big(Gary) ::: Gary is not big.\nCold(Gary) ::: Gary is cold.\nNice(Harry) ::: Harry is nice.\n∀x (Cold(x) → Quiet(x)) ::: Cold things are quiet.\n∀x (Quiet(x) → ¬Smart(x)) ::: All quiet things are not smart.\n∀x (¬Quiet(Gary) → Kind(Gary)) ::: If Gary is not quiet then Gary is kind.\nConclusion:\n¬Big(Gary) ::: Gary is not big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-995",
    "context": "The bear does not chase the cat. The bear does not chase the rabbit. The bear eats the cat. The bear eats the rabbit. The bear is blue. The bear is green. The bear needs the cat. The cat chases the bear. The cat is blue. The rabbit chases the bear. The rabbit is big. The rabbit is not green. The rabbit is kind. The rabbit is rough. The rabbit does not need the bear. If something chases the cat and it is not big then it needs the bear. If something is green and it does not chase the cat then the cat eats the bear. If the cat eats the bear and the bear eats the rabbit then the rabbit eats the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChase(x, y) ::: x chases y.\nEat(x, y) ::: x eats y.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nNeed(x, y) ::: x needs y.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nPremises:\n¬Chase(Bear, Cat) ::: The bear does not chase the cat.\n¬Chase(Bear, Rabbit) ::: The bear does not chase the rabbit.\nEat(Bear, Cat) ::: The bear eats the cat.\nEat(Bear, Rabbit) ::: The bear eats the rabbit.\nBlue(Bear) ::: The bear is blue.\nGreen(Bear) ::: The bear is green.\nNeed(Bear, Cat) ::: The bear needs the cat.\nChase(Cat, Bear) ::: The cat chases the bear.\nBlue(Cat) ::: The cat is blue.\nChase(Rabbit, Bear) ::: The rabbit chases the bear.\nBig(Rabbit) ::: The rabbit is big.\n¬Green(Rabbit) ::: The rabbit is not green.\nKind(Rabbit) ::: The rabbit is kind.\nRough(Rabbit) ::: The rabbit is rough.\n¬Need(Rabbit, Bear) ::: The rabbit does not need the bear.\n∀x ((Chase(x, Cat) ∧ ¬Big(x)) → Need(x, Bear)) ::: If something chases the cat and it is not big then it needs the bear.\n∀x ((Green(x) ∧ ¬Chase(x, Cat)) → Eat(Cat, Bear)) ::: If something is green and it does not chase the cat then the cat eats the bear.\n∀x ((Eat(Cat, Bear) ∧ Eat(Bear, Rabbit)) → Eat(Rabbit, Bear)) ::: If the cat eats the bear and the bear eats the rabbit then the rabbit eats the bear.\nConclusion:\n¬Blue(Bear) ::: The bear is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-214",
    "context": "Charlie is not furry. Charlie is not white. Dave is furry. Dave is green. Dave is white. Dave is young. Harry is green. Harry is not rough. Harry is white. Harry is young. If something is furry then it is big. Green, cold things are big. All rough, cold things are not big. Big things are green. If something is rough and not furry then it is white. If something is big then it is white. Cold things are white. All big, young things are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nPremises:\n¬Furry(Charlie) ::: Charlie is not furry.\n¬White(Charlie) ::: Charlie is not white.\nFurry(Dave) ::: Dave is furry.\nGreen(Dave) ::: Dave is green.\nWhite(Dave) ::: Dave is white.\nYoung(Dave) ::: Dave is young.\nGreen(Harry) ::: Harry is green.\n¬Rough(Harry) ::: Harry is not rough.\nWhite(Harry) ::: Harry is white.\nYoung(Harry) ::: Harry is young.\n∀x (Furry(x) → Big(x)) ::: If something is furry then it is big.\n∀x ((Green(x) ∧ Cold(x)) → Big(x)) ::: Green, cold things are big.\n∀x ((Rough(x) ∧ Cold(x)) → ¬Big(x)) ::: All rough, cold things are not big.\n∀x (Big(x) → Green(x)) ::: Big things are green.\n∀x ((Rough(x) ∧ ¬Furry(x)) → White(x)) ::: If something is rough and not furry then it is white.\n∀x (Big(x) → White(x)) ::: If something is big then it is white.\n∀x (Cold(x) → White(x)) ::: Cold things are white.\n∀x ((Big(x) ∧ Young(x)) → Rough(x)) ::: All big, young things are rough.\nConclusion:\n¬Rough(Charlie) ::: Charlie is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1868",
    "context": "Anne is big. Anne is furry. Anne is red. Erin is blue. Erin is cold. Erin is furry. Erin is nice. Fiona is blue. Fiona is not cold. Fiona is furry. Fiona is not nice. Fiona is red. Gary is big. Gary is not cold. Gary is red. Gary is young. If Erin is young then Erin is nice. Blue things are red. If something is nice then it is red. If something is nice and red then it is big. If Fiona is young and Fiona is not cold then Fiona is not furry. If Erin is big then Erin is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nPremises:\nBig(Anne) ::: Anne is big.\nFurry(Anne) ::: Anne is furry.\nRed(Anne) ::: Anne is red.\nBlue(Erin) ::: Erin is blue.\nCold(Erin) ::: Erin is cold.\nFurry(Erin) ::: Erin is furry.\nNice(Erin) ::: Erin is nice.\nBlue(Fiona) ::: Fiona is blue.\n¬Cold(Fiona) ::: Fiona is not cold.\nFurry(Fiona) ::: Fiona is furry.\n¬Nice(Fiona) ::: Fiona is not nice.\nRed(Fiona) ::: Fiona is red.\nBig(Gary) ::: Gary is big.\n¬Cold(Gary) ::: Gary is not cold.\nRed(Gary) ::: Gary is red.\nYoung(Gary) ::: Gary is young.\n∀x ((Young(x) → Nice(x))) ::: If Erin is young then Erin is nice.\n∀x ((Blue(x) → Red(x))) ::: Blue things are red.\n∀x ((Nice(x) → Red(x))) ::: If something is nice then it is red.\n∀x ((Nice(x) ∧ Red(x) → Big(x))) ::: If something is nice and red then it is big.\n∀x ((Young(x) ∧ ¬Cold(x) → ¬Furry(x))) ::: If Fiona is young and Fiona is not cold then Fiona is not furry.\n∀x ((Big(x) → Cold(x))) ::: If Erin is big then Erin is cold.\nConclusion:\nBig(Gary) ::: Gary is big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-566",
    "context": "Charlie is furry. Dave is furry. Erin is not round. Harry is blue. Red people are blue. All big people are cold. If Erin is big then Erin is blue. If someone is blue then they are furry. If someone is round then they are furry. If someone is furry then they are not smart. If Erin is not big and Erin is not cold then Erin is furry. If Dave is big and Dave is not blue then Dave is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nPremises:\nFurry(Charlie) ::: Charlie is furry.\nFurry(Dave) ::: Dave is furry.\n¬Round(Erin) ::: Erin is not round.\nBlue(Harry) ::: Harry is blue.\n∀x (Red(x) → Blue(x)) ::: Red people are blue.\n∀x (Big(x) → Cold(x)) ::: All big people are cold.\n∀x ((Erin is big) → Blue(Erin)) ::: If Erin is big then Erin is blue.\n∀x ((Blue(x)) → Furry(x)) ::: If someone is blue then they are furry.\n∀x ((Round(x)) → Furry(x)) ::: If someone is round then they are furry.\n∀x ((Furry(x)) → ¬Smart(x)) ::: If someone is furry then they are not smart.\n∀x ((¬Big(x) ∧ ¬Cold(x)) → Furry(Erin)) ::: If Erin is not big and Erin is not cold then Erin is furry.\n∀x ((Big(Dave) ∧ ¬Blue(Dave)) → Cold(Dave)) ::: If Dave is big and Dave is not blue then Dave is cold.\nConclusion:\nRound(Erin) ::: Erin is round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-305",
    "context": "Anne is nice. Bob is white. Charlie is nice. Dave is furry. If Anne is cold then Anne is round. If someone is nice then they are cold. If Dave is nice then Dave is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nPremises:\nNice(Anne) ::: Anne is nice.\nWhite(Bob) ::: Bob is white.\nNice(Charlie) ::: Charlie is nice.\nFurry(Dave) ::: Dave is furry.\n∀x ((Nice(x) → Cold(x))) ::: If someone is nice then they are cold.\n∀x ((Dave = x) → Big(x)) ::: If Dave is nice then Dave is big.\n∀x ((Anne = x) → Round(x)) ::: If Anne is cold then Anne is round.\nConclusion:\n¬Cold(Dave) ::: Dave is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-567",
    "context": "The lion eats the tiger. The lion sees the tiger. The lion visits the squirrel. The squirrel does not visit the tiger. The tiger eats the lion. The tiger eats the squirrel. The tiger visits the squirrel. If the tiger is green and the squirrel does not visit the tiger then the squirrel sees the lion. If something is young then it eats the lion. If something eats the lion then it is young. If something visits the lion and the lion is green then it sees the tiger. If something eats the tiger then the tiger visits the lion. If something visits the tiger and it is not big then it visits the squirrel. If something is nice then it visits the lion. If something visits the squirrel then it is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger visits the squirrel.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nPremises:\nEats(lion, tiger) ::: The lion eats the tiger.\nSees(lion, tiger) ::: The lion sees the tiger.\nVisits(lion, squirrel) ::: The lion visits the squirrel.\n¬Visits(squirrel, tiger) ::: The squirrel does not visit the tiger.\nEats(tiger, lion) ::: The tiger eats the lion.\nEats(tiger, squirrel) ::: The tiger eats the squirrel.\nVisits(tiger, squirrel) ::: The tiger visits the squirrel.\n∀x ((Green(tiger) ∧ ¬Visits(squirrel, tiger)) → Sees(squirrel, lion)) ::: If the tiger is green and the squirrel does not visit the tiger then the squirrel sees the lion.\n∀x (Young(x) → Eats(x, lion)) ::: If something is young then it eats the lion.\n∀x (Eats(x, lion) → Young(x)) ::: If something eats the lion then it is young.\n∀x ((Visits(x, lion) ∧ Green(lion)) → Sees(x, tiger)) ::: If something visits the lion and the lion is green then it sees the tiger.\n∀x (Eats(x, tiger) → Visits(tiger, lion)) ::: If something eats the tiger then the tiger visits the lion.\n∀x ((Visits(x, tiger) ∧ ¬Big(x)) → Visits(x, squirrel)) ::: If something visits the tiger and it is not big then it visits the squirrel.\n∀x (Nice(x) → Visits(x, lion)) ::: If something is nice then it visits the lion.\n∀x (Visits(x, squirrel) → Green(x)) ::: If something visits the squirrel then it is green.\nConclusion:\nVisits(tiger, squirrel) ::: The tiger visits the squirrel."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-196",
    "context": "Anne is big. Anne is cold. Anne is furry. Anne is kind. Anne is nice. Anne is quiet. Anne is young. Bob is big. Bob is furry. Bob is kind. Bob is nice. Bob is quiet. Bob is young. Fiona is cold. Fiona is furry. Fiona is kind. If something is cold then it is big. All furry, young things are quiet. If something is furry then it is nice. Young, cold things are quiet. If something is kind and nice then it is quiet. If Anne is cold then Anne is kind. Kind things are big. Big things are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nPremises:\nBig(Anne) ::: Anne is big.\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nKind(Anne) ::: Anne is kind.\nNice(Anne) ::: Anne is nice.\nQuiet(Anne) ::: Anne is quiet.\nYoung(Anne) ::: Anne is young.\nBig(Bob) ::: Bob is big.\nFurry(Bob) ::: Bob is furry.\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\nQuiet(Bob) ::: Bob is quiet.\nYoung(Bob) ::: Bob is young.\nCold(Fiona) ::: Fiona is cold.\nFurry(Fiona) ::: Fiona is furry.\nKind(Fiona) ::: Fiona is kind.\n∀x (Cold(x) → Big(x)) ::: If something is cold then it is big.\n∀x ((Furry(x) ∧ Young(x)) → Quiet(x)) ::: All furry, young things are quiet.\n∀x (Furry(x) → Nice(x)) ::: If something is furry then it is nice.\n∀x ((Young(x) ∧ Cold(x)) → Quiet(x)) ::: Young, cold things are quiet.\n∀x ((Kind(x) ∧ Nice(x)) → Quiet(x)) ::: If something is kind and nice then it is quiet.\n∀x (Cold(Anne) → Kind(Anne)) ::: If Anne is cold then Anne is kind.\n∀x (Kind(x) → Big(x)) ::: Kind things are big.\n∀x (Big(x) → Furry(x)) ::: Big things are furry.\nConclusion:\n¬Quiet(Anne) ::: Anne is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2394",
    "context": "Charlie is rough. Charlie is white. Gary is kind. If someone is young and kind then they are quiet. Rough, green people are blue. All rough people are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nPremises:\nRough(Charlie) ::: Charlie is rough.\nWhite(Charlie) ::: Charlie is white.\nKind(Gary) ::: Gary is kind.\n∀x ((Young(x) ∧ Kind(x)) → Quiet(x)) ::: If someone is young and kind then they are quiet.\n∀x ((Rough(x) ∧ Green(x)) → Blue(x)) ::: Rough, green people are blue.\n∀x (Rough(x) → Green(x)) ::: All rough people are green.\nConclusion:\n¬Quiet(Gary) ::: Gary is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1244",
    "context": "The bald eagle visits the lion. The lion is round. The squirrel likes the lion. The tiger is big. If something is big then it sees the lion. If the squirrel likes the bald eagle then the bald eagle sees the tiger. If something sees the lion then it does not visit the squirrel. If something sees the lion then the lion visits the bald eagle. If something is big and young then it does not like the squirrel. If the squirrel is round and the squirrel likes the bald eagle then the squirrel is not rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nLikes(x, y) ::: x likes y.\nBig(x) ::: x is big.\nSees(x, y) ::: x sees y.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nPremises:\nVisits(BaldEagle, Lion) ::: The bald eagle visits the lion.\nRound(Lion) ::: The lion is round.\nLikes(Squirrel, Lion) ::: The squirrel likes the lion.\nBig(Tiger) ::: The tiger is big.\n∀x (Big(x) → Sees(x, Lion)) ::: If something is big then it sees the lion.\n∀x (Likes(Squirrel, BaldEagle) → Sees(BaldEagle, Tiger)) ::: If the squirrel likes the bald eagle then the bald eagle sees the tiger.\n∀x (Sees(x, Lion) → ¬Visits(x, Squirrel)) ::: If something sees the lion then it does not visit the squirrel.\n∀x (Sees(x, Lion) → Visits(Lion, BaldEagle)) ::: If something sees the lion then the lion visits the bald eagle.\n∀x ((Big(x) ∧ Young(x)) → ¬Likes(x, Squirrel)) ::: If something is big and young then it does not like the squirrel.\n∀x ((Round(Squirrel) ∧ Likes(Squirrel, BaldEagle)) → ¬Rough(Squirrel)) ::: If the squirrel is round and the squirrel likes the bald eagle then the squirrel is not rough.\nConclusion:\nRound(Lion) ::: The lion is round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1528",
    "context": "Erin is big. Erin is blue. Erin is cold. Erin is not furry. Harry is big. Harry is cold. Harry is furry. Harry is kind. Harry is round. Harry is not white. If someone is white and big then they are kind. Big, blue people are white. If Harry is not white then Harry is kind. If someone is big and not kind then they are not cold. If someone is furry and not kind then they are cold. White, cold people are not round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nPremises:\nBig(Erin) ::: Erin is big.\nBlue(Erin) ::: Erin is blue.\nCold(Erin) ::: Erin is cold.\n¬Furry(Erin) ::: Erin is not furry.\nBig(Harry) ::: Harry is big.\nCold(Harry) ::: Harry is cold.\nFurry(Harry) ::: Harry is furry.\nKind(Harry) ::: Harry is kind.\nRound(Harry) ::: Harry is round.\n¬White(Harry) ::: Harry is not white.\n∀x ((White(x) ∧ Big(x)) → Kind(x)) ::: If someone is white and big then they are kind.\n∀x ((Big(x) ∧ Blue(x)) → White(x)) ::: Big, blue people are white.\n∀x (¬White(x) → Kind(x)) ::: If Harry is not white then Harry is kind.\n∀x ((Big(x) ∧ ¬Kind(x)) → ¬Cold(x)) ::: If someone is big and not kind then they are not cold.\n∀x ((Furry(x) ∧ ¬Kind(x)) → Cold(x)) ::: If someone is furry and not kind then they are cold.\n∀x ((White(x) ∧ Cold(x)) → ¬Round(x)) ::: White, cold people are not round.\nConclusion:\n¬Furry(Harry) ::: Harry is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-897",
    "context": "Harry is not kind. Harry is smart. Harry is not young. Nice things are red. If Harry is smart and Harry is not young then Harry is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nPremises:\n¬Kind(Harry) ::: Harry is not kind.\nSmart(Harry) ::: Harry is smart.\n¬Young(Harry) ::: Harry is not young.\n∀x (Nice(x) → Red(x)) ::: Nice things are red.\n∀x ((Smart(x) ∧ ¬Young(x)) → Nice(x)) ::: If Harry is smart and Harry is not young then Harry is nice.\nConclusion:\n¬Rough(Harry) ::: Harry is not rough."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1781",
    "context": "The cat is blue. The cat is green. The cat is kind. The cat is nice. The cat is rough. The cat likes the tiger. The cat sees the tiger. The cat visits the tiger. The tiger is blue. The tiger is green. The tiger is kind. The tiger is nice. The tiger is rough. The tiger likes the cat. The tiger sees the cat. The tiger visits the cat. If something is green then it visits the cat. If something sees the cat and it likes the tiger then the tiger is green. If something visits the cat and it likes the tiger then it sees the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nCat(x) ::: x is a cat.\nTiger(x) ::: x is a tiger.\nPremises:\nBlue(Cat) ::: The cat is blue.\nGreen(Cat) ::: The cat is green.\nKind(Cat) ::: The cat is kind.\nNice(Cat) ::: The cat is nice.\nRough(Cat) ::: The cat is rough.\nLikes(Cat, Tiger) ::: The cat likes the tiger.\nSees(Cat, Tiger) ::: The cat sees the tiger.\nVisits(Cat, Tiger) ::: The cat visits the tiger.\nBlue(Tiger) ::: The tiger is blue.\nGreen(Tiger) ::: The tiger is green.\nKind(Tiger) ::: The tiger is kind.\nNice(Tiger) ::: The tiger is nice.\nRough(Tiger) ::: The tiger is rough.\nLikes(Tiger, Cat) ::: The tiger likes the cat.\nSees(Tiger, Cat) ::: The tiger sees the cat.\nVisits(Tiger, Cat) ::: The tiger visits the cat.\n∀x ((Green(x) → Visits(x, Cat))) ::: If something is green then it visits the cat.\n∀x ((Sees(x, Cat) ∧ Likes(x, Tiger)) → Green(Tiger)) ::: If something sees the cat and it likes the tiger then the tiger is green.\n∀x ((Visits(x, Cat) ∧ Likes(x, Tiger)) → Sees(x, Cat)) ::: If something visits the cat and it likes the tiger then it sees the cat.\nConclusion:\nGreen(Tiger) ::: The tiger is green."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-221",
    "context": "The dog is red. The dog is round. The dog likes the mouse. The dog visits the mouse. The mouse eats the dog. The mouse eats the tiger. The mouse is kind. The mouse is red. The mouse likes the tiger. The mouse visits the dog. The tiger is kind. The tiger is round. The tiger is young. The tiger likes the mouse. The tiger visits the dog. The tiger visits the mouse. If something is red and young then it eats the dog. If something visits the dog and the dog likes the mouse then the dog is young. If something eats the tiger then the tiger eats the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not young.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nEats(x, y) ::: x eats y.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nPremises:\nRed(dog) ::: The dog is red.\nRound(dog) ::: The dog is round.\nLikes(dog, mouse) ::: The dog likes the mouse.\nVisits(dog, mouse) ::: The dog visits the mouse.\nEats(mouse, dog) ::: The mouse eats the dog.\nEats(mouse, tiger) ::: The mouse eats the tiger.\nKind(mouse) ::: The mouse is kind.\nRed(mouse) ::: The mouse is red.\nLikes(mouse, tiger) ::: The mouse likes the tiger.\nVisits(mouse, dog) ::: The mouse visits the dog.\nKind(tiger) ::: The tiger is kind.\nRound(tiger) ::: The tiger is round.\nYoung(tiger) ::: The tiger is young.\nLikes(tiger, mouse) ::: The tiger likes the mouse.\nVisits(tiger, dog) ::: The tiger visits the dog.\nVisits(tiger, mouse) ::: The tiger visits the mouse.\n∀x ((Red(x) ∧ Young(x)) → Eats(x, dog)) ::: If something is red and young then it eats the dog.\n∀x ((Visits(x, dog) ∧ Likes(dog, mouse)) → Young(dog)) ::: If something visits the dog and the dog likes the mouse then the dog is young.\n∀x (Eats(x, tiger) → Eats(tiger, mouse)) ::: If something eats the tiger then the tiger eats the mouse.\nConclusion:\n¬Young(tiger) ::: The tiger is not young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2053",
    "context": "Bob is furry. Nice, cold people are kind. If someone is cold then they are kind. If someone is smart then they are furry. If someone is kind and cold then they are smart. If Bob is furry then Bob is cold. Cold, smart people are red. If someone is smart then they are cold. All furry, kind people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nPremises:\nFurry(Bob) ::: Bob is furry.\n∀x ((Nice(x) ∧ Cold(x)) → Kind(x)) ::: Nice, cold people are kind.\n∀x (Cold(x) → Kind(x)) ::: If someone is cold then they are kind.\n∀x (Smart(x) → Furry(x)) ::: If someone is smart then they are furry.\n∀x ((Kind(x) ∧ Cold(x)) → Smart(x)) ::: If someone is kind and cold then they are smart.\n∀x (Furry(Bob) → Cold(Bob)) ::: If Bob is furry then Bob is cold.\n∀x ((Cold(x) ∧ Smart(x)) → Red(x)) ::: Cold, smart people are red.\n∀x (Smart(x) → Cold(x)) ::: If someone is smart then they are cold.\n∀x ((Furry(x) ∧ Kind(x)) → Cold(x)) ::: All furry, kind people are cold.\nConclusion:\n¬Green(Bob) ::: Bob is not green."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1545",
    "context": "Anne is kind. Bob is cold. Bob is rough. Bob is young. Erin is quiet. Erin is rough. Erin is young. If Erin is cold then Erin is nice. All rough people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nQuiet(x) ::: x is quiet.\nNice(x) ::: x is nice.\nPremises:\nKind(Anne) ::: Anne is kind.\nCold(Bob) ::: Bob is cold.\nRough(Bob) ::: Bob is rough.\nYoung(Bob) ::: Bob is young.\nQuiet(Erin) ::: Erin is quiet.\nRough(Erin) ::: Erin is rough.\nYoung(Erin) ::: Erin is young.\n∀x (Cold(x) → Nice(x)) ::: If Erin is cold then Erin is nice.\n∀x (Rough(x) → Cold(x)) ::: All rough people are cold.\nConclusion:\nQuiet(Erin) ::: Erin is quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1386",
    "context": "Anne is blue. Anne is rough. Anne is white. If Anne is kind then Anne is nice. All kind, nice things are blue. If something is white and quiet then it is rough. If something is blue and nice then it is big. All kind things are big. If something is white then it is nice. Big, nice things are quiet. If something is blue then it is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nPremises:\nBlue(Anne) ::: Anne is blue.\nRough(Anne) ::: Anne is rough.\nWhite(Anne) ::: Anne is white.\n∀x ((Kind(x) → Nice(x)) ::: If x is kind then x is nice.\n∀x ((Kind(x) ∧ Nice(x)) → Blue(x)) ::: All kind, nice things are blue.\n∀x ((White(x) ∧ Quiet(x)) → Rough(x)) ::: If something is white and quiet then it is rough.\n∀x ((Blue(x) ∧ Nice(x)) → Big(x)) ::: If something is blue and nice then it is big.\n∀x (Kind(x) → Big(x)) ::: All kind things are big.\n∀x (White(x) → Nice(x)) ::: If something is white then it is nice.\n∀x ((Big(x) ∧ Nice(x)) → Quiet(x)) ::: Big, nice things are quiet.\n∀x (Blue(x) → Kind(x)) ::: If something is blue then it is kind.\nConclusion:\n¬Blue(Anne) ::: Anne is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-683",
    "context": "The bald eagle is kind. The bald eagle is nice. The bald eagle is rough. The bald eagle is not young. The bald eagle likes the tiger. The bald eagle needs the dog. The bald eagle sees the dog. The dog is not kind. The dog does not like the bald eagle. The dog needs the bald eagle. The dog needs the tiger. The tiger is rough. If someone is young then they are big. If someone needs the bald eagle then they are young. If the tiger is young and the tiger likes the bald eagle then the bald eagle needs the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nBaldEagle(x) ::: x is a bald eagle.\nTiger(x) ::: x is a tiger.\nDog(x) ::: x is a dog.\nBig(x) ::: x is big.\nPremises:\nKind(BaldEagle) ::: The bald eagle is kind.\nNice(BaldEagle) ::: The bald eagle is nice.\nRough(BaldEagle) ::: The bald eagle is rough.\n¬Young(BaldEagle) ::: The bald eagle is not young.\nLikes(BaldEagle, Tiger) ::: The bald eagle likes the tiger.\nNeeds(BaldEagle, Dog) ::: The bald eagle needs the dog.\nSees(BaldEagle, Dog) ::: The bald eagle sees the dog.\n¬Kind(Dog) ::: The dog is not kind.\n¬Likes(Dog, BaldEagle) ::: The dog does not like the bald eagle.\nNeeds(Dog, BaldEagle) ::: The dog needs the bald eagle.\nNeeds(Dog, Tiger) ::: The dog needs the tiger.\nRough(Tiger) ::: The tiger is rough.\n∀x (Young(x) → Big(x)) ::: If someone is young then they are big.\n∀x ((Needs(x, BaldEagle)) → Young(x)) ::: If someone needs the bald eagle then they are young.\n∀x ((Young(Tiger) ∧ Likes(Tiger, BaldEagle)) → Needs(BaldEagle, Dog)) ::: If the tiger is young and the tiger likes the bald eagle then the bald eagle needs the dog.\nConclusion:\n¬Big(Tiger) ::: The tiger is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1657",
    "context": "Anne is white. Anne is not young. Dave is furry. Dave is white. Erin is big. Erin is young. Gary is red. If Erin is white then Erin is blue. If Erin is furry and Erin is not white then Erin is not big. If something is white and not young then it is blue. If something is young and not blue then it is smart. If something is white then it is smart. If Anne is smart and Anne is young then Anne is furry. White, young things are not big. All smart things are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is white.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nFurry(x) ::: x is furry.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nPremises:\nWhite(Anne) ::: Anne is white.\n¬Young(Anne) ::: Anne is not young.\nFurry(Dave) ::: Dave is furry.\nWhite(Dave) ::: Dave is white.\nBig(Erin) ::: Erin is big.\nYoung(Erin) ::: Erin is young.\nRed(Gary) ::: Gary is red.\n∀x ((White(x) → Blue(x))) ::: If Erin is white then Erin is blue.\n∀x ((Furry(x) ∧ ¬White(x)) → ¬Big(x)) ::: If Erin is furry and Erin is not white then Erin is not big.\n∀x ((White(x) ∧ ¬Young(x)) → Blue(x)) ::: If something is white and not young then it is blue.\n∀x ((Young(x) ∧ ¬Blue(x)) → Smart(x)) ::: If something is young and not blue then it is smart.\n∀x (White(x) → Smart(x)) ::: If something is white then it is smart.\n∀x ((Smart(Anne) ∧ Young(Anne)) → Furry(Anne)) ::: If Anne is smart and Anne is young then Anne is furry.\n∀x ((White(x) ∧ Young(x)) → ¬Big(x)) ::: White, young things are not big.\n∀x (Smart(x) → Big(x)) ::: All smart things are big.\nConclusion:\nWhite(Anne) ::: Anne is white."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-233",
    "context": "The bald eagle is blue. The bald eagle is red. The bald eagle likes the rabbit. The bald eagle visits the mouse. The cat is big. The cat is nice. The cat likes the mouse. The cat likes the rabbit. The mouse visits the cat. The mouse visits the rabbit. The rabbit chases the cat. The rabbit is big. If the cat is blue then the cat likes the bald eagle. If the rabbit is red and the rabbit chases the bald eagle then the rabbit is nice. If something chases the bald eagle and the bald eagle chases the cat then the bald eagle is big. If something likes the cat then the cat chases the bald eagle. If something is big and it likes the rabbit then it chases the rabbit. If something chases the cat then it is blue. If something is red then it likes the cat. If something visits the rabbit and the rabbit is green then the rabbit is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nRed(x) ::: x is red.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nChases(x, y) ::: x chases y.\nGreen(x) ::: x is green.\n\nPremises:\nBlue(bald eagle) ::: The bald eagle is blue.\nRed(bald eagle) ::: The bald eagle is red.\nLikes(bald eagle, rabbit) ::: The bald eagle likes the rabbit.\nVisits(bald eagle, mouse) ::: The bald eagle visits the mouse.\nBig(cat) ::: The cat is big.\nNice(cat) ::: The cat is nice.\nLikes(cat, mouse) ::: The cat likes the mouse.\nLikes(cat, rabbit) ::: The cat likes the rabbit.\nVisits(mouse, cat) ::: The mouse visits the cat.\nVisits(mouse, rabbit) ::: The mouse visits the rabbit.\nChases(rabbit, cat) ::: The rabbit chases the cat.\nBig(rabbit) ::: The rabbit is big.\n∀x ((Blue(cat) → Likes(cat, bald eagle))) ::: If the cat is blue then the cat likes the bald eagle.\n∀x ((Red(rabbit) ∧ Chases(rabbit, bald eagle)) → Nice(rabbit)) ::: If the rabbit is red and the rabbit chases the bald eagle then the rabbit is nice.\n∀x ((Chases(x, bald eagle) ∧ Chases(bald eagle, cat)) → Big(bald eagle)) ::: If something chases the bald eagle and the bald eagle chases the cat then the bald eagle is big.\n∀x (Likes(x, cat) → Chases(cat, bald eagle)) ::: If something likes the cat then the cat chases the bald eagle.\n∀x ((Big(x) ∧ Likes(x, rabbit)) → Chases(x, rabbit)) ::: If something is big and it likes the rabbit then it chases the rabbit.\n∀x (Chases(x, cat) → Blue(x)) ::: If something chases the cat then it is blue.\n∀x (Red(x) → Likes(x, cat)) ::: If something is red then it likes the cat.\n∀x ((Visits(x, rabbit) ∧ Green(rabbit)) → Red(rabbit)) ::: If something visits the rabbit and the rabbit is green then the rabbit is red.\n\nConclusion:\n¬Big(rabbit) ::: The rabbit is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-242",
    "context": "Bob is blue. Bob is cold. Bob is smart. Bob is white. Charlie is kind. Gary is green. Harry is big. If Harry is big then Harry is smart. If Charlie is kind and Charlie is green then Charlie is not white. Big, smart people are not white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nPremises:\nBlue(Bob) ::: Bob is blue.\nCold(Bob) ::: Bob is cold.\nSmart(Bob) ::: Bob is smart.\nWhite(Bob) ::: Bob is white.\nKind(Charlie) ::: Charlie is kind.\nGreen(Gary) ::: Gary is green.\nBig(Harry) ::: Harry is big.\n∀x (Big(x) → Smart(x)) ::: If x is big then x is smart.\n∀x ((Kind(x) ∧ Green(x)) → ¬White(x)) ::: If x is kind and green then x is not white.\n∀x ((Big(x) ∧ Smart(x)) → ¬White(x)) ::: Big, smart people are not white.\nConclusion:\n¬Green(Harry) ::: Harry is not green."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1274",
    "context": "Bob is big. Bob is cold. Bob is furry. Bob is green. Bob is red. Bob is round. Bob is young. Charlie is cold. Charlie is furry. Charlie is green. Charlie is red. Charlie is young. Gary is furry. Gary is red. Gary is round. Green people are cold. Young people are cold. All red, big people are round. Red people are furry. If someone is young and green then they are furry. If someone is green then they are young. If someone is red then they are young. Cold people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nPremises:\nBig(Bob) ::: Bob is big.\nCold(Bob) ::: Bob is cold.\nFurry(Bob) ::: Bob is furry.\nGreen(Bob) ::: Bob is green.\nRed(Bob) ::: Bob is red.\nRound(Bob) ::: Bob is round.\nYoung(Bob) ::: Bob is young.\nCold(Charlie) ::: Charlie is cold.\nFurry(Charlie) ::: Charlie is furry.\nGreen(Charlie) ::: Charlie is green.\nRed(Charlie) ::: Charlie is red.\nYoung(Charlie) ::: Charlie is young.\nFurry(Gary) ::: Gary is furry.\nRed(Gary) ::: Gary is red.\nRound(Gary) ::: Gary is round.\n∀x ((Green(x) ∧ Young(x)) → Furry(x)) ::: If someone is young and green then they are furry.\n∀x (Green(x) → Young(x)) ::: If someone is green then they are young.\n∀x (Red(x) → Young(x)) ::: If someone is red then they are young.\n∀x (Cold(x) → Big(x)) ::: Cold people are big.\nConclusion:\nYoung(Bob) ::: Bob is young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-62",
    "context": "The rabbit is kind. All kind people are young. If someone is young then they are not blue. All blue people are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nKind(rabbit) ::: The rabbit is kind.\n∀x (Kind(x) → Young(x)) ::: All kind people are young.\n∀x (Young(x) → ¬Blue(x)) ::: If someone is young then they are not blue.\n∀x (Blue(x) → Kind(x)) ::: All blue people are kind.\nConclusion:\n¬Kind(rabbit) ::: The rabbit is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1252",
    "context": "The bear chases the rabbit. The bear is cold. The rabbit chases the bear. If something chases the bear then it sees the rabbit. If something sees the rabbit then the rabbit sees the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not see the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nSees(x, y) ::: x sees y.\nRabbit(x) ::: x is a rabbit.\nBear(x) ::: x is a bear.\nPremises:\nChases(Bear, Rabbit) ::: The bear chases the rabbit.\nCold(Bear) ::: The bear is cold.\nChases(Rabbit, Bear) ::: The rabbit chases the bear.\n∀x (Chases(x, Bear) → Sees(x, Rabbit)) ::: If something chases the bear then it sees the rabbit.\n∀x (Sees(x, Rabbit) → Sees(Rabbit, x)) ::: If something sees the rabbit then the rabbit sees the bear.\nConclusion:\n¬Sees(Bear, Rabbit) ::: The bear does not see the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1192",
    "context": "Bob is round. Harry is white. Cold, round people are red. All round people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nPremises:\nRound(Bob) ::: Bob is round.\nWhite(Harry) ::: Harry is white.\n∀x ((Cold(x) ∧ Round(x)) → Red(x)) ::: Cold, round people are red.\n∀x (Round(x) → Cold(x)) ::: All round people are cold.\nConclusion:\nRound(Bob) ::: Bob is round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1876",
    "context": "The cow needs the tiger. The cow sees the mouse. The mouse is nice. The mouse likes the cow. The mouse needs the cow. The tiger is big. The tiger is cold. The tiger is red. The tiger is round. The tiger likes the cow. The tiger needs the cow. The tiger sees the cow. If something likes the cow then it is nice. If something is cold and it sees the tiger then the tiger sees the cow. If something needs the cow and it sees the cow then the cow sees the tiger. If something needs the cow and the cow is nice then the cow is red. If the cow likes the tiger and the cow needs the mouse then the tiger is red. If something sees the cow and the cow sees the tiger then the cow is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nPremises:\nNeeds(cow, tiger) ::: The cow needs the tiger.\nSees(cow, mouse) ::: The cow sees the mouse.\nNice(mouse) ::: The mouse is nice.\nLikes(mouse, cow) ::: The mouse likes the cow.\nNeeds(mouse, cow) ::: The mouse needs the cow.\nBig(tiger) ::: The tiger is big.\nCold(tiger) ::: The tiger is cold.\nRed(tiger) ::: The tiger is red.\nRound(tiger) ::: The tiger is round.\nLikes(x, cow) → Nice(x) ::: If something likes the cow then it is nice.\nCold(x) ∧ Sees(x, tiger) → Sees(tiger, cow) ::: If something is cold and it sees the tiger then the tiger sees the cow.\nNeeds(x, cow) ∧ Sees(x, cow) → Sees(cow, tiger) ::: If something needs the cow and it sees the cow then the cow sees the tiger.\nNeeds(x, cow) ∧ Nice(cow) → Red(cow) ::: If something needs the cow and the cow is nice then the cow is red.\nLikes(cow, tiger) ∧ Needs(cow, mouse) → Red(tiger) ::: If the cow likes the tiger and the cow needs the mouse then the tiger is red.\nSees(x, cow) ∧ Sees(cow, tiger) → Red(cow) ::: If something sees the cow and the cow sees the tiger then the cow is red.\nConclusion:\n¬Round(tiger) ::: The tiger is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-875",
    "context": "The bald eagle eats the squirrel. The bald eagle is young. The bald eagle likes the cow. The bald eagle likes the squirrel. The bald eagle sees the cow. The cow is blue. The cow is nice. The cow sees the bald eagle. The squirrel is nice. The squirrel likes the bald eagle. The squirrel likes the cow. The squirrel sees the cow. Rough things are cold. If something likes the bald eagle and the bald eagle likes the squirrel then the bald eagle is nice. If something eats the squirrel and the squirrel sees the bald eagle then it eats the bald eagle. If something eats the squirrel and it sees the bald eagle then the bald eagle likes the squirrel. If something likes the cow then the cow likes the bald eagle. If something likes the bald eagle then the bald eagle is rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not eat the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\n\nPremises:\nEats(BaldEagle, Squirrel) ::: The bald eagle eats the squirrel.\nYoung(BaldEagle) ::: The bald eagle is young.\nLikes(BaldEagle, Cow) ::: The bald eagle likes the cow.\nLikes(BaldEagle, Squirrel) ::: The bald eagle likes the squirrel.\nSees(BaldEagle, Cow) ::: The bald eagle sees the cow.\nBlue(Cow) ::: The cow is blue.\nNice(Cow) ::: The cow is nice.\nSees(Cow, BaldEagle) ::: The cow sees the bald eagle.\nNice(Squirrel) ::: The squirrel is nice.\nLikes(Squirrel, BaldEagle) ::: The squirrel likes the bald eagle.\nLikes(Squirrel, Cow) ::: The squirrel likes the cow.\nSees(Squirrel, Cow) ::: The squirrel sees the cow.\n∀x (Rough(x) → Cold(x)) ::: Rough things are cold.\n∀x ((Likes(x, BaldEagle) ∧ Likes(BaldEagle, Squirrel)) → Nice(BaldEagle)) ::: If something likes the bald eagle and the bald eagle likes the squirrel then the bald eagle is nice.\n∀x ((Eats(x, Squirrel) ∧ Sees(Squirrel, BaldEagle)) → Eats(x, BaldEagle)) ::: If something eats the squirrel and the squirrel sees the bald eagle then it eats the bald eagle.\n∀x ((Eats(x, Squirrel) ∧ Sees(x, BaldEagle)) → Likes(BaldEagle, Squirrel)) ::: If something eats the squirrel and it sees the bald eagle then the bald eagle likes the squirrel.\n∀x (Likes(x, Cow) → Likes(Cow, BaldEagle)) ::: If something likes the cow then the cow likes the bald eagle.\n∀x (Likes(x, BaldEagle) → Rough(BaldEagle)) ::: If something likes the bald eagle then the bald eagle is rough.\n\nConclusion:\n¬Eats(BaldEagle, BaldEagle) ::: The bald eagle does not eat the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2185",
    "context": "Anne is cold. Dave is young. Harry is white. If Harry is white then Harry is kind. If Dave is round then Dave is young. If Harry is kind then Harry is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nPremises:\nCold(Anne) ::: Anne is cold.\nYoung(Dave) ::: Dave is young.\nWhite(Harry) ::: Harry is white.\n∀x ((White(x) → Kind(x)) ::: If Harry is white then Harry is kind.\n∀x ((Round(x) → Young(x)) ::: If Dave is round then Dave is young.\n∀x ((Kind(x) → Young(x)) ::: If Harry is kind then Harry is young.\nConclusion:\nCold(Anne) ::: Anne is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-728",
    "context": "Anne is kind. Anne is nice. Anne is red. Anne is smart. Erin is cold. Erin is red. Erin is rough. Erin is white. Gary is cold. Gary is kind. Gary is nice. Gary is red. Gary is rough. Gary is smart. Gary is white. Red things are rough. If something is nice and white then it is kind. If something is rough then it is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nPremises:\nKind(Anne) ::: Anne is kind.\nNice(Anne) ::: Anne is nice.\nRed(Anne) ::: Anne is red.\nSmart(Anne) ::: Anne is smart.\nCold(Erin) ::: Erin is cold.\nRed(Erin) ::: Erin is red.\nRough(Erin) ::: Erin is rough.\nWhite(Erin) ::: Erin is white.\nCold(Gary) ::: Gary is cold.\nKind(Gary) ::: Gary is kind.\nNice(Gary) ::: Gary is nice.\nRed(Gary) ::: Gary is red.\nRough(Gary) ::: Gary is rough.\nSmart(Gary) ::: Gary is smart.\nWhite(Gary) ::: Gary is white.\n∀x (Red(x) → Rough(x)) ::: Red things are rough.\n∀x ((Nice(x) ∧ White(x)) → Kind(x)) ::: If something is nice and white then it is kind.\n∀x (Rough(x) → White(x)) ::: If something is rough then it is white.\nConclusion:\n¬Kind(Anne) ::: Anne is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1085",
    "context": "The bald eagle sees the cow. The bald eagle visits the bear. The bear is not cold. The bear is rough. The bear is young. The bear needs the bald eagle. The bear needs the cow. The bear sees the lion. The cow is cold. The lion is red. The lion is rough. The lion needs the cow. The lion sees the bald eagle. The lion visits the bald eagle. The lion visits the bear. The lion does not visit the cow. If something is rough then it visits the bald eagle. If the lion needs the cow then the lion sees the bald eagle. If something needs the lion then the lion visits the bear. If something needs the cow then it is rough. If something is young and not cold then it is not red. If the cow visits the bald eagle and the bald eagle sees the lion then the cow is red. If something needs the cow and the cow is not rough then it does not need the bear. If something needs the cow and it is not red then it sees the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not see the cow.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nRed(x) ::: x is red.\nPremises:\nSees(bald eagle, cow) ::: The bald eagle sees the cow.\nVisits(bald eagle, bear) ::: The bald eagle visits the bear.\n¬Cold(bear) ::: The bear is not cold.\nRough(bear) ::: The bear is rough.\nYoung(bear) ::: The bear is young.\nNeeds(bear, bald eagle) ::: The bear needs the bald eagle.\nNeeds(bear, cow) ::: The bear needs the cow.\nSees(bear, lion) ::: The bear sees the lion.\nCold(cow) ::: The cow is cold.\nRed(lion) ::: The lion is red.\nRough(lion) ::: The lion is rough.\nNeeds(lion, cow) ::: The lion needs the cow.\nSees(lion, bald eagle) ::: The lion sees the bald eagle.\nVisits(lion, bald eagle) ::: The lion visits the bald eagle.\nVisits(lion, bear) ::: The lion visits the bear.\n¬Visits(lion, cow) ::: The lion does not visit the cow.\n∀x (Rough(x) → Visits(x, bald eagle)) ::: If something is rough then it visits the bald eagle.\n∀x (Needs(lion, cow) → Sees(lion, bald eagle)) ::: If the lion needs the cow then the lion sees the bald eagle.\n∀x (Needs(x, lion) → Visits(lion, bear)) ::: If something needs the lion then the lion visits the bear.\n∀x (Needs(x, cow) → Rough(x)) ::: If something needs the cow then it is rough.\n∀x ((Young(x) ∧ ¬Cold(x)) → ¬Red(x)) ::: If something is young and not cold then it is not red.\n∀x ((Visits(cow, bald eagle) ∧ Sees(bald eagle, lion)) → Red(cow)) ::: If the cow visits the bald eagle and the bald eagle sees the lion then the cow is red.\n∀x ((Needs(x, cow) ∧ ¬Rough(x)) → ¬Needs(x, bear)) ::: If something needs the cow and the cow is not rough then it does not need the bear.\n∀x ((Needs(x, cow) ∧ ¬Red(x)) → Sees(x, cow)) ::: If something needs the cow and it is not red then it sees the cow.\nConclusion:\n¬Sees(lion, cow) ::: The lion does not see the cow."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1283",
    "context": "Anne is blue. Anne is not furry. Anne is kind. Anne is smart. Anne is young. Bob is furry. Bob is not green. Bob is red. Bob is smart. Bob is young. Fiona is furry. Fiona is red. All red people are kind. All smart, kind people are blue. If someone is green then they are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nPremises:\nBlue(Anne) ::: Anne is blue.\n¬Furry(Anne) ::: Anne is not furry.\nKind(Anne) ::: Anne is kind.\nSmart(Anne) ::: Anne is smart.\nYoung(Anne) ::: Anne is young.\nFurry(Bob) ::: Bob is furry.\n¬Green(Bob) ::: Bob is not green.\nRed(Bob) ::: Bob is red.\nSmart(Bob) ::: Bob is smart.\nYoung(Bob) ::: Bob is young.\nFurry(Fiona) ::: Fiona is furry.\nRed(Fiona) ::: Fiona is red.\n∀x (Red(x) → Kind(x)) ::: All red people are kind.\n∀x ((Smart(x) ∧ Kind(x)) → Blue(x)) ::: All smart, kind people are blue.\n∀x (Green(x) → Blue(x)) ::: If someone is green then they are blue.\nConclusion:\nFurry(Bob) ::: Bob is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-291",
    "context": "The bear eats the cat. The bear eats the cow. The bear is green. The bear is kind. The bear visits the cat. The cat is young. The cat needs the squirrel. The cat visits the cow. The cow eats the bear. The cow is cold. The cow visits the bear. The squirrel eats the cat. If something is cold then it visits the squirrel. If something eats the cow then the cow is green. If something needs the cow and the cow is cold then the cow eats the cat. If something visits the cow and the cow eats the bear then the bear visits the squirrel. If something is cold then it needs the cat. If something visits the squirrel then the squirrel is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow does not visit the bear.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nVisits(x, y) ::: x visits y.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nCold(x) ::: x is cold.\nConclusion:\n¬Visits(cow, bear) ::: The cow does not visit the bear.\nPremises:\nEats(bear, cat) ::: The bear eats the cat.\nEats(bear, cow) ::: The bear eats the cow.\nGreen(bear) ::: The bear is green.\nKind(bear) ::: The bear is kind.\nVisits(bear, cat) ::: The bear visits the cat.\nYoung(cat) ::: The cat is young.\nNeeds(cat, squirrel) ::: The cat needs the squirrel.\nVisits(cat, cow) ::: The cat visits the cow.\nEats(cow, bear) ::: The cow eats the bear.\nCold(cow) ::: The cow is cold.\nVisits(cow, bear) ::: The cow visits the bear.\nEats(squirrel, cat) ::: The squirrel eats the cat.\n∀x (Cold(x) → Visits(x, squirrel)) ::: If something is cold then it visits the squirrel.\n∀x (Eats(x, cow) → Green(cow)) ::: If something eats the cow then the cow is green.\n∀x ((Needs(x, cow) ∧ Cold(cow)) → Eats(cow, cat)) ::: If something needs the cow and the cow is cold then the cow eats the cat.\n∀x ((Visits(x, cow) ∧ Eats(cow, bear)) → Visits(bear, squirrel)) ::: If something visits the cow and the cow eats the bear then the bear visits the squirrel.\n∀x (Cold(x) → Needs(x, cat)) ::: If something is cold then it needs the cat.\n∀x (Visits(x, squirrel) → Green(squirrel)) ::: If something visits the squirrel then the squirrel is green."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-265",
    "context": "Anne is blue. Anne is cold. Anne is kind. Anne is quiet. Anne is red. Anne is young. Fiona is cold. Fiona is kind. Fiona is quiet. Fiona is young. All cold things are blue. Young things are cold. If something is cold and blue then it is young. If something is red and cold then it is young. If Fiona is kind then Fiona is young. All blue things are red. If something is smart then it is quiet. If Fiona is red then Fiona is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not smart.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nSmart(x) ::: x is smart.\nPremises:\nBlue(Anne) ::: Anne is blue.\nCold(Anne) ::: Anne is cold.\nKind(Anne) ::: Anne is kind.\nQuiet(Anne) ::: Anne is quiet.\nRed(Anne) ::: Anne is red.\nYoung(Anne) ::: Anne is young.\nCold(Fiona) ::: Fiona is cold.\nKind(Fiona) ::: Fiona is kind.\nQuiet(Fiona) ::: Fiona is quiet.\nYoung(Fiona) ::: Fiona is young.\n∀x (Cold(x) → Blue(x)) ::: All cold things are blue.\n∀x (Young(x) → Cold(x)) ::: Young things are cold.\n∀x ((Cold(x) ∧ Blue(x)) → Young(x)) ::: If something is cold and blue then it is young.\n∀x ((Red(x) ∧ Cold(x)) → Young(x)) ::: If something is red and cold then it is young.\n∀x (Kind(Fiona) → Young(Fiona)) ::: If Fiona is kind then Fiona is young.\n∀x (Blue(x) → Red(x)) ::: All blue things are red.\n∀x (Smart(x) → Quiet(x)) ::: If something is smart then it is quiet.\n∀x (Red(Fiona) → Quiet(Fiona)) ::: If Fiona is red then Fiona is quiet.\nConclusion:\n¬Smart(Anne) ::: Anne is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-221",
    "context": "Anne is white. If Anne is red then Anne is rough. All blue, white things are cold. If Anne is white then Anne is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is white.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite(x) ::: x is white.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nPremises:\nWhite(Anne) ::: Anne is white.\n∀x ((Red(x) → Rough(x))) ::: If Anne is red then Anne is rough.\n∀x ((Blue(x) ∧ White(x)) → Cold(x)) ::: All blue, white things are cold.\n∀x ((White(x) → Red(x))) ::: If Anne is white then Anne is red.\nConclusion:\nWhite(Anne) ::: Anne is white."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1144",
    "context": "Anne is blue. Anne is cold. Anne is furry. Anne is green. Charlie is big. Charlie is blue. Charlie is furry. If Anne is kind then Anne is blue. Cold things are big. All furry things are nice. If Anne is furry then Anne is nice. If something is cold and blue then it is furry. All green, kind things are furry. If something is blue and not cold then it is furry. Nice things are not kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nPremises:\nBlue(Anne) ::: Anne is blue.\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nGreen(Anne) ::: Anne is green.\nBig(Charlie) ::: Charlie is big.\nBlue(Charlie) ::: Charlie is blue.\nFurry(Charlie) ::: Charlie is furry.\n∀x (Kind(x) → Blue(x)) ::: If Anne is kind then Anne is blue.\n∀x (Cold(x) → Big(x)) ::: Cold things are big.\n∀x (Furry(x) → Nice(x)) ::: All furry things are nice.\n∀x (Furry(x) → Nice(x)) ::: If Anne is furry then Anne is nice.\n∀x ((Cold(x) ∧ Blue(x)) → Furry(x)) ::: If something is cold and blue then it is furry.\n∀x ((Green(x) ∧ Kind(x)) → Furry(x)) ::: All green, kind things are furry.\n∀x ((Blue(x) ∧ ¬Cold(x)) → Furry(x)) ::: If something is blue and not cold then it is furry.\n∀x (Nice(x) → ¬Kind(x)) ::: Nice things are not kind.\nConclusion:\n¬Furry(Anne) ::: Anne is not furry."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1198",
    "context": "The bear chases the cow. The bear is big. The bear likes the rabbit. The cow is big. The cow needs the mouse. The mouse is round. The mouse does not like the bear. The mouse needs the cow. The mouse needs the rabbit. The rabbit is young. If something likes the bear then it is not big. If something likes the mouse then it is green. If something needs the mouse then it likes the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nBig(x) ::: x is big.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nPremises:\nChases(bear, cow) ::: The bear chases the cow.\nBig(bear) ::: The bear is big.\nLikes(bear, rabbit) ::: The bear likes the rabbit.\nBig(cow) ::: The cow is big.\nNeeds(cow, mouse) ::: The cow needs the mouse.\nRound(mouse) ::: The mouse is round.\n¬Likes(mouse, bear) ::: The mouse does not like the bear.\nNeeds(mouse, cow) ::: The mouse needs the cow.\nNeeds(mouse, rabbit) ::: The mouse needs the rabbit.\nYoung(rabbit) ::: The rabbit is young.\n∀x (Likes(x, bear) → ¬Big(x)) ::: If something likes the bear then it is not big.\n∀x (Likes(x, mouse) → Green(x)) ::: If something likes the mouse then it is green.\n∀x (Needs(x, mouse) → Likes(x, mouse)) ::: If something needs the mouse then it likes the mouse.\nConclusion:\n¬Green(rabbit) ::: The rabbit is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-634",
    "context": "The bald eagle likes the bear. The bear needs the bald eagle. The cow needs the bald eagle. If something likes the bald eagle and the bald eagle sees the bear then the bald eagle is big. If something likes the bald eagle and it needs the bald eagle then it sees the bald eagle. If something likes the bear then the bear likes the bald eagle. If something likes the bear and it sees the bear then the bear sees the cow. If something sees the bald eagle and the bald eagle likes the bear then the bear needs the bald eagle. If something is young and it sees the bear then it sees the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear needs the bald eagle.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nBig(x) ::: x is big.\nYoung(x) ::: x is young.\nBaldEagle(x) ::: x is a bald eagle.\nBear(x) ::: x is a bear.\nCow(x) ::: x is a cow.\nPremises:\nLikes(BaldEagle, Bear) ::: The bald eagle likes the bear.\nNeeds(Bear, BaldEagle) ::: The bear needs the bald eagle.\nNeeds(Cow, BaldEagle) ::: The cow needs the bald eagle.\n∀x ((Likes(x, BaldEagle) ∧ Sees(BaldEagle, Bear)) → Big(BaldEagle)) ::: If something likes the bald eagle and the bald eagle sees the bear then the bald eagle is big.\n∀x ((Likes(x, BaldEagle) ∧ Needs(x, BaldEagle)) → Sees(x, BaldEagle)) ::: If something likes the bald eagle and it needs the bald eagle then it sees the bald eagle.\n∀x (Likes(x, Bear) → Likes(Bear, BaldEagle)) ::: If something likes the bear then the bear likes the bald eagle.\n∀x ((Likes(x, Bear) ∧ Sees(x, Bear)) → Sees(Bear, Cow)) ::: If something likes the bear and it sees the bear then the bear sees the cow.\n∀x ((Sees(x, BaldEagle) ∧ Likes(BaldEagle, Bear)) → Needs(Bear, BaldEagle)) ::: If something sees the bald eagle and the bald eagle likes the bear then the bear needs the bald eagle.\n∀x ((Young(x) ∧ Sees(x, Bear)) → Sees(x, Cow)) ::: If something is young and it sees the bear then it sees the cow.\nConclusion:\nNeeds(Bear, BaldEagle) ::: The bear needs the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-287",
    "context": "Bob is big. Bob is blue. Bob is not white. Dave is smart. Gary is not kind. Harry is not big. Harry is rough. Rough things are round. If something is blue and not smart then it is rough. All round things are kind. If Harry is kind and Harry is not round then Harry is not big. If something is white and not rough then it is not big. If something is kind and not smart then it is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nPremises:\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\n¬White(Bob) ::: Bob is not white.\nSmart(Dave) ::: Dave is smart.\n¬Kind(Gary) ::: Gary is not kind.\n¬Big(Harry) ::: Harry is not big.\nRough(Harry) ::: Harry is rough.\n∀x ((Blue(x) ∧ ¬Smart(x)) → Rough(x)) ::: If something is blue and not smart then it is rough.\n∀x (Round(x) → Kind(x)) ::: All round things are kind.\n∀x ((Kind(Harry) ∧ ¬Round(Harry)) → ¬Big(Harry)) ::: If Harry is kind and Harry is not round then Harry is not big.\n∀x ((White(x) ∧ ¬Rough(x)) → ¬Big(x)) ::: If something is white and not rough then it is not big.\n∀x ((Kind(x) ∧ ¬Smart(x)) → Big(x)) ::: If something is kind and not smart then it is big.\nConclusion:\n¬Smart(Dave) ::: Dave is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1621",
    "context": "Charlie is nice. Charlie is quiet. Charlie is red. Charlie is smart. Harry is furry. Harry is quiet. Harry is red. Quiet people are nice. All furry, quiet people are smart. If Charlie is furry and Charlie is white then Charlie is rough. If Harry is red then Harry is quiet. All nice, quiet people are rough. If someone is nice and quiet then they are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not rough.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nRough(x) ::: x is rough.\nPremises:\nNice(Charlie) ::: Charlie is nice.\nQuiet(Charlie) ::: Charlie is quiet.\nRed(Charlie) ::: Charlie is red.\nSmart(Charlie) ::: Charlie is smart.\nFurry(Harry) ::: Harry is furry.\nQuiet(Harry) ::: Harry is quiet.\nRed(Harry) ::: Harry is red.\n∀x ((Quiet(x)) → Nice(x)) ::: Quiet people are nice.\n∀x ((Furry(x) ∧ Quiet(x)) → Smart(x)) ::: All furry, quiet people are smart.\n∀x ((Charlie is furry) ∧ (Charlie is white) → Rough(Charlie)) ::: If Charlie is furry and Charlie is white then Charlie is rough.\n∀x (Red(x) → Quiet(x)) ::: If Harry is red then Harry is quiet.\n∀x ((Nice(x) ∧ Quiet(x)) → White(x)) ::: All nice, quiet people are white.\nConclusion:\n¬Rough(Harry) ::: Harry is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-43",
    "context": "Bob is blue. Bob is kind. Bob is nice. Bob is red. Bob is white. Gary is blue. Gary is kind. Gary is nice. Gary is red. Gary is round. Gary is white. Gary is young. Kind, white things are round. If something is nice then it is round. All round things are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nPremises:\nBlue(Bob) ::: Bob is blue.\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\nRed(Bob) ::: Bob is red.\nWhite(Bob) ::: Bob is white.\nBlue(Gary) ::: Gary is blue.\nKind(Gary) ::: Gary is kind.\nNice(Gary) ::: Gary is nice.\nRed(Gary) ::: Gary is red.\nRound(Gary) ::: Gary is round.\nWhite(Gary) ::: Gary is white.\nYoung(Gary) ::: Gary is young.\n∀x ((Kind(x) ∧ White(x)) → Round(x)) ::: Kind, white things are round.\n∀x (Nice(x) → Round(x)) ::: If something is nice then it is round.\n∀x (Round(x) → Young(x)) ::: All round things are young.\nConclusion:\nYoung(Gary) ::: Gary is young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1662",
    "context": "The bald eagle eats the rabbit. The mouse is young. The rabbit is big. If someone visits the mouse and they eat the mouse then the mouse likes the rabbit. If the mouse is green then the mouse likes the rabbit. If the bald eagle visits the rabbit and the bald eagle visits the mouse then the rabbit likes the bald eagle. If someone likes the rabbit then they visit the bald eagle. If someone eats the bald eagle then they visit the mouse. If someone eats the rabbit then they like the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is not young.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nVisits(x, y) ::: x visits y.\nLikes(x, y) ::: x likes y.\nGreen(x) ::: x is green.\nConclusion:\n¬Young(Mouse) ::: The mouse is not young.\nPremises:\nEats(BaldEagle, Rabbit) ::: The bald eagle eats the rabbit.\nYoung(Mouse) ::: The mouse is young.\nBig(Rabbit) ::: The rabbit is big.\n∀x ((Visits(x, Mouse) ∧ Eats(x, Mouse)) → Likes(Mouse, Rabbit)) ::: If someone visits the mouse and they eat the mouse then the mouse likes the rabbit.\nGreen(Mouse) → Likes(Mouse, Rabbit) ::: If the mouse is green then the mouse likes the rabbit.\n∀x ((Visits(BaldEagle, Rabbit) ∧ Visits(BaldEagle, Mouse)) → Likes(Rabbit, BaldEagle)) ::: If the bald eagle visits the rabbit and the bald eagle visits the mouse then the rabbit likes the bald eagle.\n∀x (Likes(x, Rabbit) → Visits(x, BaldEagle)) ::: If someone likes the rabbit then they visit the bald eagle.\n∀x (Eats(x, BaldEagle) → Visits(x, Mouse)) ::: If someone eats the bald eagle then they visit the mouse.\n∀x (Eats(x, Rabbit) → Likes(x, Rabbit)) ::: If someone eats the rabbit then they like the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-342",
    "context": "Bob is cold. Bob is nice. Bob is red. Bob is round. Bob is smart. Bob is not white. Erin is nice. Erin is red. Erin is smart. Fiona is furry. Fiona is nice. Fiona is round. Fiona is white. Harry is cold. Harry is red. Harry is smart. Nice people are round. If Fiona is round then Fiona is cold. All round, cold people are nice. If someone is round and not nice then they are white. All round, red people are not white. If someone is nice and not white then they are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nPremises:\nCold(Bob) ::: Bob is cold.\nNice(Bob) ::: Bob is nice.\nRed(Bob) ::: Bob is red.\nRound(Bob) ::: Bob is round.\nSmart(Bob) ::: Bob is smart.\n¬White(Bob) ::: Bob is not white.\nNice(Erin) ::: Erin is nice.\nRed(Erin) ::: Erin is red.\nSmart(Erin) ::: Erin is smart.\nFurry(Fiona) ::: Fiona is furry.\nNice(Fiona) ::: Fiona is nice.\nRound(Fiona) ::: Fiona is round.\nWhite(Fiona) ::: Fiona is white.\nCold(Harry) ::: Harry is cold.\nRed(Harry) ::: Harry is red.\nSmart(Harry) ::: Harry is smart.\n∀x (Nice(x) → Round(x)) ::: Nice people are round.\n∀x ((Round(x) → Cold(x)) ::: If Fiona is round then Fiona is cold.\n∀x ((Round(x) ∧ Cold(x)) → Nice(x)) ::: All round, cold people are nice.\n∀x ((Round(x) ∧ ¬Nice(x)) → White(x)) ::: If someone is round and not nice then they are white.\n∀x ((Round(x) ∧ Red(x)) → ¬White(x)) ::: All round, red people are not white.\n∀x ((Nice(x) ∧ ¬White(x)) → Furry(x)) ::: If someone is nice and not white then they are furry.\nConclusion:\n¬Round(Harry) ::: Harry is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1576",
    "context": "Charlie is blue. Harry is green. All big, kind things are blue. Green, blue things are red. Furry, quiet things are blue. All furry things are green. If something is big and furry then it is green. Kind things are furry. If something is furry and quiet then it is blue. All blue things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nPremises:\nBlue(Charlie) ::: Charlie is blue.\nGreen(Harry) ::: Harry is green.\n∀x ((Big(x) ∧ Kind(x)) → Blue(x)) ::: All big, kind things are blue.\n∀x ((Green(x) ∧ Blue(x)) → Red(x)) ::: Green, blue things are red.\n∀x ((Furry(x) ∧ Quiet(x)) → Blue(x)) ::: Furry, quiet things are blue.\n∀x (Furry(x) → Green(x)) ::: All furry things are green.\n∀x ((Big(x) ∧ Furry(x)) → Green(x)) ::: If something is big and furry then it is green.\n∀x (Kind(x) → Furry(x)) ::: Kind things are furry.\n∀x ((Furry(x) ∧ Quiet(x)) → Blue(x)) ::: If something is furry and quiet then it is blue.\n∀x (Blue(x) → Kind(x)) ::: All blue things are kind.\nConclusion:\nGreen(Harry) ::: Harry is green."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-901",
    "context": "The squirrel is cold. The squirrel is nice. The squirrel is round. If someone is nice then they are big. Rough, round people are not big. If the squirrel is big then the squirrel is not rough. Nice people are round. If the squirrel is rough then the squirrel is big. If someone is nice and not round then they are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nPremises:\nCold(squirrel) ::: The squirrel is cold.\nNice(squirrel) ::: The squirrel is nice.\nRound(squirrel) ::: The squirrel is round.\n∀x (Nice(x) → Big(x)) ::: If someone is nice then they are big.\n∀x ((Rough(x) ∧ Round(x)) → ¬Big(x)) ::: Rough, round people are not big.\n∀x (Big(x) → ¬Rough(x)) ::: If the squirrel is big then the squirrel is not rough.\n∀x (Nice(x) → Round(x)) ::: Nice people are round.\n∀x (Rough(x) → Big(x)) ::: If the squirrel is rough then the squirrel is big.\n∀x ((Nice(x) ∧ ¬Round(x)) → Cold(x)) ::: If someone is nice and not round then they are cold.\nConclusion:\n¬Round(squirrel) ::: The squirrel is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1162",
    "context": "The cow chases the mouse. The cow is big. The cow is blue. The cow is cold. The cow is green. The cow is young. The cow likes the mouse. The cow sees the mouse. The mouse chases the cow. The mouse is big. The mouse is blue. The mouse is cold. The mouse is green. The mouse is young. The mouse likes the cow. The mouse sees the cow. If something is blue then it chases the mouse. If something is young and it chases the mouse then it sees the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow does not chase the cow.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nPremises:\nChases(Cow, Mouse) ::: The cow chases the mouse.\nBig(Cow) ::: The cow is big.\nBlue(Cow) ::: The cow is blue.\nCold(Cow) ::: The cow is cold.\nGreen(Cow) ::: The cow is green.\nYoung(Cow) ::: The cow is young.\nLikes(Cow, Mouse) ::: The cow likes the mouse.\nSees(Cow, Mouse) ::: The cow sees the mouse.\nChases(Mouse, Cow) ::: The mouse chases the cow.\nBig(Mouse) ::: The mouse is big.\nBlue(Mouse) ::: The mouse is blue.\nCold(Mouse) ::: The mouse is cold.\nGreen(Mouse) ::: The mouse is green.\nYoung(Mouse) ::: The mouse is young.\nLikes(Mouse, Cow) ::: The mouse likes the cow.\nSees(Mouse, Cow) ::: The mouse sees the cow.\n∀x (Blue(x) → Chases(x, Mouse)) ::: If something is blue then it chases the mouse.\n∀x ((Young(x) ∧ Chases(x, Mouse)) → Sees(x, Mouse)) ::: If something is young and it chases the mouse then it sees the mouse.\nConclusion:\n¬Chases(Cow, Cow) ::: The cow does not chase the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-322",
    "context": "The bald eagle is young. The bald eagle needs the lion. The cow likes the lion. The cow needs the lion. The cow needs the squirrel. The lion is kind. The squirrel is nice. If someone likes the bald eagle then the bald eagle needs the squirrel. If someone is kind then they are blue. If someone needs the lion and the lion is blue then they see the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nLikes(x, y) ::: x likes y.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nSee(x, y) ::: x sees y.\nPremises:\nYoung(bald eagle) ::: The bald eagle is young.\nNeeds(bald eagle, lion) ::: The bald eagle needs the lion.\nLikes(cow, lion) ::: The cow likes the lion.\nNeeds(cow, lion) ::: The cow needs the lion.\nNeeds(cow, squirrel) ::: The cow needs the squirrel.\nKind(lion) ::: The lion is kind.\nNice(squirrel) ::: The squirrel is nice.\n∀x∀y (Likes(x, bald eagle) → Needs(bald eagle, squirrel)) ::: If someone likes the bald eagle then the bald eagle needs the squirrel.\n∀x (Kind(x) → Blue(x)) ::: If someone is kind then they are blue.\n∀x∀y ((Needs(x, lion) ∧ Blue(lion)) → See(x, bald eagle)) ::: If someone needs the lion and the lion is blue then they see the bald eagle.\nConclusion:\nYoung(bald eagle) ::: The bald eagle is young."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-777",
    "context": "The cow is blue. The cow is green. The cow is round. All green, red people are young. Green, round people are red. If the cow is young then the cow is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nCow(x) ::: x is a cow.\nPremises:\nBlue(cow) ::: The cow is blue.\nGreen(cow) ::: The cow is green.\nRound(cow) ::: The cow is round.\n∀x ((Green(x) ∧ Red(x)) → Young(x)) ::: All green, red people are young.\n∀x ((Green(x) ∧ Round(x)) → Red(x)) ::: Green, round people are red.\n∀x (Young(cow) → Round(cow)) ::: If the cow is young then the cow is round.\nConclusion:\n¬Blue(cow) ::: The cow is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1486",
    "context": "Anne is white. Dave is kind. Fiona is kind. If something is white then it is smart. If something is smart then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nPremises:\nWhite(Anne) ::: Anne is white.\nKind(Dave) ::: Dave is kind.\nKind(Fiona) ::: Fiona is kind.\n∀x (White(x) → Smart(x)) ::: If something is white then it is smart.\n∀x (Smart(x) → Blue(x)) ::: If something is smart then it is blue.\nConclusion:\n¬Blue(Fiona) ::: Fiona is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-324",
    "context": "The bald eagle eats the cat. The bald eagle eats the tiger. The bald eagle needs the tiger. The bald eagle sees the mouse. The cat is green. The cat is kind. The cat is young. The cat needs the bald eagle. The mouse does not eat the cat. The mouse is kind. The mouse is round. The mouse needs the cat. The tiger eats the bald eagle. The tiger needs the mouse. The tiger sees the cat. If the bald eagle is round and the bald eagle sees the mouse then the mouse sees the tiger. If something eats the cat then it is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse needs the cat.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nPremises:\nEats(bald eagle, cat) ::: The bald eagle eats the cat.\nEats(bald eagle, tiger) ::: The bald eagle eats the tiger.\nNeeds(bald eagle, tiger) ::: The bald eagle needs the tiger.\nSees(bald eagle, mouse) ::: The bald eagle sees the mouse.\nGreen(cat) ::: The cat is green.\nKind(cat) ::: The cat is kind.\nYoung(cat) ::: The cat is young.\nNeeds(cat, bald eagle) ::: The cat needs the bald eagle.\n¬Eats(mouse, cat) ::: The mouse does not eat the cat.\nKind(mouse) ::: The mouse is kind.\nRound(mouse) ::: The mouse is round.\nNeeds(mouse, cat) ::: The mouse needs the cat.\nEats(tiger, bald eagle) ::: The tiger eats the bald eagle.\nNeeds(tiger, mouse) ::: The tiger needs the mouse.\nSees(tiger, cat) ::: The tiger sees the cat.\n∀x ((Round(x) ∧ Sees(x, mouse)) → Sees(mouse, tiger)) ::: If the bald eagle is round and the bald eagle sees the mouse then the mouse sees the tiger.\n∀x (Eats(x, cat) → Round(x)) ::: If something eats the cat then it is round.\nConclusion:\nNeeds(mouse, cat) ::: The mouse needs the cat."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-2260",
    "context": "Anne is round. Bob is young. Erin is kind. Fiona is blue. If something is cold then it is young. Blue things are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nPremises:\nRound(Anne) ::: Anne is round.\nYoung(Bob) ::: Bob is young.\nKind(Erin) ::: Erin is kind.\nBlue(Fiona) ::: Fiona is blue.\n∀x (Cold(x) → Young(x)) ::: If something is cold then it is young.\n∀x (Blue(x) → Cold(x)) ::: Blue things are cold.\nConclusion:\n¬Kind(Erin) ::: Erin is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-347",
    "context": "Bob is blue. Bob is kind. Bob is nice. If Bob is nice and Bob is quiet then Bob is kind. All blue, nice people are green. Blue, quiet people are green. All green people are not furry. If someone is quiet and not nice then they are furry. If someone is nice and not kind then they are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nFurry(x) ::: x is furry.\nPremises:\nBlue(Bob) ::: Bob is blue.\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\n∀x ((Nice(x) ∧ Quiet(x)) → Kind(x)) ::: If Bob is nice and Bob is quiet then Bob is kind.\n∀x ((Blue(x) ∧ Nice(x)) → Green(x)) ::: All blue, nice people are green.\n∀x ((Blue(x) ∧ Quiet(x)) → Green(x)) ::: Blue, quiet people are green.\n∀x (Green(x) → ¬Furry(x)) ::: All green people are not furry.\n∀x ((Quiet(x) ∧ ¬Nice(x)) → Furry(x)) ::: If someone is quiet and not nice then they are furry.\n∀x ((Nice(x) ∧ ¬Kind(x)) → Blue(x)) ::: If someone is nice and not kind then they are blue.\nConclusion:\n¬Quiet(Bob) ::: Bob is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1421",
    "context": "The cat eats the tiger. The tiger chases the cat. The tiger likes the cat. If someone likes the cat then they eat the cat. If the cat likes the tiger and the cat does not eat the tiger then the tiger is rough. If someone eats the cat and the cat eats the tiger then the cat is not green. If someone is big and they do not like the tiger then the tiger chases the cat. If someone likes the tiger then the tiger is red. If someone likes the cat then the cat is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat eats the tiger.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nChases(x, y) ::: x chases y.\nLikes(x, y) ::: x likes y.\nRough(x) ::: x is rough.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nPremises:\nEats(Cat, Tiger) ::: The cat eats the tiger.\nChases(Tiger, Cat) ::: The tiger chases the cat.\nLikes(Tiger, Cat) ::: The tiger likes the cat.\n∀x (Likes(x, Cat) → Eats(x, Cat)) ::: If someone likes the cat then they eat the cat.\n∀x ((Likes(Cat, Tiger) ∧ ¬Eats(Cat, Tiger)) → Rough(Tiger)) ::: If the cat likes the tiger and the cat does not eat the tiger then the tiger is rough.\n∀x ((Eats(x, Cat) ∧ Eats(Cat, Tiger)) → ¬Green(Cat)) ::: If someone eats the cat and the cat eats the tiger then the cat is not green.\n∀x ((Big(x) ∧ ¬Likes(x, Tiger)) → Chases(Tiger, Cat)) ::: If someone is big and they do not like the tiger then the tiger chases the cat.\n∀x (Likes(x, Tiger) → Red(Tiger)) ::: If someone likes the tiger then the tiger is red.\n∀x (Likes(x, Cat) → Red(Cat)) ::: If someone likes the cat then the cat is red.\nConclusion:\nEats(Cat, Tiger) ::: The cat eats the tiger."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-987",
    "context": "Anne is big. Anne is not furry. Anne is young. Bob is furry. Bob is not green. Erin is big. Erin is green. Erin is nice. Erin is red. Erin is not young. Green things are big. All white things are young. If something is nice then it is furry. If something is white then it is nice. If Bob is furry then Bob is white. If something is furry and not nice then it is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nPremises:\nBig(Anne) ::: Anne is big.\n¬Furry(Anne) ::: Anne is not furry.\nYoung(Anne) ::: Anne is young.\nFurry(Bob) ::: Bob is furry.\n¬Green(Bob) ::: Bob is not green.\nBig(Erin) ::: Erin is big.\nGreen(Erin) ::: Erin is green.\nNice(Erin) ::: Erin is nice.\nRed(Erin) ::: Erin is red.\n¬Young(Erin) ::: Erin is not young.\n∀x ((Green(x)) → Big(x)) ::: Green things are big.\n∀x ((White(x)) → Young(x)) ::: All white things are young.\n∀x ((Nice(x)) → Furry(x)) ::: If something is nice then it is furry.\n∀x ((White(x)) → Nice(x)) ::: If something is white then it is nice.\n∀x ((Furry(x)) → White(x)) ::: If Bob is furry then Bob is white.\n∀x ((Furry(x) ∧ ¬Nice(x)) → Red(x)) ::: If something is furry and not nice then it is red.\nConclusion:\n¬Nice(Erin) ::: Erin is not nice."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1917",
    "context": "The bear eats the dog. The bear is green. The bear does not need the mouse. The cow chases the mouse. The dog chases the mouse. The mouse chases the bear. The mouse is blue. If someone eats the dog then the dog needs the cow. If someone needs the cow then the cow eats the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not chase the dog.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nNeeds(x, y) ::: x needs y.\nChases(x, y) ::: x chases y.\nBlue(x) ::: x is blue.\nPremises:\nEats(bear, dog) ::: The bear eats the dog.\nGreen(bear) ::: The bear is green.\n¬Needs(bear, mouse) ::: The bear does not need the mouse.\nChases(cow, mouse) ::: The cow chases the mouse.\nChases(dog, mouse) ::: The dog chases the mouse.\nChases(mouse, bear) ::: The mouse chases the bear.\nBlue(mouse) ::: The mouse is blue.\n∀x (Eats(x, dog) → Needs(dog, cow)) ::: If someone eats the dog then the dog needs the cow.\n∀x (Needs(x, cow) → Eats(cow, dog)) ::: If someone needs the cow then the cow eats the dog.\nConclusion:\n¬Chases(bear, dog) ::: The bear does not chase the dog."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1366",
    "context": "Bob is blue. Charlie is white. Harry is furry. Furry people are white. If Charlie is furry and Charlie is blue then Charlie is green. All white people are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nPremises:\nBlue(Bob) ::: Bob is blue.\nWhite(Charlie) ::: Charlie is white.\nFurry(Harry) ::: Harry is furry.\n∀x (Furry(x) → White(x)) ::: Furry people are white.\n∀x ((Furry(Charlie) ∧ Blue(Charlie)) → Green(Charlie)) ::: If Charlie is furry and blue then Charlie is green.\n∀x (White(x) → Green(x)) ::: All white people are green.\nConclusion:\nFurry(Harry) ::: Harry is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-303",
    "context": "The cow is young. The cow likes the lion. The cow visits the lion. The lion eats the cow. The lion is round. The lion likes the cow. The lion visits the cow. If someone eats the lion and they visit the cow then they are nice. If someone eats the cow then they visit the lion. If someone visits the cow and they visit the lion then they are red. If someone eats the lion and they like the lion then the lion eats the cow. If someone visits the cow then the cow is round. If the cow eats the lion and the cow visits the lion then the lion visits the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow does not like the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nEats(x, y) ::: x eats y.\nRound(x) ::: x is round.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nPremises:\nYoung(cow) ::: The cow is young.\nLikes(cow, lion) ::: The cow likes the lion.\nVisits(cow, lion) ::: The cow visits the lion.\nEats(lion, cow) ::: The lion eats the cow.\nRound(lion) ::: The lion is round.\nLikes(lion, cow) ::: The lion likes the cow.\nVisits(lion, cow) ::: The lion visits the cow.\n∀x ((Eats(x, lion) ∧ Visits(x, cow)) → Nice(x)) ::: If someone eats the lion and they visit the cow then they are nice.\n∀x (Eats(x, cow) → Visits(x, lion)) ::: If someone eats the cow then they visit the lion.\n∀x ((Visits(x, cow) ∧ Visits(x, lion)) → Red(x)) ::: If someone visits the cow and they visit the lion then they are red.\n∀x ((Eats(x, lion) ∧ Likes(x, lion)) → Eats(lion, cow)) ::: If someone eats the lion and they like the lion then the lion eats the cow.\n∀x (Visits(x, cow) → Round(cow)) ::: If someone visits the cow then the cow is round.\n∀x ((Eats(cow, lion) ∧ Visits(cow, lion)) → Visits(lion, cow)) ::: If the cow eats the lion and the cow visits the lion then the lion visits the cow.\nConclusion:\n¬Likes(cow, lion) ::: The cow does not like the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-550",
    "context": "Charlie is big. Dave is round. Fiona is round. Harry is quiet. If someone is big and white then they are furry. If someone is big then they are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not white.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nPremises:\nBig(Charlie) ::: Charlie is big.\nRound(Dave) ::: Dave is round.\nRound(Fiona) ::: Fiona is round.\nQuiet(Harry) ::: Harry is quiet.\n∀x ((Big(x) ∧ White(x)) → Furry(x)) ::: If someone is big and white then they are furry.\n∀x (Big(x) → White(x)) ::: If someone is big then they are white.\nConclusion:\n¬White(Harry) ::: Harry is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-90",
    "context": "Charlie is rough. Dave is smart. Erin is smart. Fiona is rough. If someone is rough then they are red. If someone is red and not rough then they are smart. If someone is red then they are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is smart.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nPremises:\nRough(Charlie) ::: Charlie is rough.\nSmart(Dave) ::: Dave is smart.\nSmart(Erin) ::: Erin is smart.\nRough(Fiona) ::: Fiona is rough.\n∀x (Rough(x) → Red(x)) ::: If someone is rough then they are red.\n∀x ((Red(x) ∧ ¬Rough(x)) → Smart(x)) ::: If someone is red and not rough then they are smart.\n∀x (Red(x) → Blue(x)) ::: If someone is red then they are blue.\nConclusion:\nSmart(Dave) ::: Dave is smart."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-53",
    "context": "The lion does not chase the rabbit. The lion is green. The lion sees the rabbit. The rabbit chases the lion. The rabbit is green. The rabbit needs the lion. The rabbit sees the lion. If the rabbit needs the lion then the rabbit chases the lion. If something sees the rabbit and the rabbit sees the lion then it chases the lion. If something needs the lion then the lion needs the rabbit. All nice things are red. If something is young then it needs the rabbit. If something needs the rabbit then it needs the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion chases the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChase(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nSee(x, y) ::: x sees y.\nNeed(x, y) ::: x needs y.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nPremises:\n¬Chase(lion, rabbit) ::: The lion does not chase the rabbit.\nGreen(lion) ::: The lion is green.\nSee(lion, rabbit) ::: The lion sees the rabbit.\nChase(rabbit, lion) ::: The rabbit chases the lion.\nGreen(rabbit) ::: The rabbit is green.\nNeed(rabbit, lion) ::: The rabbit needs the lion.\nSee(rabbit, lion) ::: The rabbit sees the lion.\n∀x ((Need(x, lion) → Chase(x, lion))) ::: If the rabbit needs the lion then the rabbit chases the lion.\n∀x ∃y ∃z ((See(x, rabbit) ∧ See(rabbit, z)) → Chase(z, rabbit)) ::: If something sees the rabbit and the rabbit sees the lion then it chases the lion.\n∀x (Need(x, lion) → Need(lion, x)) ::: If something needs the lion then the lion needs the rabbit.\n∀x (Nice(x) → Red(x)) ::: All nice things are red.\n∀x (Young(x) → Need(x, rabbit)) ::: If something is young then it needs the rabbit.\n∀x (Need(x, rabbit) → Need(x, lion)) ::: If something needs the rabbit then it needs the lion.\nConclusion:\nChase(lion, rabbit) ::: The lion chases the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2133",
    "context": "Anne is cold. Anne is furry. Anne is kind. Anne is white. Anne is young. Charlie is furry. Charlie is kind. Charlie is white. Charlie is young. Dave is furry. Dave is kind. Dave is nice. Dave is smart. Dave is white. Dave is young. Erin is nice. Kind people are cold. If someone is kind and cold then they are smart. Young, white people are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nPremises:\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nKind(Anne) ::: Anne is kind.\nWhite(Anne) ::: Anne is white.\nYoung(Anne) ::: Anne is young.\nFurry(Charlie) ::: Charlie is furry.\nKind(Charlie) ::: Charlie is kind.\nWhite(Charlie) ::: Charlie is white.\nYoung(Charlie) ::: Charlie is young.\nFurry(Dave) ::: Dave is furry.\nKind(Dave) ::: Dave is kind.\nNice(Dave) ::: Dave is nice.\nSmart(Dave) ::: Dave is smart.\nWhite(Dave) ::: Dave is white.\nYoung(Dave) ::: Dave is young.\nNice(Erin) ::: Erin is nice.\n∀x (Kind(x) → Cold(x)) ::: Kind people are cold.\n∀x ((Kind(x) ∧ Cold(x)) → Smart(x)) ::: If someone is kind and cold then they are smart.\n∀x ((Young(x) ∧ White(x)) → Nice(x)) ::: Young, white people are nice.\nConclusion:\n¬Cold(Erin) ::: Erin is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1820",
    "context": "Bob is furry. Charlie is big. Harry is not quiet. If someone is young and furry then they are rough. Round people are rough. If someone is big then they are not green. Green people are furry. If someone is round and not quiet then they are not big. If someone is furry then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nPremises:\nFurry(Bob) ::: Bob is furry.\nBig(Charlie) ::: Charlie is big.\n¬Quiet(Harry) ::: Harry is not quiet.\n∀x ((Young(x) ∧ Furry(x)) → Rough(x)) ::: If someone is young and furry then they are rough.\n∀x (Round(x) → Rough(x)) ::: Round people are rough.\n∀x (Big(x) → ¬Green(x)) ::: If someone is big then they are not green.\n∀x (Green(x) → Furry(x)) ::: Green people are furry.\n∀x ((Round(x) ∧ ¬Quiet(x)) → ¬Big(x)) ::: If someone is round and not quiet then they are not big.\n∀x (Furry(x) → Round(x)) ::: If someone is furry then they are round.\nConclusion:\nBig(Charlie) ::: Charlie is big."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1745",
    "context": "The bald eagle is kind. The bear visits the bald eagle. The rabbit likes the squirrel. The squirrel is cold. If someone eats the rabbit and they are young then the rabbit visits the bald eagle. If someone is kind then they like the bald eagle. If someone is kind then they like the bear. If someone likes the bald eagle then the bald eagle visits the bear. If the squirrel visits the bald eagle then the bald eagle is blue. If someone eats the squirrel and they are blue then they visit the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is not cold.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nVisits(x, y) ::: x visits y.\nLikes(x, y) ::: x likes y.\nCold(x) ::: x is cold.\nEats(x, y) ::: x eats y.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nKind(bald eagle) ::: The bald eagle is kind.\nVisits(bear, bald eagle) ::: The bear visits the bald eagle.\nLikes(rabbit, squirrel) ::: The rabbit likes the squirrel.\nCold(squirrel) ::: The squirrel is cold.\n∀x ((Eats(x, rabbit) ∧ Young(x)) → Visits(rabbit, bald eagle)) ::: If someone eats the rabbit and they are young then the rabbit visits the bald eagle.\n∀x (Kind(x) → Likes(x, bald eagle)) ::: If someone is kind then they like the bald eagle.\n∀x (Kind(x) → Likes(x, bear)) ::: If someone is kind then they like the bear.\n∀x (Likes(x, bald eagle) → Visits(bald eagle, bear)) ::: If someone likes the bald eagle then the bald eagle visits the bear.\n∀x (Visits(squirrel, bald eagle) → Blue(bald eagle)) ::: If the squirrel visits the bald eagle then the bald eagle is blue.\n∀x ((Eats(x, squirrel) ∧ Blue(x)) → Visits(x, rabbit)) ::: If someone eats the squirrel and they are blue then they visit the rabbit.\nConclusion:\n¬Cold(squirrel) ::: The squirrel is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1859",
    "context": "The bear is not round. The cow needs the bear. The dog is green. The squirrel visits the bear. If something sees the squirrel then it needs the dog. If something visits the bear then it visits the dog. If something is nice and it visits the squirrel then it sees the bear. If the dog is green then the dog visits the bear. If something needs the bear and the bear is not nice then the bear does not visit the cow. If something is nice and it does not visit the bear then it needs the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not need the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nVisits(x, y) ::: x visits y.\nSees(x, y) ::: x sees y.\nNice(x) ::: x is nice.\nPremises:\n¬Round(bear) ::: The bear is not round.\nNeeds(cow, bear) ::: The cow needs the bear.\nGreen(dog) ::: The dog is green.\nVisits(squirrel, bear) ::: The squirrel visits the bear.\n∀x ((Sees(x, squirrel)) → Needs(x, dog)) ::: If something sees the squirrel then it needs the dog.\n∀x ((Visits(x, bear)) → Visits(x, dog)) ::: If something visits the bear then it visits the dog.\n∀x ((Nice(x) ∧ Visits(x, squirrel)) → Sees(x, bear)) ::: If something is nice and it visits the squirrel then it sees the bear.\n∀x (Green(dog) → Visits(dog, bear)) ::: If the dog is green then the dog visits the bear.\n∀x ((Needs(x, bear) ∧ ¬Nice(bear)) → ¬Visits(bear, cow)) ::: If something needs the bear and the bear is not nice then the bear does not visit the cow.\n∀x ((Nice(x) ∧ ¬Visits(x, bear)) → Needs(x, bear)) ::: If something is nice and it does not visit the bear then it needs the bear.\nConclusion:\n¬Needs(bear, bear) ::: The bear does not need the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2152",
    "context": "Charlie is big. Charlie is kind. Erin is smart. Round, green people are big. All big, smart people are white. All smart people are big. If Charlie is smart and Charlie is nice then Charlie is white. Smart people are green. If someone is round then they are nice. Big people are white. If Charlie is kind then Charlie is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is smart.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nPremises:\nBig(Charlie) ::: Charlie is big.\nKind(Charlie) ::: Charlie is kind.\nSmart(Erin) ::: Erin is smart.\n∀x ((Round(x) ∧ Green(x)) → Big(x)) ::: Round, green people are big.\n∀x ((Big(x) ∧ Smart(x)) → White(x)) ::: All big, smart people are white.\n∀x (Smart(x) → Big(x)) ::: All smart people are big.\n∀x ((Smart(Charlie) ∧ Kind(Charlie)) → White(Charlie)) ::: If Charlie is smart and Charlie is nice then Charlie is white.\n∀x (Smart(x) → Green(x)) ::: Smart people are green.\n∀x (Round(x) → Kind(x)) ::: If someone is round then they are nice.\n∀x (Big(x) → White(x)) ::: Big people are white.\n∀x (Kind(Charlie) → White(Charlie)) ::: If Charlie is kind then Charlie is white.\nConclusion:\nSmart(Erin) ::: Erin is smart."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-74",
    "context": "The bald eagle does not eat the lion. The bald eagle does not see the mouse. The bald eagle visits the bear. The bald eagle visits the lion. The bear eats the mouse. The bear is cold. The lion does not eat the bald eagle. The lion visits the bear. The mouse eats the bear. The mouse does not see the lion. If the mouse sees the bald eagle then the mouse sees the lion. If someone eats the bald eagle then they visit the mouse. If someone sees the bear and they visit the bald eagle then the bear is cold. If the lion is kind then the lion eats the bald eagle. If someone visits the bear then the bear eats the bald eagle. If someone is young and they eat the mouse then the mouse sees the bear. If someone visits the bald eagle then the bald eagle does not eat the lion. If someone is young and they do not eat the bald eagle then the bald eagle does not see the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle eats the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEat(x, y) ::: x eats y.\nSee(x, y) ::: x sees y.\nVisit(x, y) ::: x visits y.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBaldEagle(x) ::: x is a bald eagle.\nLion(x) ::: x is a lion.\nBear(x) ::: x is a bear.\nMouse(x) ::: x is a mouse.\nPremises:\n¬Eat(BaldEagle, Lion) ::: The bald eagle does not eat the lion.\n¬See(BaldEagle, Mouse) ::: The bald eagle does not see the mouse.\nVisit(BaldEagle, Bear) ::: The bald eagle visits the bear.\nVisit(BaldEagle, Lion) ::: The bald eagle visits the lion.\nEat(Bear, Mouse) ::: The bear eats the mouse.\nCold(Bear) ::: The bear is cold.\n¬Eat(Lion, BaldEagle) ::: The lion does not eat the bald eagle.\nVisit(Lion, Bear) ::: The lion visits the bear.\nEat(Mouse, Bear) ::: The mouse eats the bear.\n¬See(Mouse, Lion) ::: The mouse does not see the lion.\n∀x ((See(x, BaldEagle) → See(x, Lion))) ::: If the mouse sees the bald eagle then the mouse sees the lion.\n∀x ((Eat(x, BaldEagle) → Visit(x, Mouse))) ::: If someone eats the bald eagle then they visit the mouse.\n∀x ((See(x, Bear) ∧ Visit(x, BaldEagle)) → Cold(Bear)) ::: If someone sees the bear and they visit the bald eagle then the bear is cold.\n∀x (Kind(Lion) → Eat(Lion, BaldEagle)) ::: If the lion is kind then the lion eats the bald eagle.\n∀x (Visit(x, Bear) → Eat(x, BaldEagle)) ::: If someone visits the bear then the bear eats the bald eagle.\n∀x ((Young(x) ∧ Eat(x, Mouse)) → See(Mouse, Bear)) ::: If someone is young and they eat the mouse then the mouse sees the bear.\n∀x (Visit(x, BaldEagle) → ¬Eat(BaldEagle, Lion)) ::: If someone visits the bald eagle then the bald eagle does not eat the lion.\n∀x ((Young(x) ∧ ¬Eat(x, BaldEagle)) → ¬See(BaldEagle, Lion)) ::: If someone is young and they do not eat the bald eagle then the bald eagle does not see the lion.\nConclusion:\nEat(BaldEagle, Lion) ::: The bald eagle eats the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1303",
    "context": "The bald eagle chases the rabbit. The bald eagle is round. The bald eagle needs the rabbit. The cat is nice. The rabbit visits the squirrel. The squirrel visits the bald eagle. The squirrel visits the rabbit. If something needs the bald eagle and it is round then the bald eagle does not need the rabbit. If something is blue then it chases the bald eagle. If something visits the bald eagle then the bald eagle is blue. If something visits the cat then the cat visits the bald eagle. If something visits the rabbit and it is not green then the rabbit needs the bald eagle. If the bald eagle does not need the rabbit then the rabbit visits the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not chase the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nNice(x) ::: x is nice.\nVisits(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nPremises:\nChases(BaldEagle, Rabbit) ::: The bald eagle chases the rabbit.\nRound(BaldEagle) ::: The bald eagle is round.\nNeeds(BaldEagle, Rabbit) ::: The bald eagle needs the rabbit.\nNice(Cat) ::: The cat is nice.\nVisits(Rabbit, Squirrel) ::: The rabbit visits the squirrel.\nVisits(Squirrel, BaldEagle) ::: The squirrel visits the bald eagle.\nVisits(Squirrel, Rabbit) ::: The squirrel visits the rabbit.\n∀x ((Needs(BaldEagle, x) ∧ Round(BaldEagle)) → ¬Needs(BaldEagle, Rabbit)) ::: If something needs the bald eagle and it is round then the bald eagle does not need the rabbit.\n∀x (Blue(x) → Chases(x, BaldEagle)) ::: If something is blue then it chases the bald eagle.\n∀x (Visits(x, BaldEagle) → Blue(BaldEagle)) ::: If something visits the bald eagle then the bald eagle is blue.\n∀x (Visits(x, Cat) → Visits(Cat, BaldEagle)) ::: If something visits the cat then the cat visits the bald eagle.\n∀x ((Visits(x, Rabbit) ∧ ¬Green(x)) → Needs(BaldEagle, Rabbit)) ::: If something visits the rabbit and it is not green then the rabbit needs the bald eagle.\n∀x (¬Needs(BaldEagle, Rabbit) → Visits(Rabbit, Squirrel)) ::: If the bald eagle does not need the rabbit then the rabbit visits the squirrel.\nConclusion:\n¬Chases(Cat, BaldEagle) ::: The cat does not chase the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1774",
    "context": "The cat is round. The cat visits the lion. The cat visits the mouse. The lion chases the cat. The lion chases the mouse. The lion is blue. The lion is cold. The lion is green. The lion is round. The lion needs the cat. The lion does not need the mouse. The lion does not visit the cat. The lion does not visit the mouse. The mouse chases the lion. The mouse is round. The mouse needs the lion. If someone chases the mouse and they do not need the mouse then they are red. If someone chases the lion then they do not chase the cat. If someone is red and they need the cat then the cat does not chase the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nVisits(x, y) ::: x visits y.\nChases(x, y) ::: x chases y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNeeds(x, y) ::: x needs y.\nRed(x) ::: x is red.\nPremises:\nRound(Cat) ::: The cat is round.\nVisits(Cat, Lion) ::: The cat visits the lion.\nVisits(Cat, Mouse) ::: The cat visits the mouse.\nChases(Lion, Cat) ::: The lion chases the cat.\nChases(Lion, Mouse) ::: The lion chases the mouse.\nBlue(Lion) ::: The lion is blue.\nCold(Lion) ::: The lion is cold.\nGreen(Lion) ::: The lion is green.\nRound(Lion) ::: The lion is round.\nNeeds(Lion, Cat) ::: The lion needs the cat.\n¬Needs(Lion, Mouse) ::: The lion does not need the mouse.\n¬Visits(Lion, Cat) ::: The lion does not visit the cat.\n¬Visits(Lion, Mouse) ::: The lion does not visit the mouse.\nChases(Mouse, Lion) ::: The mouse chases the lion.\nRound(Mouse) ::: The mouse is round.\nNeeds(Mouse, Lion) ::: The mouse needs the lion.\n∀x ((Chases(x, Mouse) ∧ ¬Needs(x, Mouse)) → Red(x)) ::: If someone chases the mouse and they do not need the mouse then they are red.\n∀x (Chases(x, Lion) → ¬Chases(x, Cat)) ::: If someone chases the lion then they do not chase the cat.\n∀x ((Red(x) ∧ Needs(x, Cat)) → ¬Chases(Cat, Mouse)) ::: If someone is red and they need the cat then the cat does not chase the mouse.\nConclusion:\nRound(Mouse) ::: The mouse is round."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1798",
    "context": "The mouse is rough. The mouse likes the rabbit. The mouse likes the tiger. The mouse does not need the rabbit. The rabbit does not chase the mouse. The rabbit chases the tiger. The rabbit is round. The rabbit likes the mouse. The rabbit does not like the tiger. The rabbit needs the tiger. The tiger chases the rabbit. The tiger is not rough. The tiger is round. The tiger likes the mouse. The tiger likes the rabbit. If someone likes the tiger and they are rough then the tiger is not rough. If someone chases the mouse then the mouse does not chase the rabbit. If someone needs the mouse and the mouse does not like the tiger then they are not rough. If someone needs the rabbit then the rabbit is not rough. If someone is big and round then they need the mouse. If someone is round and they chase the rabbit then they need the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not like the mouse.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nChase(x, y) ::: x chases y.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nPremises:\nRough(Mouse) ::: The mouse is rough.\nLikes(Mouse, Rabbit) ::: The mouse likes the rabbit.\nLikes(Mouse, Tiger) ::: The mouse likes the tiger.\n¬Needs(Mouse, Rabbit) ::: The mouse does not need the rabbit.\n¬Chase(Rabbit, Mouse) ::: The rabbit does not chase the mouse.\nChase(Rabbit, Tiger) ::: The rabbit chases the tiger.\nRound(Rabbit) ::: The rabbit is round.\nLikes(Rabbit, Mouse) ::: The rabbit likes the mouse.\n¬Likes(Rabbit, Tiger) ::: The rabbit does not like the tiger.\nNeeds(Rabbit, Tiger) ::: The rabbit needs the tiger.\nChase(Tiger, Rabbit) ::: The tiger chases the rabbit.\n¬Rough(Tiger) ::: The tiger is not rough.\nRound(Tiger) ::: The tiger is round.\nLikes(Tiger, Mouse) ::: The tiger likes the mouse.\nLikes(Tiger, Rabbit) ::: The tiger likes the rabbit.\n∀x ((Likes(x, Tiger) ∧ Rough(x)) → ¬Rough(Tiger)) ::: If someone likes the tiger and they are rough then the tiger is not rough.\n∀x (Chase(x, Mouse) → ¬Chase(Mouse, Rabbit)) ::: If someone chases the mouse then the mouse does not chase the rabbit.\n∀x ((Needs(x, Mouse) ∧ ¬Likes(Mouse, Tiger)) → ¬Rough(x)) ::: If someone needs the mouse and the mouse does not like the tiger then they are not rough.\n∀x (Needs(x, Rabbit) → ¬Rough(Rabbit)) ::: If someone needs the rabbit then the rabbit is not rough.\n∀x ((Big(x) ∧ Round(x)) → Needs(x, Mouse)) ::: If someone is big and round then they need the mouse.\n∀x ((Round(x) ∧ Chase(x, Rabbit)) → Needs(x, Rabbit)) ::: If someone is round and they chase the rabbit then they need the rabbit.\nConclusion:\n¬Likes(Tiger, Mouse) ::: The tiger does not like the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-547",
    "context": "Dave is young. Erin is smart. Gary is not young. Harry is white. Green things are nice. If something is young then it is not nice. If Gary is not young and Gary is not quiet then Gary is not white. If Erin is not green then Erin is quiet. If something is nice and not white then it is rough. If something is nice and not young then it is not rough. If Dave is white then Dave is not rough. If Dave is not nice then Dave is not rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nSmart(x) ::: x is smart.\nNotYoung(x) ::: x is not young.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nNotNice(x) ::: x is not nice.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nPremises:\nYoung(Dave) ::: Dave is young.\nSmart(Erin) ::: Erin is smart.\nNotYoung(Gary) ::: Gary is not young.\nWhite(Harry) ::: Harry is white.\n∀x (Green(x) → Nice(x)) ::: Green things are nice.\n∀x (Young(x) → ¬Nice(x)) ::: If something is young then it is not nice.\n∀x ((NotYoung(Gary) ∧ ¬Quiet(Gary)) → ¬White(Gary)) ::: If Gary is not young and Gary is not quiet then Gary is not white.\n∀x (¬Green(Erin) → Quiet(Erin)) ::: If Erin is not green then Erin is quiet.\n∀x ((Nice(x) ∧ NotWhite(x)) → Rough(x)) ::: If something is nice and not white then it is rough.\n∀x ((Nice(x) ∧ NotYoung(x)) → ¬Rough(x)) ::: If something is nice and not young then it is not rough.\n∀x (White(Dave) → ¬Rough(Dave)) ::: If Dave is white then Dave is not rough.\n∀x (NotNice(Dave) → ¬Rough(Dave)) ::: If Dave is not nice then Dave is not rough.\nConclusion:\n¬Rough(Harry) ::: Harry is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1612",
    "context": "Bob is furry. Bob is quiet. Bob is young. Young, nice things are rough. Young things are round. Furry, young things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nPremises:\nFurry(Bob) ::: Bob is furry.\nQuiet(Bob) ::: Bob is quiet.\nYoung(Bob) ::: Bob is young.\n∀x ((Young(x) ∧ Nice(x)) → Rough(x)) ::: Young, nice things are rough.\n∀x (Young(x) → Round(x)) ::: Young things are round.\n∀x ((Furry(x) ∧ Young(x)) → Nice(x)) ::: Furry, young things are nice.\nConclusion:\nQuiet(Bob) ::: Bob is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-87",
    "context": "The bald eagle is nice. The bald eagle is rough. The bald eagle is young. The bald eagle needs the rabbit. The bald eagle visits the rabbit. The rabbit is nice. The rabbit needs the tiger. The rabbit sees the bald eagle. The rabbit visits the tiger. The tiger is green. The tiger is nice. The tiger is rough. The tiger needs the rabbit. The tiger visits the bald eagle. The tiger visits the rabbit. If someone is green then they do not need the tiger. If someone is green then they are big. If the tiger is not young then the tiger sees the bald eagle. If someone visits the rabbit and they do not need the tiger then the rabbit sees the tiger. If someone visits the rabbit and they do not see the bald eagle then they do not visit the bald eagle. If someone sees the bald eagle and they do not visit the bald eagle then they see the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not visit the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nSees(x, y) ::: x sees y.\nPremises:\nNice(bald eagle) ::: The bald eagle is nice.\nRough(bald eagle) ::: The bald eagle is rough.\nYoung(bald eagle) ::: The bald eagle is young.\nNeeds(bald eagle, rabbit) ::: The bald eagle needs the rabbit.\nVisits(bald eagle, rabbit) ::: The bald eagle visits the rabbit.\nNice(rabbit) ::: The rabbit is nice.\nNeeds(rabbit, tiger) ::: The rabbit needs the tiger.\nSees(rabbit, bald eagle) ::: The rabbit sees the bald eagle.\nVisits(rabbit, tiger) ::: The rabbit visits the tiger.\nGreen(tiger) ::: The tiger is green.\nNice(tiger) ::: The tiger is nice.\nRough(tiger) ::: The tiger is rough.\nNeeds(tiger, rabbit) ::: The tiger needs the rabbit.\nVisits(tiger, bald eagle) ::: The tiger visits the bald eagle.\nVisits(tiger, rabbit) ::: The tiger visits the rabbit.\n∀x ((Green(x) → ¬Needs(x, tiger)) ::: If someone is green then they do not need the tiger.\n∀x ((Green(x) → Big(x)) ::: If someone is green then they are big.\n∀x (¬Young(tiger) → Sees(tiger, bald eagle)) ::: If the tiger is not young then the tiger sees the bald eagle.\n∀x ((Visits(x, rabbit) ∧ ¬Needs(x, tiger)) → Sees(rabbit, tiger)) ::: If someone visits the rabbit and they do not need the tiger then the rabbit sees the tiger.\n∀x ((Visits(x, rabbit) ∧ ¬Sees(x, bald eagle)) → ¬Visits(x, bald eagle)) ::: If someone visits the rabbit and they do not see the bald eagle then they do not visit the bald eagle.\n∀x ((Sees(x, bald eagle) ∧ ¬Visits(x, bald eagle)) → Sees(x, tiger)) ::: If someone sees the bald eagle and they do not visit the bald eagle then they see the tiger.\nConclusion:\n¬Visits(bald eagle, rabbit) ::: The bald eagle does not visit the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-309",
    "context": "The mouse eats the squirrel. The mouse is kind. The mouse is red. The mouse is not round. The mouse is young. The mouse does not like the squirrel. The mouse needs the squirrel. The squirrel eats the mouse. The squirrel is green. The squirrel is kind. The squirrel is red. The squirrel is round. The squirrel is young. The squirrel likes the mouse. The squirrel needs the mouse. If the squirrel needs the mouse then the mouse does not like the squirrel. If something eats the squirrel and it is not young then it does not need the squirrel. If something eats the squirrel and it likes the squirrel then the squirrel eats the mouse. If something likes the mouse then the mouse is green. If something is green then it eats the mouse. If something is red and it does not need the squirrel then it is round. If the squirrel is kind and the squirrel eats the mouse then the squirrel likes the mouse. If something is round and it needs the squirrel then the squirrel likes the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not like the mouse.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nPremises:\nEats(Mouse, Squirrel) ::: The mouse eats the squirrel.\nKind(Mouse) ::: The mouse is kind.\nRed(Mouse) ::: The mouse is red.\n¬Round(Mouse) ::: The mouse is not round.\nYoung(Mouse) ::: The mouse is young.\n¬Likes(Mouse, Squirrel) ::: The mouse does not like the squirrel.\nNeeds(Mouse, Squirrel) ::: The mouse needs the squirrel.\nEats(Squirrel, Mouse) ::: The squirrel eats the mouse.\nGreen(Squirrel) ::: The squirrel is green.\nKind(Squirrel) ::: The squirrel is kind.\nRed(Squirrel) ::: The squirrel is red.\nRound(Squirrel) ::: The squirrel is round.\nYoung(Squirrel) ::: The squirrel is young.\nLikes(Squirrel, Mouse) ::: The squirrel likes the mouse.\nNeeds(Squirrel, Mouse) ::: The squirrel needs the mouse.\n∀x ((Eats(x, Squirrel) ∧ ¬Young(x)) → ¬Needs(x, Squirrel)) ::: If something eats the squirrel and it is not young then it does not need the squirrel.\n∀x ((Eats(x, Squirrel) ∧ Likes(x, Squirrel)) → Eats(Squirrel, x)) ::: If something eats the squirrel and it likes the squirrel then the squirrel eats the mouse.\n∀x (Likes(x, Mouse) → Green(x)) ::: If something likes the mouse then the mouse is green.\n∀x (Green(x) → Eats(x, Mouse)) ::: If something is green then it eats the mouse.\n∀x ((Red(x) ∧ ¬Needs(x, Squirrel)) → Round(x)) ::: If something is red and it does not need the squirrel then it is round.\n∀x ((Kind(x) ∧ Eats(x, Mouse)) → Likes(Squirrel, Mouse)) ::: If the squirrel is kind and the squirrel eats the mouse then the squirrel likes the mouse.\n∀x ((Round(x) ∧ Needs(x, Squirrel)) → Likes(Squirrel, Mouse)) ::: If something is round and it needs the squirrel then the squirrel likes the mouse.\nConclusion:\n¬Likes(Mouse, Mouse) ::: The mouse does not like the mouse."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-388",
    "context": "The bear chases the lion. The bear is kind. The bear is red. The bear is round. The bear sees the dog. The bear visits the dog. The dog visits the lion. The lion is rough. The lion visits the bear. The mouse chases the bear. The mouse chases the dog. The mouse chases the lion. If something sees the bear then it chases the dog. If something is red then it sees the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion visits the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nRough(x) ::: x is rough.\nPremises:\nChases(Bear, Lion) ::: The bear chases the lion.\nKind(Bear) ::: The bear is kind.\nRed(Bear) ::: The bear is red.\nRound(Bear) ::: The bear is round.\nSees(Bear, Dog) ::: The bear sees the dog.\nVisits(Bear, Dog) ::: The bear visits the dog.\nVisits(Dog, Lion) ::: The dog visits the lion.\nRough(Lion) ::: The lion is rough.\nVisits(Lion, Bear) ::: The lion visits the bear.\nChases(Mouse, Bear) ::: The mouse chases the bear.\nChases(Mouse, Dog) ::: The mouse chases the dog.\nChases(Mouse, Lion) ::: The mouse chases the lion.\n∀x ((Sees(x, Bear)) → Chases(x, Dog)) ::: If something sees the bear then it chases the dog.\n∀x (Red(x) → Sees(x, Bear)) ::: If something is red then it sees the bear.\nConclusion:\nVisits(Lion, Bear) ::: The lion visits the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-1769",
    "context": "The bald eagle chases the cat. The bald eagle chases the cow. The bald eagle eats the cat. The bald eagle is cold. The bald eagle needs the cat. The bald eagle needs the cow. The cat chases the bald eagle. The cat eats the bald eagle. The cat eats the cow. The cat is blue. The cow chases the bald eagle. The cow chases the cat. The cow eats the bald eagle. The cow is cold. The cow does not need the bald eagle. The cow needs the cat. If someone is green then they eat the bald eagle. If someone needs the bald eagle and the bald eagle does not need the cat then the bald eagle is young. If the cow chases the cat then the cow is nice. If someone needs the cow then they are green. If someone needs the cow and the cow is cold then the cow does not need the bald eagle. If someone is blue and they do not need the bald eagle then the bald eagle does not chase the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow does not chase the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nNeeds(x, y) ::: x needs y.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nPremises:\nChases(bald eagle, cat) ::: The bald eagle chases the cat.\nChases(bald eagle, cow) ::: The bald eagle chases the cow.\nEats(bald eagle, cat) ::: The bald eagle eats the cat.\nCold(bald eagle) ::: The bald eagle is cold.\nNeeds(bald eagle, cat) ::: The bald eagle needs the cat.\nNeeds(bald eagle, cow) ::: The bald eagle needs the cow.\nChases(cat, bald eagle) ::: The cat chases the bald eagle.\nEats(cat, bald eagle) ::: The cat eats the bald eagle.\nEats(cat, cow) ::: The cat eats the cow.\nBlue(cat) ::: The cat is blue.\nChases(cow, bald eagle) ::: The cow chases the bald eagle.\nChases(cow, cat) ::: The cow chases the cat.\nEats(cow, bald eagle) ::: The cow eats the bald eagle.\nCold(cow) ::: The cow is cold.\n¬Needs(cow, bald eagle) ::: The cow does not need the bald eagle.\nNeeds(cow, cat) ::: The cow needs the cat.\n∀x ((Green(x) → Eats(x, bald eagle))) ::: If someone is green then they eat the bald eagle.\n∀x ((Needs(x, bald eagle) ∧ ¬Needs(bald eagle, cat)) → Young(bald eagle)) ::: If someone needs the bald eagle and the bald eagle does not need the cat then the bald eagle is young.\n∀x ((Chases(cow, cat)) → Nice(cow)) ::: If the cow chases the cat then the cow is nice.\n∀x ((Needs(x, cow)) → Green(x)) ::: If someone needs the cow then they are green.\n∀x ((Needs(x, cow) ∧ Cold(cow)) → ¬Needs(x, bald eagle)) ::: If someone needs the cow and the cow is cold then the cow does not need the bald eagle.\n∀x ((Blue(x) ∧ ¬Needs(x, bald eagle)) → ¬Chases(bald eagle, cat)) ::: If someone is blue and they do not need the bald eagle then the bald eagle does not chase the cat.\nConclusion:\n¬Chases(cow, bald eagle) ::: The cow does not chase the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-279",
    "context": "The bear is cold. The bear needs the lion. The bear sees the cow. The bear does not see the tiger. The cow sees the bear. The cow does not see the lion. The lion needs the tiger. The tiger needs the bear. The tiger needs the cow. The tiger sees the bear. If someone needs the bear and they are round then they do not see the cow. If someone is rough then they do not see the cow. If the lion visits the bear then the bear visits the tiger. If someone needs the bear then they are green. If someone visits the cow and the cow is not kind then the cow sees the lion. If the cow needs the bear and the cow does not see the lion then the bear sees the tiger. If the tiger does not need the bear and the bear does not see the tiger then the tiger is green. If someone is green then they do not need the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not visit the tiger.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nRound(x) ::: x is round.\nRough(x) ::: x is rough.\nGreen(x) ::: x is green.\nVisits(x, y) ::: x visits y.\nKind(x) ::: x is kind.\n\nPremises:\nCold(bear) ::: The bear is cold.\nNeeds(bear, lion) ::: The bear needs the lion.\nSees(bear, cow) ::: The bear sees the cow.\n¬Sees(bear, tiger) ::: The bear does not see the tiger.\nSees(cow, bear) ::: The cow sees the bear.\n¬Sees(cow, lion) ::: The cow does not see the lion.\nNeeds(lion, tiger) ::: The lion needs the tiger.\nNeeds(tiger, bear) ::: The tiger needs the bear.\nNeeds(tiger, cow) ::: The tiger needs the cow.\nSees(tiger, bear) ::: The tiger sees the bear.\n∀x ((Needs(x, bear) ∧ Round(x)) → ¬Sees(x, cow)) ::: If someone needs the bear and they are round then they do not see the cow.\n∀x (Rough(x) → ¬Sees(x, cow)) ::: If someone is rough then they do not see the cow.\n∀x ((Visits(lion, bear)) → (Visits(bear, tiger))) ::: If the lion visits the bear then the bear visits the tiger.\n∀x (Needs(x, bear) → Green(x)) ::: If someone needs the bear then they are green.\n∀x ((Visits(x, cow) ∧ ¬Kind(cow)) → Sees(cow, lion)) ::: If someone visits the cow and the cow is not kind then the cow sees the lion.\n∀x ((Needs(cow, bear) ∧ ¬Sees(cow, lion)) → Sees(bear, tiger)) ::: If the cow needs the bear and the cow does not see the lion then the bear sees the tiger.\n∀x (¬Needs(tiger, bear) ∧ ¬Sees(bear, tiger) → Green(tiger)) ::: If the tiger does not need the bear and the bear does not see the tiger then the tiger is green.\n∀x (Green(x) → ¬Needs(x, tiger)) ::: If someone is green then they do not need the tiger.\n\nConclusion:\n¬Visits(bear, tiger) ::: The bear does not visit the tiger."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-513",
    "context": "Bob is round. Dave is quiet. Gary is round. Harry is furry. If something is young and furry then it is green. If Dave is young then Dave is blue. All green things are kind. All young things are round. If something is quiet and blue then it is young. Furry things are young. Kind, young things are blue. If Harry is blue and Harry is young then Harry is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nQuiet(x) ::: x is quiet.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nPremises:\nRound(Bob) ::: Bob is round.\nQuiet(Dave) ::: Dave is quiet.\nRound(Gary) ::: Gary is round.\nFurry(Harry) ::: Harry is furry.\n∀x ((Young(x) ∧ Furry(x)) → Green(x)) ::: If something is young and furry then it is green.\n∀x (Young(Dave) → Blue(Dave)) ::: If Dave is young then Dave is blue.\n∀x (Green(x) → Kind(x)) ::: All green things are kind.\n∀x (Young(x) → Round(x)) ::: All young things are round.\n∀x ((Quiet(x) ∧ Blue(x)) → Young(x)) ::: If something is quiet and blue then it is young.\n∀x (Furry(x) → Young(x)) ::: Furry things are young.\n∀x ((Kind(x) ∧ Young(x)) → Blue(x)) ::: Kind, young things are blue.\n∀x ((Blue(Harry) ∧ Young(Harry)) → Green(Harry)) ::: If Harry is blue and Harry is young then Harry is green.\nConclusion:\nFurry(Harry) ::: Harry is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-625",
    "context": "The cow does not need the squirrel. The squirrel likes the tiger. The tiger needs the cow. If something likes the cow and it does not need the squirrel then the squirrel likes the cow. If something likes the cow then it is not round. If something likes the tiger then the tiger likes the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not like the tiger.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeed(x, y) ::: x needs y.\nLike(x, y) ::: x likes y.\nRound(x) ::: x is round.\nCow(x) ::: x is a cow.\nSquirrel(x) ::: x is a squirrel.\nTiger(x) ::: x is a tiger.\nPremises:\n¬Need(Cow, Squirrel) ::: The cow does not need the squirrel.\nLike(Squirrel, Tiger) ::: The squirrel likes the tiger.\nNeed(Tiger, Cow) ::: The tiger needs the cow.\n∀x ((Like(x, Cow) ∧ ¬Need(x, Squirrel)) → Like(Squirrel, Cow)) ::: If something likes the cow and it does not need the squirrel then the squirrel likes the cow.\n∀x (Like(x, Cow) → ¬Round(x)) ::: If something likes the cow then it is not round.\n∀x (Like(x, Tiger) → Like(Tiger, Cow)) ::: If something likes the tiger then the tiger likes the cow.\nConclusion:\n¬Like(Squirrel, Tiger) ::: The squirrel does not like the tiger."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-36",
    "context": "Bob is big. Bob is blue. Bob is furry. Bob is kind. Bob is quiet. Bob is red. Bob is smart. Charlie is big. Charlie is furry. Charlie is kind. Charlie is quiet. Charlie is red. Charlie is smart. Erin is blue. Erin is kind. Erin is quiet. If Charlie is blue and Charlie is smart then Charlie is red. If something is big and smart then it is kind. If something is blue and smart then it is quiet. Smart, kind things are furry. All blue, quiet things are smart. Quiet, blue things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nPremises:\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\nFurry(Bob) ::: Bob is furry.\nKind(Bob) ::: Bob is kind.\nQuiet(Bob) ::: Bob is quiet.\nRed(Bob) ::: Bob is red.\nSmart(Bob) ::: Bob is smart.\nBig(Charlie) ::: Charlie is big.\nFurry(Charlie) ::: Charlie is furry.\nKind(Charlie) ::: Charlie is kind.\nQuiet(Charlie) ::: Charlie is quiet.\nRed(Charlie) ::: Charlie is red.\nSmart(Charlie) ::: Charlie is smart.\nBlue(Erin) ::: Erin is blue.\nKind(Erin) ::: Erin is kind.\nQuiet(Erin) ::: Erin is quiet.\n∀x ((Blue(x) ∧ Smart(x)) → Red(x)) ::: If Charlie is blue and Charlie is smart then Charlie is red.\n∀x ((Big(x) ∧ Smart(x)) → Kind(x)) ::: If something is big and smart then it is kind.\n∀x ((Blue(x) ∧ Smart(x)) → Quiet(x)) ::: If something is blue and smart then it is quiet.\n∀x ((Smart(x) ∧ Kind(x)) → Furry(x)) ::: Smart, kind things are furry.\n∀x ((Blue(x) ∧ Quiet(x)) → Smart(x)) ::: All blue, quiet things are smart.\n∀x ((Quiet(x) ∧ Blue(x)) → Kind(x)) ::: Quiet, blue things are kind.\nConclusion:\n¬Big(Erin) ::: Erin is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1433",
    "context": "Charlie is kind. Charlie is nice. Charlie is red. Charlie is white. Dave is kind. Dave is nice. Gary is blue. Gary is not kind. Gary is not nice. Gary is quiet. Gary is not red. Harry is blue. Harry is not kind. Harry is nice. Harry is not quiet. If Harry is not white then Harry is not nice. If Charlie is not white then Charlie is smart. Smart, kind people are blue. All nice, red people are smart. Quiet, white people are not smart. If Dave is kind then Dave is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nBlue(x) ::: x is blue.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nPremises:\nKind(Charlie) ::: Charlie is kind.\nNice(Charlie) ::: Charlie is nice.\nRed(Charlie) ::: Charlie is red.\nWhite(Charlie) ::: Charlie is white.\nKind(Dave) ::: Dave is kind.\nNice(Dave) ::: Dave is nice.\nBlue(Gary) ::: Gary is blue.\n¬Kind(Gary) ::: Gary is not kind.\n¬Nice(Gary) ::: Gary is not nice.\nQuiet(Gary) ::: Gary is quiet.\n¬Red(Gary) ::: Gary is not red.\n¬Blue(Harry) ::: Harry is not blue.\n¬Kind(Harry) ::: Harry is not kind.\nNice(Harry) ::: Harry is nice.\n¬Quiet(Harry) ::: Harry is not quiet.\n∀x ((¬White(x) → ¬Nice(x)) ::: If x is not white then x is not nice.\n∀x ((¬White(x) → Smart(x)) ::: If x is not white then x is smart.\n∀x ((Kind(x) ∧ Smart(x)) → Blue(x)) ::: Smart, kind people are blue.\n∀x ((Nice(x) ∧ Red(x)) → Smart(x)) ::: All nice, red people are smart.\n∀x ((Quiet(x) ∧ White(x)) → ¬Smart(x)) ::: Quiet, white people are not smart.\n∀x ((Kind(Dave) → Blue(Dave)) ::: If Dave is kind then Dave is blue.\nConclusion:\nQuiet(Gary) ::: Gary is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-513",
    "context": "The bald eagle chases the bear. The bald eagle is young. The bald eagle needs the mouse. The bear chases the tiger. The bear needs the bald eagle. The mouse chases the bear. The mouse chases the tiger. The mouse is kind. The mouse needs the bald eagle. The mouse sees the tiger. The tiger chases the mouse. The tiger needs the bear. The tiger needs the mouse. The tiger sees the bear. The tiger sees the mouse. If someone is young then they see the mouse. If someone sees the mouse then they need the tiger. If the bear needs the tiger and the bear sees the mouse then the bear is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not need the mouse.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nSees(x, y) ::: x sees y.\nNice(x) ::: x is nice.\nPremises:\nChases(BaldEagle, Bear) ::: The bald eagle chases the bear.\nYoung(BaldEagle) ::: The bald eagle is young.\nNeeds(BaldEagle, Mouse) ::: The bald eagle needs the mouse.\nChases(Bear, Tiger) ::: The bear chases the tiger.\nNeeds(Bear, BaldEagle) ::: The bear needs the bald eagle.\nChases(Mouse, Bear) ::: The mouse chases the bear.\nChases(Mouse, Tiger) ::: The mouse chases the tiger.\nKind(Mouse) ::: The mouse is kind.\nNeeds(Mouse, BaldEagle) ::: The mouse needs the bald eagle.\nSees(Mouse, Tiger) ::: The mouse sees the tiger.\nChases(Tiger, Mouse) ::: The tiger chases the mouse.\nNeeds(Tiger, Bear) ::: The tiger needs the bear.\nNeeds(Tiger, Mouse) ::: The tiger needs the mouse.\nSees(Tiger, Bear) ::: The tiger sees the bear.\nSees(Tiger, Mouse) ::: The tiger sees the mouse.\n∀x (Young(x) → Sees(x, Mouse)) ::: If someone is young then they see the mouse.\n∀x (Sees(x, Mouse) → Needs(x, Tiger)) ::: If someone sees the mouse then they need the tiger.\n∀x ((Needs(Bear, Tiger) ∧ Sees(Bear, Mouse)) → Nice(Bear)) ::: If the bear needs the tiger and the bear sees the mouse then the bear is nice.\nConclusion:\n¬Needs(Tiger, Mouse) ::: The tiger does not need the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1499",
    "context": "Gary is cold. Gary is nice. Gary is quiet. Harry is blue. Harry is cold. Harry is nice. Harry is quiet. Harry is red. Harry is rough. Harry is smart. All rough people are red. Nice, blue people are rough. All red people are cold. If Gary is blue then Gary is cold. If Gary is nice then Gary is rough. All nice people are quiet. If someone is smart then they are rough. All cold people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nBlue(x) ::: x is blue.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nPremises:\nCold(Gary) ::: Gary is cold.\nNice(Gary) ::: Gary is nice.\nQuiet(Gary) ::: Gary is quiet.\nBlue(Harry) ::: Harry is blue.\nCold(Harry) ::: Harry is cold.\nNice(Harry) ::: Harry is nice.\nQuiet(Harry) ::: Harry is quiet.\nRed(Harry) ::: Harry is red.\nRough(Harry) ::: Harry is rough.\nSmart(Harry) ::: Harry is smart.\n∀x (Rough(x) → Red(x)) ::: All rough people are red.\n∀x ((Nice(x) ∧ Blue(x)) → Rough(x)) ::: Nice, blue people are rough.\n∀x (Red(x) → Cold(x)) ::: All red people are cold.\n∀x ((Blue(Gary)) → Cold(Gary)) ::: If Gary is blue then Gary is cold.\n∀x ((Nice(Gary)) → Rough(Gary)) ::: If Gary is nice then Gary is rough.\n∀x (Nice(x) → Quiet(x)) ::: All nice people are quiet.\n∀x (Smart(x) → Rough(x)) ::: If someone is smart then they are rough.\n∀x (Cold(x) → Rough(x)) ::: All cold people are rough.\nConclusion:\n¬Blue(Gary) ::: Gary is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-992",
    "context": "Erin is cold. Erin is not green. Erin is quiet. Erin is not rough. Erin is round. Erin is white. Erin is young. Fiona is green. Fiona is not white. Harry is not cold. Harry is not green. Harry is quiet. Harry is rough. Harry is round. Harry is white. Harry is young. If something is green and quiet then it is cold. If Fiona is young then Fiona is quiet. If something is cold then it is not rough. If Erin is rough then Erin is not quiet. All white things are round. All cold, rough things are quiet. If Fiona is white then Fiona is green. If something is green and not white then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nCold(Erin) ::: Erin is cold.\n¬Green(Erin) ::: Erin is not green.\nQuiet(Erin) ::: Erin is quiet.\n¬Rough(Erin) ::: Erin is not rough.\nRound(Erin) ::: Erin is round.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\nGreen(Fiona) ::: Fiona is green.\n¬White(Fiona) ::: Fiona is not white.\n¬Cold(Harry) ::: Harry is not cold.\n¬Green(Harry) ::: Harry is not green.\nQuiet(Harry) ::: Harry is quiet.\nRough(Harry) ::: Harry is rough.\nRound(Harry) ::: Harry is round.\nWhite(Harry) ::: Harry is white.\nYoung(Harry) ::: Harry is young.\n∀x ((Green(x) ∧ Quiet(x)) → Cold(x)) ::: If something is green and quiet then it is cold.\n∀x ((Fiona = x) → (Young(x) → Quiet(x))) ::: If Fiona is young then Fiona is quiet.\n∀x ((Cold(x) → ¬Rough(x))) ::: If something is cold then it is not rough.\n∀x ((Rough(x) → ¬Quiet(x))) ::: If something is rough then it is not quiet.\n∀x (White(x) → Round(x)) ::: All white things are round.\n∀x ((Cold(x) ∧ Rough(x)) → Quiet(x)) ::: All cold, rough things are quiet.\n∀x ((Fiona = x) → (White(x) → Green(x))) ::: If Fiona is white then Fiona is green.\n∀x ((Green(x) ∧ ¬White(x)) → Young(x)) ::: If something is green and not white then it is young.\nConclusion:\nYoung(Erin) ::: Erin is young."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1082",
    "context": "The bear eats the dog. The cat eats the bear. The dog likes the cat. If someone needs the cat then they eat the cat. If someone eats the dog then the dog needs the cat. If the cat needs the bear then the bear is green. If someone eats the cat then the cat eats the bear. If someone eats the cat and the cat is cold then the cat eats the dog. If someone likes the cat and the cat is blue then the cat likes the dog. If someone eats the cat and they eat the bear then the bear needs the dog. If someone needs the bear and they are green then the bear needs the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not like the cat.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nPremises:\nEats(bear, dog) ::: The bear eats the dog.\nEats(cat, bear) ::: The cat eats the bear.\nLikes(dog, cat) ::: The dog likes the cat.\n∀x (Needs(x, cat) → Eats(x, cat)) ::: If someone needs the cat then they eat the cat.\n∀x (Eats(x, dog) → Needs(dog, cat)) ::: If someone eats the dog then the dog needs the cat.\n∀x (Needs(cat, bear) → Green(bear)) ::: If the cat needs the bear then the bear is green.\n∀x (Eats(x, cat) → Eats(cat, bear)) ::: If someone eats the cat then the cat eats the bear.\n∀x ((Eats(x, cat) ∧ Cold(cat)) → Eats(cat, dog)) ::: If someone eats the cat and the cat is cold then the cat eats the dog.\n∀x ((Likes(x, cat) ∧ Blue(cat)) → Likes(cat, dog)) ::: If someone likes the cat and the cat is blue then the cat likes the dog.\n∀x ((Eats(x, cat) ∧ Eats(x, bear)) → Needs(bear, dog)) ::: If someone eats the cat and they eat the bear then the bear needs the dog.\n∀x ((Needs(x, bear) ∧ Green(x)) → Needs(x, dog)) ::: If someone needs the bear and they are green then the bear needs the dog.\nConclusion:\n¬Likes(dog, cat) ::: The dog does not like the cat."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-689",
    "context": "Anne is blue. Anne is kind. Anne is nice. Anne is round. Anne is white. Erin is blue. Erin is white. Gary is round. Harry is blue. Harry is nice. Harry is round. Harry is white. If Harry is round and Harry is green then Harry is kind. If someone is blue then they are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nPremises:\nBlue(Anne) ::: Anne is blue.\nKind(Anne) ::: Anne is kind.\nNice(Anne) ::: Anne is nice.\nRound(Anne) ::: Anne is round.\nWhite(Anne) ::: Anne is white.\nBlue(Erin) ::: Erin is blue.\nWhite(Erin) ::: Erin is white.\nRound(Gary) ::: Gary is round.\nBlue(Harry) ::: Harry is blue.\nNice(Harry) ::: Harry is nice.\nRound(Harry) ::: Harry is round.\nWhite(Harry) ::: Harry is white.\n∀x ((Round(x) ∧ Green(x)) → Kind(x)) ::: If Harry is round and Harry is green then Harry is kind.\n∀x (Blue(x) → Green(x)) ::: If someone is blue then they are green.\nConclusion:\n¬Green(Gary) ::: Gary is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-311",
    "context": "The bear needs the tiger. The cow is not nice. The dog needs the tiger. The tiger likes the cow. If something needs the cow and the cow likes the tiger then the tiger is nice. If something likes the bear then the bear sees the tiger. If the dog sees the tiger and the cow does not need the dog then the dog likes the tiger. If something needs the tiger then the tiger likes the bear. If something likes the cow then it is big. If something is big and it does not like the bear then it sees the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger likes the cow.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nBig(x) ::: x is big.\nBear(x) ::: x is a bear.\nCow(x) ::: x is a cow.\nDog(x) ::: x is a dog.\nTiger(x) ::: x is a tiger.\nPremises:\nNeeds(Bear, Tiger) ::: The bear needs the tiger.\n¬Nice(Cow) ::: The cow is not nice.\nNeeds(Dog, Tiger) ::: The dog needs the tiger.\nLikes(Tiger, Cow) ::: The tiger likes the cow.\n∀x ((Needs(x, Cow) ∧ Likes(Cow, Tiger)) → Likes(Tiger, x)) ::: If something needs the cow and the cow likes the tiger then the tiger is nice.\n∀x (Likes(x, Bear) → Sees(Bear, Tiger)) ::: If something likes the bear then the bear sees the tiger.\n∀x ((Dog(x) ∧ Sees(Tiger, x) ∧ ¬Needs(Cow, x)) → Likes(x, Tiger)) ::: If the dog sees the tiger and the cow does not need the dog then the dog likes the tiger.\n∀x (Needs(x, Tiger) → Likes(Tiger, Bear)) ::: If something needs the tiger then the tiger likes the bear.\n∀x (Likes(x, Cow) → Big(x)) ::: If something likes the cow then it is big.\n∀x ((Big(x) ∧ ¬Likes(x, Bear)) → Sees(x, Bear)) ::: If something is big and it does not like the bear then it sees the bear.\nConclusion:\nLikes(Tiger, Cow) ::: The tiger likes the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-758",
    "context": "The cat eats the dog. The dog eats the cat. If something visits the dog then the dog is green. If something eats the cat then it visits the dog. If something is blue and it visits the cat then it visits the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not eat the dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nCat(x) ::: x is a cat.\nDog(x) ::: x is a dog.\nPremises:\nEats(Cat, Dog) ::: The cat eats the dog.\nEats(Dog, Cat) ::: The dog eats the cat.\n∀x (Visits(x, Dog) → Green(Dog)) ::: If something visits the dog then the dog is green.\n∀x (Eats(x, Cat) → Visits(x, Dog)) ::: If something eats the cat then it visits the dog.\n∀x ((Blue(x) ∧ Visits(x, Cat)) → Visits(x, Dog)) ::: If something is blue and it visits the cat then it visits the dog.\nConclusion:\n¬Eats(Cat, Dog) ::: The cat does not eat the dog."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-1609",
    "context": "Anne is furry. Anne is red. Anne is rough. Anne is round. Dave is big. Dave is red. Dave is white. Green, furry people are red. Big people are round. White, rough people are green. If someone is round then they are white. If someone is white and red then they are furry. All white, green people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nPremises:\nFurry(Anne) ::: Anne is furry.\nRed(Anne) ::: Anne is red.\nRough(Anne) ::: Anne is rough.\nRound(Anne) ::: Anne is round.\nBig(Dave) ::: Dave is big.\nRed(Dave) ::: Dave is red.\nWhite(Dave) ::: Dave is white.\n∀x ((Green(x) ∧ Furry(x)) → Red(x)) ::: Green, furry people are red.\n∀x (Big(x) → Round(x)) ::: Big people are round.\n∀x ((White(x) ∧ Rough(x)) → Green(x)) ::: White, rough people are green.\n∀x (Round(x) → White(x)) ::: If someone is round then they are white.\n∀x ((White(x) ∧ Red(x)) → Furry(x)) ::: If someone is white and red then they are furry.\n∀x ((White(x) ∧ Green(x)) → Rough(x)) ::: All white, green people are rough.\nConclusion:\n¬Green(Dave) ::: Dave is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-2051",
    "context": "The bear is not green. The cat sees the bear. The cow is not blue. The squirrel sees the cow. If someone sees the cow then they are big. If someone sees the bear then the bear does not eat the cow. If someone is green then they are not kind. If someone is kind and they eat the cat then they eat the bear. If someone is kind and they do not visit the bear then the bear is kind. All big people are not green. If the cat visits the bear then the bear sees the cat. If someone sees the cat and the cat is not kind then they do not visit the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear is not green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nSee(x, y) ::: x sees y.\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nEat(x, y) ::: x eats y.\nKind(x) ::: x is kind.\nVisit(x, y) ::: x visits y.\n\nPremises:\n¬Green(bear) ::: The bear is not green.\nSee(cat, bear) ::: The cat sees the bear.\n¬Blue(cow) ::: The cow is not blue.\nSee(squirrel, cow) ::: The squirrel sees the cow.\n∀x (See(x, cow) → Big(x)) ::: If someone sees the cow then they are big.\n∀x (See(x, bear) → ¬Eat(bear, cow)) ::: If someone sees the bear then the bear does not eat the cow.\n∀x (Green(x) → ¬Kind(x)) ::: If someone is green then they are not kind.\n∀x ((Kind(x) ∧ Eat(x, cat)) → Eat(x, bear)) ::: If someone is kind and they eat the cat then they eat the bear.\n∀x ((Kind(x) ∧ ¬Visit(x, bear)) → Kind(bear)) ::: If someone is kind and they do not visit the bear then the bear is kind.\n∀x (Big(x) → ¬Green(x)) ::: All big people are not green.\n∀x ((Visit(cat, bear)) → See(bear, cat)) ::: If the cat visits the bear then the bear sees the cat.\n∀x ((See(cat, x) ∧ ¬Kind(cat)) → ¬Visit(x, squirrel)) ::: If someone sees the cat and the cat is not kind then they do not visit the squirrel.\n\nConclusion:\n¬Green(bear) ::: The bear is not green."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D2-2096",
    "context": "Anne is smart. Charlie is rough. Harry is furry. If Charlie is blue then Charlie is furry. Blue things are big. If Anne is smart then Anne is blue. If Harry is round then Harry is smart. White, smart things are big. If something is rough then it is smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not rough.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nRough(x) ::: x is rough.\nFurry(x) ::: x is furry.\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nPremises:\nSmart(Anne) ::: Anne is smart.\nRough(Charlie) ::: Charlie is rough.\nFurry(Harry) ::: Harry is furry.\n∀x ((Blue(x) → Furry(x)) ::: If Charlie is blue then Charlie is furry.\n∀x (Blue(x) → Big(x)) ::: Blue things are big.\n∀x ((Smart(x) → Blue(x)) ::: If Anne is smart then Anne is blue.\n∀x ((Round(x) → Smart(x)) ::: If Harry is round then Harry is smart.\n∀x ((White(x) ∧ Smart(x)) → Big(x)) ::: White, smart things are big.\n∀x (Rough(x) → Smart(x)) ::: If something is rough then it is smart.\nConclusion:\n¬Rough(Charlie) ::: Charlie is not rough."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-227",
    "context": "The bald eagle is rough. The bald eagle sees the mouse. The bald eagle sees the squirrel. The mouse chases the squirrel. The mouse is cold. The mouse is nice. The mouse sees the squirrel. The squirrel chases the bald eagle. The squirrel does not see the bald eagle. The squirrel sees the mouse. If something is cold and it likes the bald eagle then it sees the mouse. If something sees the bald eagle then it likes the mouse. If something is nice then it is not young. If something is nice then it likes the bald eagle. If the mouse is cold and the mouse sees the bald eagle then the bald eagle sees the mouse. If the squirrel chases the mouse then the squirrel is not young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not like the mouse.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nYoung(x) ::: x is young.\nPremises:\nRough(bald eagle) ::: The bald eagle is rough.\nSees(bald eagle, mouse) ::: The bald eagle sees the mouse.\nSees(bald eagle, squirrel) ::: The bald eagle sees the squirrel.\nChases(mouse, squirrel) ::: The mouse chases the squirrel.\nCold(mouse) ::: The mouse is cold.\nNice(mouse) ::: The mouse is nice.\nSees(mouse, squirrel) ::: The mouse sees the squirrel.\nChases(squirrel, bald eagle) ::: The squirrel chases the bald eagle.\n¬Sees(squirrel, bald eagle) ::: The squirrel does not see the bald eagle.\nSees(squirrel, mouse) ::: The squirrel sees the mouse.\n∀x ((Cold(x) ∧ Likes(x, bald eagle)) → Sees(x, mouse)) ::: If something is cold and it likes the bald eagle then it sees the mouse.\n∀x (Sees(x, bald eagle) → Likes(x, mouse)) ::: If something sees the bald eagle then it likes the mouse.\n∀x (Nice(x) → ¬Young(x)) ::: If something is nice then it is not young.\n∀x (Nice(x) → Likes(x, bald eagle)) ::: If something is nice then it likes the bald eagle.\n∀x ((Cold(x) ∧ Sees(x, bald eagle)) → Sees(bald eagle, x)) ::: If the mouse is cold and the mouse sees the bald eagle then the bald eagle sees the mouse.\n∀x (Chases(squirrel, x) → ¬Young(squirrel)) ::: If the squirrel chases the mouse then the squirrel is not young.\nConclusion:\n¬Likes(mouse, mouse) ::: The mouse does not like the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1850",
    "context": "Dave is blue. Fiona is big. Fiona is green. Fiona is red. Fiona is not round. Gary is cold. Harry is blue. All cold people are red. Red people are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is blue.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nPremises:\nBlue(Dave) ::: Dave is blue.\nBig(Fiona) ::: Fiona is big.\nGreen(Fiona) ::: Fiona is green.\nRed(Fiona) ::: Fiona is red.\n¬Round(Fiona) ::: Fiona is not round.\nCold(Gary) ::: Gary is cold.\nBlue(Harry) ::: Harry is blue.\n∀x (Cold(x) → Red(x)) ::: All cold people are red.\n∀x (Red(x) → Green(x)) ::: Red people are green.\nConclusion:\nBlue(Dave) ::: Dave is blue."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-1401",
    "context": "The dog chases the squirrel. The dog eats the squirrel. The dog is big. The dog is blue. The dog is green. The dog is nice. The dog is round. The dog sees the squirrel. The squirrel chases the dog. The squirrel eats the dog. The squirrel is green. The squirrel sees the dog. If something is blue then it eats the squirrel. If something sees the squirrel then the squirrel is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not eat the squirrel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nSees(x, y) ::: x sees y.\nPremises:\nChases(dog, squirrel) ::: The dog chases the squirrel.\nEats(dog, squirrel) ::: The dog eats the squirrel.\nBig(dog) ::: The dog is big.\nBlue(dog) ::: The dog is blue.\nGreen(dog) ::: The dog is green.\nNice(dog) ::: The dog is nice.\nRound(dog) ::: The dog is round.\nSees(dog, squirrel) ::: The dog sees the squirrel.\nChases(squirrel, dog) ::: The squirrel chases the dog.\nEats(squirrel, dog) ::: The squirrel eats the dog.\nGreen(squirrel) ::: The squirrel is green.\nSees(squirrel, dog) ::: The squirrel sees the dog.\n∀x ((Blue(x) → Eats(x, squirrel))) ::: If something is blue then it eats the squirrel.\n∀x ((Sees(x, squirrel)) → Blue(squirrel)) ::: If something sees the squirrel then the squirrel is blue.\nConclusion:\n¬Eats(dog, squirrel) ::: The dog does not eat the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-2142",
    "context": "The cat is cold. The cat is not red. The lion needs the cat. The lion sees the cat. The mouse is red. The mouse needs the cat. The mouse sees the lion. If the lion is kind and the mouse does not like the lion then the lion is cold. If someone likes the cat and they do not see the mouse then the mouse likes the cat. If someone is rough then they do not see the cat. If someone likes the cat and the cat is not red then they like the mouse. If someone is red then they like the cat. If someone sees the cat then the cat needs the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not like the cat.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nLikes(x, y) ::: x likes y.\nRough(x) ::: x is rough.\nPremises:\nCold(cat) ::: The cat is cold.\n¬Red(cat) ::: The cat is not red.\nNeeds(lion, cat) ::: The lion needs the cat.\nSees(lion, cat) ::: The lion sees the cat.\nRed(mouse) ::: The mouse is red.\nNeeds(mouse, cat) ::: The mouse needs the cat.\nSees(mouse, lion) ::: The mouse sees the lion.\n∀x ((Kind(lion) ∧ ¬Likes(mouse, lion)) → Cold(lion)) ::: If the lion is kind and the mouse does not like the lion then the lion is cold.\n∀x ((Likes(x, cat) ∧ ¬Sees(x, mouse)) → Likes(mouse, cat)) ::: If someone likes the cat and they do not see the mouse then the mouse likes the cat.\n∀x (Rough(x) → ¬Sees(x, cat)) ::: If someone is rough then they do not see the cat.\n∀x ((Likes(x, cat) ∧ ¬Red(cat)) → Likes(cat, mouse)) ::: If someone likes the cat and the cat is not red then they like the mouse.\n∀x (Red(x) → Likes(x, cat)) ::: If someone is red then they like the cat.\n∀x (Sees(x, cat) → Needs(cat, lion)) ::: If someone sees the cat then the cat needs the lion.\nConclusion:\n¬Likes(lion, cat) ::: The lion does not like the cat."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D2-822",
    "context": "The cow is big. The rabbit sees the cow. The tiger needs the cow. If something is green and rough then it needs the tiger. If the tiger is not kind then the tiger is cold. If the cow does not need the rabbit then the rabbit does not need the cow. If something eats the tiger and it needs the cow then the tiger sees the rabbit. If something sees the cow then it eats the tiger. If something eats the tiger then it eats the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nSees(x, y) ::: x sees y.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nTiger(x) ::: x is a tiger.\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nCow(x) ::: x is a cow.\nRabbit(x) ::: x is a rabbit.\nEats(x, y) ::: x eats y.\n\nPremises:\nBig(Cow) ::: The cow is big.\nSees(Rabbit, Cow) ::: The rabbit sees the cow.\nNeeds(Tiger, Cow) ::: The tiger needs the cow.\n∀x ((Green(x) ∧ Rough(x)) → Needs(Tiger, x)) ::: If something is green and rough then it needs the tiger.\n¬Kind(Tiger) → Cold(Tiger) ::: If the tiger is not kind then the tiger is cold.\n¬Needs(Cow, Rabbit) → ¬Needs(Rabbit, Cow) ::: If the cow does not need the rabbit then the rabbit does not need the cow.\n∀x ((Eats(x, Tiger) ∧ Needs(Tiger, Cow)) → Sees(Tiger, Rabbit)) ::: If something eats the tiger and it needs the cow then the tiger sees the rabbit.\n∀x (Sees(x, Cow) → Eats(x, Tiger)) ::: If something sees the cow then it eats the tiger.\n∀x (Eats(x, Tiger) → Eats(x, Cow)) ::: If something eats the tiger then it eats the cow.\n\nConclusion:\nBig(Cow) ::: The cow is big."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-55",
    "context": "The bear is blue. The cat eats the rabbit. The cat is blue. The cat is round. The cat is young. The rabbit eats the bear. The rabbit likes the cat. If something eats the rabbit then it is nice. If the cat is nice and the cat eats the rabbit then the rabbit likes the bear. All blue things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nEats(x, y) ::: x eats y.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nRed(x) ::: x is red.\nPremises:\nBlue(bear) ::: The bear is blue.\nEats(cat, rabbit) ::: The cat eats the rabbit.\nBlue(cat) ::: The cat is blue.\nRound(cat) ::: The cat is round.\nYoung(cat) ::: The cat is young.\nEats(rabbit, bear) ::: The rabbit eats the bear.\nLikes(rabbit, cat) ::: The rabbit likes the cat.\n∀x (Eats(x, rabbit) → Nice(x)) ::: If something eats the rabbit then it is nice.\n∀x ((Nice(cat) ∧ Eats(cat, rabbit)) → Likes(rabbit, bear)) ::: If the cat is nice and the cat eats the rabbit then the rabbit likes the bear.\n∀x (Blue(x) → Red(x)) ::: All blue things are red.\nConclusion:\n¬Round(cat) ::: The cat is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D2-834",
    "context": "The bear eats the cat. The bear is big. The bear is cold. The bear is round. The bear is young. The bear likes the cat. The bear needs the cat. The cat is cold. The cat is round. The cat is young. The cat likes the bear. The cat needs the bear. If something is blue then it likes the cat. If something eats the cat and the cat likes the bear then the cat is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nBlue(x) ::: x is blue.\nPremises:\nEats(bear, cat) ::: The bear eats the cat.\nBig(bear) ::: The bear is big.\nCold(bear) ::: The bear is cold.\nRound(bear) ::: The bear is round.\nYoung(bear) ::: The bear is young.\nLikes(bear, cat) ::: The bear likes the cat.\nNeeds(bear, cat) ::: The bear needs the cat.\nCold(cat) ::: The cat is cold.\nRound(cat) ::: The cat is round.\nYoung(cat) ::: The cat is young.\nLikes(cat, bear) ::: The cat likes the bear.\nNeeds(cat, bear) ::: The cat needs the bear.\n∀x (Blue(x) → Likes(x, cat)) ::: If something is blue then it likes the cat.\n∀x ((Eats(x, cat) ∧ Likes(cat, bear)) → Blue(cat)) ::: If something eats the cat and the cat likes the bear then the cat is blue.\nConclusion:\n¬Big(cat) ::: The cat is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1690",
    "context": "Bob is big. Bob is not green. Charlie is big. Charlie is green. Charlie is kind. Charlie is red. Charlie is not white. Fiona is kind. Fiona is red. Fiona is not white. Gary is nice. Gary is quiet. If Fiona is red and Fiona is white then Fiona is kind. All nice things are quiet. Green things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is nice.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nPremises:\nBig(Bob) ::: Bob is big.\n¬Green(Bob) ::: Bob is not green.\nBig(Charlie) ::: Charlie is big.\nGreen(Charlie) ::: Charlie is green.\nKind(Charlie) ::: Charlie is kind.\nRed(Charlie) ::: Charlie is red.\n¬White(Charlie) ::: Charlie is not white.\nKind(Fiona) ::: Fiona is kind.\nRed(Fiona) ::: Fiona is red.\n¬White(Fiona) ::: Fiona is not white.\nNice(Gary) ::: Gary is nice.\nQuiet(Gary) ::: Gary is quiet.\n∀x ((Red(x) ∧ White(x)) → Kind(x)) ::: If Fiona is red and Fiona is white then Fiona is kind.\n∀x (Nice(x) → Quiet(x)) ::: All nice things are quiet.\n∀x (Green(x) → Nice(x)) ::: Green things are nice.\nConclusion:\nNice(Gary) ::: Gary is nice."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D2-1784",
    "context": "Anne is young. Bob is quiet. Gary is round. If something is kind and rough then it is young. Young things are round. Quiet things are round. All round, quiet things are rough. If something is kind and round then it is not rough. If something is big then it is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nPremises:\nYoung(Anne) ::: Anne is young.\nQuiet(Bob) ::: Bob is quiet.\nRound(Gary) ::: Gary is round.\n∀x ((Kind(x) ∧ Rough(x)) → Young(x)) ::: If something is kind and rough then it is young.\n∀x (Young(x) → Round(x)) ::: Young things are round.\n∀x (Quiet(x) → Round(x)) ::: Quiet things are round.\n∀x ((Round(x) ∧ Quiet(x)) → Rough(x)) ::: All round, quiet things are rough.\n∀x ((Kind(x) ∧ Round(x)) → ¬Rough(x)) ::: If something is kind and round then it is not rough.\n∀x (Big(x) → Quiet(x)) ::: If something is big then it is quiet.\nConclusion:\n¬Round(Gary) ::: Gary is not round."
    ]
  }
]