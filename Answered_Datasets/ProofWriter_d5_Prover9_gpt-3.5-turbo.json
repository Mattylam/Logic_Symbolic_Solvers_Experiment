[
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-331",
    "context": "Bob is kind. Bob is nice. Bob is white. Charlie is kind. Charlie is white. Erin is red. Erin is rough. Harry is blue. Harry is kind. Harry is red. Blue people are nice. All white people are red. If someone is white and blue then they are nice. All rough people are red. If someone is smart then they are blue. If someone is kind then they are red. If someone is nice then they are rough. If someone is red then they are smart. If someone is red and rough then they are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is red.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nPremises:\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\nWhite(Bob) ::: Bob is white.\nKind(Charlie) ::: Charlie is kind.\nWhite(Charlie) ::: Charlie is white.\nRed(Erin) ::: Erin is red.\nRough(Erin) ::: Erin is rough.\nBlue(Harry) ::: Harry is blue.\nKind(Harry) ::: Harry is kind.\nRed(Harry) ::: Harry is red.\n∀x (Blue(x) → Nice(x)) ::: Blue people are nice.\n∀x (White(x) → Red(x)) ::: All white people are red.\n∀x ((White(x) ∧ Blue(x)) → Nice(x)) ::: If someone is white and blue then they are nice.\n∀x (Rough(x) → Red(x)) ::: All rough people are red.\n∀x (Smart(x) → Blue(x)) ::: If someone is smart then they are blue.\n∀x (Kind(x) → Red(x)) ::: If someone is kind then they are red.\n∀x (Nice(x) → Rough(x)) ::: If someone is nice then they are rough.\n∀x (Red(x) → Smart(x)) ::: If someone is red then they are smart.\n∀x ((Red(x) ∧ Rough(x)) → Nice(x)) ::: If someone is red and rough then they are nice.\nConclusion:\nRed(Harry) ::: Harry is red."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-740",
    "context": "The bald eagle is blue. The bald eagle is kind. The bald eagle likes the cat. The bald eagle does not visit the tiger. The cat chases the mouse. The cat is green. The cat likes the bald eagle. The cat likes the mouse. The cat does not like the tiger. The mouse likes the cat. The tiger chases the cat. The tiger chases the mouse. The tiger is red. The tiger likes the cat. The tiger visits the cat. The tiger visits the mouse. If something likes the bald eagle then it is blue. If something visits the bald eagle and it visits the cat then the bald eagle is red. If something chases the mouse then it visits the cat. If something is blue then it chases the tiger. If something visits the cat and the cat chases the tiger then the tiger likes the bald eagle. If something likes the tiger then the tiger likes the bald eagle. If something chases the mouse then it visits the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not like the mouse.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nChases(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nBaldEagle(x) ::: x is a bald eagle.\nCat(x) ::: x is a cat.\nMouse(x) ::: x is a mouse.\nTiger(x) ::: x is a tiger.\nPremises:\nBlue(BaldEagle) ::: The bald eagle is blue.\nKind(BaldEagle) ::: The bald eagle is kind.\nLikes(BaldEagle, Cat) ::: The bald eagle likes the cat.\n¬Visits(BaldEagle, Tiger) ::: The bald eagle does not visit the tiger.\nChases(Cat, Mouse) ::: The cat chases the mouse.\nGreen(Cat) ::: The cat is green.\nLikes(Cat, BaldEagle) ::: The cat likes the bald eagle.\nLikes(Cat, Mouse) ::: The cat likes the mouse.\n¬Likes(Cat, Tiger) ::: The cat does not like the tiger.\nLikes(Mouse, Cat) ::: The mouse likes the cat.\nChases(Tiger, Cat) ::: The tiger chases the cat.\nChases(Tiger, Mouse) ::: The tiger chases the mouse.\nRed(Tiger) ::: The tiger is red.\nLikes(Tiger, Cat) ::: The tiger likes the cat.\nVisits(Tiger, Cat) ::: The tiger visits the cat.\nVisits(Tiger, Mouse) ::: The tiger visits the mouse.\n∀x ((Likes(x, BaldEagle)) → Blue(x)) ::: If something likes the bald eagle then it is blue.\n∀x ((Visits(x, BaldEagle) ∧ Visits(x, Cat)) → Red(BaldEagle)) ::: If something visits the bald eagle and it visits the cat then the bald eagle is red.\n∀x (Chases(x, Mouse) → Visits(x, Cat)) ::: If something chases the mouse then it visits the cat.\n∀x (Blue(x) → Chases(x, Tiger)) ::: If something is blue then it chases the tiger.\n∀x ((Visits(x, Cat) ∧ Chases(Cat, Tiger)) → Likes(Tiger, BaldEagle)) ::: If something visits the cat and the cat chases the tiger then the tiger likes the bald eagle.\n∀x (Likes(Tiger, x) → Likes(Tiger, BaldEagle)) ::: If something likes the tiger then the tiger likes the bald eagle.\n∀x (Chases(x, Mouse) → Visits(x, Mouse)) ::: If something chases the mouse then it visits the mouse.\nConclusion:\n¬Likes(Cat, Mouse) ::: The cat does not like the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1364",
    "context": "Charlie is big. Charlie is cold. Charlie is kind. Charlie is quiet. Charlie is red. Charlie is rough. Charlie is smart. Erin is kind. Fiona is quiet. Fiona is rough. Harry is kind. Harry is rough. Kind things are big. All kind, smart things are rough. If something is red and quiet then it is big. All red things are cold. All cold, quiet things are smart. If something is big and smart then it is cold. All quiet things are cold. Kind, big things are red. All cold, smart things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not smart.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nErin(x) ::: x is Erin.\nFiona(x) ::: x is Fiona.\nHarry(x) ::: x is Harry.\nPremises:\nBig(Charlie) ::: Charlie is big.\nCold(Charlie) ::: Charlie is cold.\nKind(Charlie) ::: Charlie is kind.\nQuiet(Charlie) ::: Charlie is quiet.\nRed(Charlie) ::: Charlie is red.\nRough(Charlie) ::: Charlie is rough.\nSmart(Charlie) ::: Charlie is smart.\nKind(Erin) ::: Erin is kind.\nQuiet(Fiona) ::: Fiona is quiet.\nRough(Fiona) ::: Fiona is rough.\nKind(Harry) ::: Harry is kind.\nRough(Harry) ::: Harry is rough.\n∀x (Kind(x) → Big(x)) ::: Kind things are big.\n∀x ((Kind(x) ∧ Smart(x)) → Rough(x)) ::: All kind, smart things are rough.\n∀x ((Red(x) ∧ Quiet(x)) → Big(x)) ::: If something is red and quiet then it is big.\n∀x (Red(x) → Cold(x)) ::: All red things are cold.\n∀x ((Cold(x) ∧ Quiet(x)) → Smart(x)) ::: All cold, quiet things are smart.\n∀x ((Big(x) ∧ Smart(x)) → Cold(x)) ::: If something is big and smart then it is cold.\n∀x (Quiet(x) → Cold(x)) ::: All quiet things are cold.\n∀x ((Kind(x) ∧ Big(x)) → Red(x)) ::: Kind, big things are red.\n∀x ((Cold(x) ∧ Smart(x)) → Kind(x)) ::: All cold, smart things are kind.\nConclusion:\n¬Smart(Harry) ::: Harry is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-849",
    "context": "Anne is green. Bob is kind. Bob is rough. Erin is not rough. Fiona is nice. Fiona is not red. Fiona is rough. If something is green then it is not blue. Green things are red. Green, red things are rough. If Bob is blue then Bob is kind. All kind things are smart. Rough, red things are kind. If something is green and not kind then it is nice. All smart things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nNotRough(x) ::: x is not rough.\nNice(x) ::: x is nice.\nNotRed(x) ::: x is not red.\nBlue(x) ::: x is blue.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nPremises:\nGreen(Anne) ::: Anne is green.\nKind(Bob) ::: Bob is kind.\nRough(Bob) ::: Bob is rough.\n¬Rough(Erin) ::: Erin is not rough.\nNice(Fiona) ::: Fiona is nice.\n¬Red(Fiona) ::: Fiona is not red.\nRough(Fiona) ::: Fiona is rough.\n∀x (Green(x) → ¬Blue(x)) ::: If something is green then it is not blue.\n∀x (Green(x) → Red(x)) ::: Green things are red.\n∀x ((Green(x) ∧ Red(x)) → Rough(x)) ::: Green, red things are rough.\n∀x (Blue(x) → Kind(x)) ::: If Bob is blue then Bob is kind.\n∀x (Kind(x) → Smart(x)) ::: All kind things are smart.\n∀x ((Rough(x) ∧ Red(x)) → Kind(x)) ::: Rough, red things are kind.\n∀x ((Green(x) ∧ ¬Kind(x)) → Nice(x)) ::: If something is green and not kind then it is nice.\n∀x (Smart(x) → Nice(x)) ::: All smart things are nice.\nConclusion:\nGreen(Anne) ::: Anne is green."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-777",
    "context": "The bear is kind. The bear likes the cat. The cat likes the bear. The cat needs the cow. The cat sees the bear. The cat sees the cow. The cow is rough. The mouse likes the cat. The mouse needs the bear. The mouse sees the cow. If someone sees the bear then they need the mouse. If someone needs the bear and the bear needs the cow then the bear needs the cat. If someone likes the cow then the cow sees the bear. If the bear is red and the bear needs the cow then the cow needs the bear. If someone needs the mouse then they are big. If someone sees the bear and they are big then they like the cow. If the cat needs the mouse then the mouse needs the cow. If someone is kind then they see the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not see the bear.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nPremises:\nKind(bear) ::: The bear is kind.\nLikes(bear, cat) ::: The bear likes the cat.\nLikes(cat, bear) ::: The cat likes the bear.\nNeeds(cat, cow) ::: The cat needs the cow.\nSees(cat, bear) ::: The cat sees the bear.\nSees(cat, cow) ::: The cat sees the cow.\nRough(cow) ::: The cow is rough.\nLikes(mouse, cat) ::: The mouse likes the cat.\nNeeds(mouse, bear) ::: The mouse needs the bear.\nSees(mouse, cow) ::: The mouse sees the cow.\n∀x (Sees(x, bear) → Needs(x, mouse)) ::: If someone sees the bear then they need the mouse.\n∀x ((Needs(x, bear) ∧ Needs(bear, cow)) → Needs(bear, cat)) ::: If someone needs the bear and the bear needs the cow then the bear needs the cat.\n∀x (Likes(x, cow) → Sees(cow, bear)) ::: If someone likes the cow then the cow sees the bear.\n∀x ((Red(x) ∧ Needs(x, cow)) → Needs(cow, bear)) ::: If the bear is red and the bear needs the cow then the cow needs the bear.\n∀x (Needs(x, mouse) → Big(x)) ::: If someone needs the mouse then they are big.\n∀x ((Sees(x, bear) ∧ Big(x)) → Likes(x, cow)) ::: If someone sees the bear and they are big then they like the cow.\n∀x (Needs(cat, mouse) → Needs(mouse, cow)) ::: If the cat needs the mouse then the mouse needs the cow.\n∀x (Kind(x) → Sees(x, cat)) ::: If someone is kind then they see the cat.\nConclusion:\n¬Sees(cat, bear) ::: The cat does not see the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-829",
    "context": "The cow eats the lion. The cow eats the mouse. The cow is green. The cow visits the lion. The cow visits the mouse. The lion eats the cow. The lion eats the rabbit. The lion is big. The lion is green. The lion is round. The mouse eats the lion. The mouse is big. The mouse visits the cow. The rabbit is round. The rabbit needs the cow. The rabbit visits the lion. If someone eats the lion and the lion is green then they are blue. If someone visits the cow and they eat the rabbit then the rabbit is cold. If someone needs the mouse and the mouse needs the rabbit then the mouse needs the cow. If someone visits the cow and they are big then the cow visits the mouse. If someone is green and they need the rabbit then they eat the rabbit. If someone is blue then they eat the rabbit. All cold people are blue. If someone visits the cow then the cow is green. If someone eats the lion then they are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nIsGreen(x) ::: x is green.\nVisits(x, y) ::: x visits y.\nIsBig(x) ::: x is big.\nIsRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nIsBlue(x) ::: x is blue.\nIsCold(x) ::: x is cold.\nPremises:\nEats(Cow, Lion) ::: The cow eats the lion.\nEats(Cow, Mouse) ::: The cow eats the mouse.\nIsGreen(Cow) ::: The cow is green.\nVisits(Cow, Lion) ::: The cow visits the lion.\nVisits(Cow, Mouse) ::: The cow visits the mouse.\nEats(Lion, Cow) ::: The lion eats the cow.\nEats(Lion, Rabbit) ::: The lion eats the rabbit.\nIsBig(Lion) ::: The lion is big.\nIsGreen(Lion) ::: The lion is green.\nIsRound(Lion) ::: The lion is round.\nEats(Mouse, Lion) ::: The mouse eats the lion.\nIsBig(Mouse) ::: The mouse is big.\nVisits(Mouse, Cow) ::: The mouse visits the cow.\nIsRound(Rabbit) ::: The rabbit is round.\nNeeds(Rabbit, Cow) ::: The rabbit needs the cow.\nVisits(Rabbit, Lion) ::: The rabbit visits the lion.\n∀x ((Eats(x, Lion) ∧ IsGreen(Lion)) → IsBlue(x)) ::: If someone eats the lion and the lion is green then they are blue.\n∀x ((Visits(x, Cow) ∧ Eats(x, Rabbit)) → IsCold(Rabbit)) ::: If someone visits the cow and they eat the rabbit then the rabbit is cold.\n∀x ((Needs(x, Mouse) ∧ Needs(Mouse, Rabbit)) → Needs(x, Cow)) ::: If someone needs the mouse and the mouse needs the rabbit then the mouse needs the cow.\n∀x ((Visits(x, Cow) ∧ IsBig(x)) → Visits(Cow, Mouse)) ::: If someone visits the cow and they are big then the cow visits the mouse.\n∀x ((IsGreen(x) ∧ Needs(x, Rabbit)) → Eats(x, Rabbit)) ::: If someone is green and they need the rabbit then they eat the rabbit.\n∀x (IsBlue(x) → Eats(x, Rabbit)) ::: If someone is blue then they eat the rabbit.\n∀x (IsCold(x) → IsBlue(x)) ::: All cold people are blue.\n∀x (Visits(x, Cow) → IsGreen(Cow)) ::: If someone visits the cow then the cow is green.\n∀x (Eats(x, Lion) → IsCold(x)) ::: If someone eats the lion then they are cold.\nConclusion:\n¬IsCold(Lion) ::: The lion is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-694",
    "context": "Anne is young. Charlie is not red. Gary is not blue. Gary is kind. Gary is not rough. Gary is not young. Harry is green. If Gary is green then Gary is not blue. All young people are blue. If Harry is white and Harry is young then Harry is not green. All red people are green. Blue, young people are red. If someone is green then they are white. If someone is blue and white then they are kind. All red people are not rough. If someone is young and not white then they are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nPremises:\nYoung(Anne) ::: Anne is young.\n¬Red(Charlie) ::: Charlie is not red.\n¬Blue(Gary) ::: Gary is not blue.\nKind(Gary) ::: Gary is kind.\n¬Rough(Gary) ::: Gary is not rough.\n¬Young(Gary) ::: Gary is not young.\nGreen(Harry) ::: Harry is green.\n∀x ((Green(x) → ¬Blue(x))) ::: If Gary is green then Gary is not blue.\n∀x (Young(x) → Blue(x)) ::: All young people are blue.\n∀x ((White(x) ∧ Young(x)) → ¬Green(x)) ::: If Harry is white and Harry is young then Harry is not green.\n∀x (Red(x) → Green(x)) ::: All red people are green.\n∀x ((Blue(x) ∧ Young(x)) → Red(x)) ::: Blue, young people are red.\n∀x (Green(x) → White(x)) ::: If someone is green then they are white.\n∀x ((Blue(x) ∧ White(x)) → Kind(x)) ::: If someone is blue and white then they are kind.\n∀x (Red(x) → ¬Rough(x)) ::: All red people are not rough.\n∀x ((Young(x) ∧ ¬White(x)) → Rough(x)) ::: If someone is young and not white then they are rough.\nConclusion:\nGreen(Harry) ::: Harry is green."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-270",
    "context": "Charlie is green. Dave is quiet. Dave is red. Dave is not white. Erin is not big. Erin is not cold. Erin is green. Harry is big. Harry is cold. Harry is green. If someone is red then they are not white. If Charlie is quiet then Charlie is blue. If someone is quiet and red then they are blue. All white people are cold. All green people are quiet. All blue, green people are red. If someone is red and not white then they are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nPremises:\nGreen(Charlie) ::: Charlie is green.\nQuiet(Dave) ::: Dave is quiet.\nRed(Dave) ::: Dave is red.\n¬White(Dave) ::: Dave is not white.\n¬Big(Erin) ::: Erin is not big.\n¬Cold(Erin) ::: Erin is not cold.\nGreen(Erin) ::: Erin is green.\nBig(Harry) ::: Harry is big.\nCold(Harry) ::: Harry is cold.\nGreen(Harry) ::: Harry is green.\n∀x ((Red(x) → ¬White(x))) ::: If someone is red then they are not white.\n∀x ((Quiet(Charlie) → Blue(Charlie))) ::: If Charlie is quiet then Charlie is blue.\n∀x ((Quiet(x) ∧ Red(x)) → Blue(x)) ::: If someone is quiet and red then they are blue.\n∀x (White(x) → Cold(x)) ::: All white people are cold.\n∀x (Green(x) → Quiet(x)) ::: All green people are quiet.\n∀x ((Blue(x) ∧ Green(x)) → Red(x)) ::: All blue, green people are red.\n∀x ((Red(x) ∧ ¬White(x)) → Big(x)) ::: If someone is red and not white then they are big.\nConclusion:\n¬White(Dave) ::: Dave is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1022",
    "context": "Dave is green. Dave is kind. Erin is cold. Erin is furry. Fiona is big. Fiona is furry. Gary is big. All kind people are cold. Green, smart people are rough. If Fiona is cold and Fiona is kind then Fiona is green. If someone is furry then they are smart. All furry, green people are smart. If someone is green and cold then they are big. If someone is furry and rough then they are big. All furry people are smart. Big, cold people are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nBig(x) ::: x is big.\nSmart(x) ::: x is smart.\nRough(x) ::: x is rough.\nPremises:\nGreen(Dave) ::: Dave is green.\nKind(Dave) ::: Dave is kind.\nCold(Erin) ::: Erin is cold.\nFurry(Erin) ::: Erin is furry.\nBig(Fiona) ::: Fiona is big.\nFurry(Fiona) ::: Fiona is furry.\nBig(Gary) ::: Gary is big.\n∀x (Kind(x) → Cold(x)) ::: All kind people are cold.\n∀x ((Green(x) ∧ Smart(x)) → Rough(x)) ::: Green, smart people are rough.\n∀x ((Cold(x) ∧ Kind(x)) → Green(x)) ::: If Fiona is cold and Fiona is kind then Fiona is green.\n∀x (Furry(x) → Smart(x)) ::: If someone is furry then they are smart.\n∀x ((Furry(x) ∧ Green(x)) → Smart(x)) ::: All furry, green people are smart.\n∀x ((Green(x) ∧ Cold(x)) → Big(x)) ::: If someone is green and cold then they are big.\n∀x ((Furry(x) ∧ Rough(x)) → Big(x)) ::: If someone is furry and rough then they are big.\n∀x (Furry(x) → Smart(x)) ::: All furry people are smart.\n∀x ((Big(x) ∧ Cold(x)) → Furry(x)) ::: Big, cold people are furry.\nConclusion:\n¬Rough(Gary) ::: Gary is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1376",
    "context": "Anne is cold. Charlie is big. Charlie is cold. Charlie is quiet. Charlie is red. Dave is big. Dave is quiet. Harry is cold. Harry is kind. Harry is quiet. Harry is white. Quiet things are young. If something is red then it is quiet. All cold things are red. All big things are kind. If something is young and quiet then it is kind. Kind, quiet things are white. Big things are kind. All kind, big things are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nCold(Anne) ::: Anne is cold.\nBig(Charlie) ::: Charlie is big.\nCold(Charlie) ::: Charlie is cold.\nQuiet(Charlie) ::: Charlie is quiet.\nRed(Charlie) ::: Charlie is red.\nBig(Dave) ::: Dave is big.\nQuiet(Dave) ::: Dave is quiet.\nCold(Harry) ::: Harry is cold.\nKind(Harry) ::: Harry is kind.\nQuiet(Harry) ::: Harry is quiet.\nWhite(Harry) ::: Harry is white.\n∀x (Quiet(x) → Young(x)) ::: Quiet things are young.\n∀x (Red(x) → Quiet(x)) ::: If something is red then it is quiet.\n∀x (Cold(x) → Red(x)) ::: All cold things are red.\n∀x (Big(x) → Kind(x)) ::: All big things are kind.\n∀x ((Young(x) ∧ Quiet(x)) → Kind(x)) ::: If something is young and quiet then it is kind.\n∀x ((Kind(x) ∧ Quiet(x)) → White(x)) ::: Kind, quiet things are white.\n∀x (Big(x) → Kind(x)) ::: Big things are kind.\n∀x ((Kind(x) ∧ Big(x)) → Quiet(x)) ::: All kind, big things are quiet.\nConclusion:\nBig(Dave) ::: Dave is big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-574",
    "context": "The bald eagle is not green. The bald eagle likes the cow. The bald eagle needs the cat. The cat is cold. The cat likes the cow. The cat needs the bald eagle. The cow eats the cat. The dog does not eat the cow. The dog is green. The dog likes the cow. The dog needs the bald eagle. All cold things are green. If something is cold then it needs the cow. If something is young then it needs the bald eagle. If something is young and cold then it eats the dog. If the bald eagle does not need the cat then the bald eagle likes the dog. If something eats the dog then the dog is cold. If something is cold then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not need the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nCold(x) ::: x is cold.\nEats(x, y) ::: x eats y.\nYoung(x) ::: x is young.\nPremises:\n¬Green(BaldEagle) ::: The bald eagle is not green.\nLikes(BaldEagle, Cow) ::: The bald eagle likes the cow.\nNeeds(BaldEagle, Cat) ::: The bald eagle needs the cat.\nCold(Cat) ::: The cat is cold.\nLikes(Cat, Cow) ::: The cat likes the cow.\nNeeds(Cat, BaldEagle) ::: The cat needs the bald eagle.\nEats(Cow, Cat) ::: The cow eats the cat.\n¬Eats(Dog, Cow) ::: The dog does not eat the cow.\nGreen(Dog) ::: The dog is green.\nLikes(Dog, Cow) ::: The dog likes the cow.\nNeeds(Dog, BaldEagle) ::: The dog needs the bald eagle.\n∀x (Cold(x) → Green(x)) ::: All cold things are green.\n∀x ((Cold(x) → Needs(x, Cow))) ::: If something is cold then it needs the cow.\n∀x ((Young(x) → Needs(x, BaldEagle))) ::: If something is young then it needs the bald eagle.\n∀x ((Young(x) ∧ Cold(x)) → Eats(x, Dog)) ::: If something is young and cold then it eats the dog.\n∀x (¬Needs(BaldEagle, Cat) → Likes(BaldEagle, Dog)) ::: If the bald eagle does not need the cat then the bald eagle likes the dog.\n∀x (Eats(x, Dog) → Cold(Dog)) ::: If something eats the dog then the dog is cold.\n∀x (Cold(x) → Young(x)) ::: If something is cold then it is young.\nConclusion:\n¬Needs(Cat, BaldEagle) ::: The cat does not need the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-791",
    "context": "Charlie is smart. Dave is cold. Erin is cold. Erin is kind. Erin is rough. Harry is big. Harry is kind. Harry is nice. Harry is rough. Harry is young. Cold, big people are nice. Nice, young people are kind. All rough, big people are smart. Rough, nice people are young. All rough people are big. Cold people are rough. Big people are smart. All young people are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nPremises:\nSmart(Charlie) ::: Charlie is smart.\nCold(Dave) ::: Dave is cold.\nCold(Erin) ::: Erin is cold.\nKind(Erin) ::: Erin is kind.\nRough(Erin) ::: Erin is rough.\nBig(Harry) ::: Harry is big.\nKind(Harry) ::: Harry is kind.\nNice(Harry) ::: Harry is nice.\nRough(Harry) ::: Harry is rough.\nYoung(Harry) ::: Harry is young.\n∀x ((Cold(x) ∧ Big(x)) → Nice(x)) ::: Cold, big people are nice.\n∀x ((Nice(x) ∧ Young(x)) → Kind(x)) ::: Nice, young people are kind.\n∀x ((Rough(x) ∧ Big(x)) → Smart(x)) ::: All rough, big people are smart.\n∀x ((Rough(x) ∧ Nice(x)) → Young(x)) ::: Rough, nice people are young.\n∀x (Rough(x) → Big(x)) ::: All rough people are big.\n∀x (Cold(x) → Rough(x)) ::: Cold people are rough.\n∀x (Big(x) → Smart(x)) ::: Big people are smart.\n∀x (Young(x) → Kind(x)) ::: All young people are kind.\nConclusion:\n¬Rough(Charlie) ::: Charlie is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-583",
    "context": "Bob is quiet. Bob is young. Charlie is quiet. Charlie is young. Fiona is nice. Fiona is quiet. Fiona is round. Fiona is white. Gary is green. Gary is nice. Gary is quiet. Gary is young. If someone is quiet and green then they are kind. Quiet people are white. All green, young people are nice. All green, white people are round. White people are nice. Quiet people are young. All green, white people are nice. If someone is kind and white then they are green. All nice, quiet people are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nPremises:\nQuiet(Bob) ::: Bob is quiet.\nYoung(Bob) ::: Bob is young.\nQuiet(Charlie) ::: Charlie is quiet.\nYoung(Charlie) ::: Charlie is young.\nNice(Fiona) ::: Fiona is nice.\nQuiet(Fiona) ::: Fiona is quiet.\nRound(Fiona) ::: Fiona is round.\nWhite(Fiona) ::: Fiona is white.\nGreen(Gary) ::: Gary is green.\nNice(Gary) ::: Gary is nice.\nQuiet(Gary) ::: Gary is quiet.\nYoung(Gary) ::: Gary is young.\n∀x ((Quiet(x) ∧ Green(x)) → Kind(x)) ::: If someone is quiet and green then they are kind.\n∀x (Quiet(x) → White(x)) ::: Quiet people are white.\n∀x ((Green(x) ∧ Young(x)) → Nice(x)) ::: All green, young people are nice.\n∀x ((Green(x) ∧ White(x)) → Round(x)) ::: All green, white people are round.\n∀x (White(x) → Nice(x)) ::: White people are nice.\n∀x (Quiet(x) → Young(x)) ::: Quiet people are young.\n∀x ((Green(x) ∧ White(x)) → Nice(x)) ::: All green, white people are nice.\n∀x ((Kind(x) ∧ White(x)) → Green(x)) ::: If someone is kind and white then they are green.\n∀x ((Nice(x) ∧ Quiet(x)) → Kind(x)) ::: All nice, quiet people are kind.\nConclusion:\nRound(Fiona) ::: Fiona is round."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-437",
    "context": "The cow is not blue. The cow is green. The cow visits the mouse. The lion does not eat the mouse. The lion sees the cow. The lion visits the mouse. The mouse is blue. The mouse is red. The squirrel is red. The squirrel visits the mouse. If something eats the squirrel then the squirrel visits the cow. If the cow eats the mouse and the cow eats the squirrel then the squirrel visits the cow. If something is red and big then it eats the lion. If something visits the cow then it does not visit the squirrel. If something sees the mouse then the mouse eats the squirrel. If something sees the lion then it sees the mouse. If something is red and it visits the lion then it does not eat the cow. If something is blue then it sees the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not visit the mouse.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nVisit(x, y) ::: x visits y.\nEat(x, y) ::: x eats y.\nSee(x, y) ::: x sees y.\nRed(x) ::: x is red.\nBig(x) ::: x is big.\nEats(x, y) ::: x eats y.\nPremises:\n¬Blue(cow) ::: The cow is not blue.\nGreen(cow) ::: The cow is green.\nVisit(cow, mouse) ::: The cow visits the mouse.\n¬Eat(lion, mouse) ::: The lion does not eat the mouse.\nSee(lion, cow) ::: The lion sees the cow.\nVisit(lion, mouse) ::: The lion visits the mouse.\nBlue(mouse) ::: The mouse is blue.\nRed(mouse) ::: The mouse is red.\nRed(squirrel) ::: The squirrel is red.\nVisit(squirrel, mouse) ::: The squirrel visits the mouse.\n∀x (Eats(x, squirrel) → Visit(squirrel, cow)) ::: If something eats the squirrel then the squirrel visits the cow.\n∀x ((Eat(x, mouse) ∧ Eat(x, squirrel)) → Visit(squirrel, cow)) ::: If the cow eats the mouse and the cow eats the squirrel then the squirrel visits the cow.\n∀x ((Red(x) ∧ Big(x)) → Eats(x, lion)) ::: If something is red and big then it eats the lion.\n∀x (Visit(x, cow) → ¬Visit(x, squirrel)) ::: If something visits the cow then it does not visit the squirrel.\n∀x (See(x, mouse) → Eat(mouse, squirrel)) ::: If something sees the mouse then the mouse eats the squirrel.\n∀x (See(x, lion) → See(lion, mouse)) ::: If something sees the lion then it sees the mouse.\n∀x ((Red(x) ∧ Visit(x, lion)) → ¬Eat(x, cow)) ::: If something is red and it visits the lion then it does not eat the cow.\n∀x (Blue(x) → See(x, lion)) ::: If something is blue then it sees the lion.\nConclusion:\n¬Visit(squirrel, mouse) ::: The squirrel does not visit the mouse."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-992",
    "context": "The bear is nice. The bear likes the cat. The bear sees the dog. The cat eats the bear. The cat is cold. The cat sees the bear. The dog eats the bear. The dog eats the lion. The dog is blue. The dog sees the cat. The lion eats the cat. The lion is cold. The lion likes the bear. The lion likes the cat. If someone is big then they eat the dog. If someone is cold then they are nice. If someone is blue and they see the bear then they see the dog. If someone eats the dog then the dog is nice. If someone is blue and they see the dog then they are big. If someone eats the bear and they are nice then they are blue. If someone eats the bear and they see the dog then the dog is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not eat the dog.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nPremises:\nNice(bear) ::: The bear is nice.\nLikes(bear, cat) ::: The bear likes the cat.\nSees(bear, dog) ::: The bear sees the dog.\nEats(cat, bear) ::: The cat eats the bear.\nCold(cat) ::: The cat is cold.\nSees(cat, bear) ::: The cat sees the bear.\nEats(dog, bear) ::: The dog eats the bear.\nEats(dog, lion) ::: The dog eats the lion.\nBlue(dog) ::: The dog is blue.\nSees(dog, cat) ::: The dog sees the cat.\nEats(lion, cat) ::: The lion eats the cat.\nCold(lion) ::: The lion is cold.\nLikes(lion, bear) ::: The lion likes the bear.\nLikes(lion, cat) ::: The lion likes the cat.\n∀x (Big(x) → Eats(x, dog)) ::: If someone is big then they eat the dog.\n∀x (Cold(x) → Nice(x)) ::: If someone is cold then they are nice.\n∀x ((Blue(x) ∧ Sees(x, bear)) → Sees(x, dog)) ::: If someone is blue and they see the bear then they see the dog.\n∀x (Eats(x, dog) → Nice(dog)) ::: If someone eats the dog then the dog is nice.\n∀x ((Blue(x) ∧ Sees(x, dog)) → Big(x)) ::: If someone is blue and they see the dog then they are big.\n∀x ((Eats(x, bear) ∧ Nice(x)) → Blue(x)) ::: If someone eats the bear and they are nice then they are blue.\n∀x ((Eats(x, bear) ∧ Sees(x, dog)) → Big(dog)) ::: If someone eats the bear and they see the dog then the dog is big.\nConclusion:\n¬Eats(bear, dog) ::: The bear does not eat the dog."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1071",
    "context": "Bob is not furry. Bob is quiet. Erin is quiet. Fiona is nice. Fiona is red. Gary is nice. Gary is red. If someone is nice and cold then they are furry. If Gary is green then Gary is not red. If someone is cold then they are red. All quiet, red people are green. If someone is cold and furry then they are green. All cold, quiet people are smart. Cold, green people are quiet. If Fiona is nice then Fiona is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nSmart(x) ::: x is smart.\nPremises:\n¬Furry(Bob) ::: Bob is not furry.\nQuiet(Bob) ::: Bob is quiet.\nQuiet(Erin) ::: Erin is quiet.\nNice(Fiona) ::: Fiona is nice.\nRed(Fiona) ::: Fiona is red.\nNice(Gary) ::: Gary is nice.\nRed(Gary) ::: Gary is red.\n∀x ((Nice(x) ∧ Cold(x)) → Furry(x)) ::: If someone is nice and cold then they are furry.\n∀x (Green(Gary) → ¬Red(Gary)) ::: If Gary is green then Gary is not red.\n∀x (Cold(x) → Red(x)) ::: If someone is cold then they are red.\n∀x ((Quiet(x) ∧ Red(x)) → Green(x)) ::: All quiet, red people are green.\n∀x ((Cold(x) ∧ Furry(x)) → Green(x)) ::: If someone is cold and furry then they are green.\n∀x ((Cold(x) ∧ Quiet(x)) → Smart(x)) ::: All cold, quiet people are smart.\n∀x ((Cold(x) ∧ Green(x)) → Quiet(x)) ::: Cold, green people are quiet.\n∀x (Nice(Fiona) → Cold(Fiona)) ::: If Fiona is nice then Fiona is cold.\nConclusion:\nQuiet(Bob) ::: Bob is quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1103",
    "context": "Bob is big. Bob is green. Bob is young. Fiona is big. Fiona is green. Fiona is red. Fiona is smart. Gary is red. Gary is smart. Harry is nice. Harry is red. Harry is smart. If something is red and big then it is young. If something is green and big then it is red. All smart, round things are big. Red things are nice. Big things are red. Big, young things are green. Smart, young things are round. If something is red and nice then it is round. All big things are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nPremises:\nBig(Bob) ::: Bob is big.\nGreen(Bob) ::: Bob is green.\nYoung(Bob) ::: Bob is young.\nBig(Fiona) ::: Fiona is big.\nGreen(Fiona) ::: Fiona is green.\nRed(Fiona) ::: Fiona is red.\nSmart(Fiona) ::: Fiona is smart.\nRed(Gary) ::: Gary is red.\nSmart(Gary) ::: Gary is smart.\nNice(Harry) ::: Harry is nice.\nRed(Harry) ::: Harry is red.\nSmart(Harry) ::: Harry is smart.\n∀x ((Red(x) ∧ Big(x)) → Young(x)) ::: If something is red and big then it is young.\n∀x ((Green(x) ∧ Big(x)) → Red(x)) ::: If something is green and big then it is red.\n∀x ((Smart(x) ∧ Round(x)) → Big(x)) ::: All smart, round things are big.\n∀x (Red(x) → Nice(x)) ::: Red things are nice.\n∀x (Big(x) → Red(x)) ::: Big things are red.\n∀x ((Big(x) ∧ Young(x)) → Green(x)) ::: Big, young things are green.\n∀x ((Smart(x) ∧ Young(x)) → Round(x)) ::: Smart, young things are round.\n∀x ((Red(x) ∧ Nice(x)) → Round(x)) ::: If something is red and nice then it is round.\n∀x (Big(x) → Smart(x)) ::: All big things are smart.\nConclusion:\n¬Smart(Harry) ::: Harry is not smart."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-224",
    "context": "The dog chases the lion. The dog is nice. The lion does not eat the tiger. The lion is not big. The lion visits the tiger. The mouse does not chase the tiger. The mouse is nice. The tiger chases the lion. The tiger eats the dog. The tiger does not eat the mouse. The tiger visits the lion. If something visits the dog and it is kind then it visits the mouse. If something chases the dog then it is not red. If something chases the lion and it visits the dog then it chases the dog. If something chases the lion then it is big. If something eats the lion then it is not cold. If something is big then it visits the dog. If something visits the mouse then the mouse is red. If the tiger visits the dog and the dog is not big then the dog chases the mouse. If something visits the tiger and the tiger is not red then it is not nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not chase the mouse.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nNice(x) ::: x is nice.\nEats(x, y) ::: x eats y.\nBig(x) ::: x is big.\nVisits(x, y) ::: x visits y.\nRed(x) ::: x is red.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\n\nPremises:\nChases(Dog, Lion) ::: The dog chases the lion.\nNice(Dog) ::: The dog is nice.\n¬Eats(Lion, Tiger) ::: The lion does not eat the tiger.\n¬Big(Lion) ::: The lion is not big.\nVisits(Lion, Tiger) ::: The lion visits the tiger.\n¬Chases(Mouse, Tiger) ::: The mouse does not chase the tiger.\nNice(Mouse) ::: The mouse is nice.\nChases(Tiger, Lion) ::: The tiger chases the lion.\nEats(Tiger, Dog) ::: The tiger eats the dog.\n¬Eats(Tiger, Mouse) ::: The tiger does not eat the mouse.\nVisits(Tiger, Lion) ::: The tiger visits the lion.\n∀x ((Visits(x, Dog) ∧ Kind(x)) → Visits(x, Mouse)) ::: If something visits the dog and it is kind then it visits the mouse.\n∀x (Chases(x, Dog) → ¬Red(x)) ::: If something chases the dog then it is not red.\n∀x ((Chases(x, Lion) ∧ Visits(x, Dog)) → Chases(x, Dog)) ::: If something chases the lion and it visits the dog then it chases the dog.\n∀x (Chases(x, Lion) → Big(x)) ::: If something chases the lion then it is big.\n∀x (Eats(x, Lion) → ¬Cold(x)) ::: If something eats the lion then it is not cold.\n∀x (Big(x) → Visits(x, Dog)) ::: If something is big then it visits the dog.\n∀x (Visits(x, Mouse) → Red(Mouse)) ::: If something visits the mouse then the mouse is red.\n∀x ((Visits(x, Tiger) ∧ ¬Red(Tiger)) → ¬Nice(x)) ::: If something visits the tiger and the tiger is not red then it is not nice.\n\nConclusion:\n¬Chases(Dog, Mouse) ::: The dog does not chase the mouse."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-983",
    "context": "The bald eagle chases the tiger. The bald eagle is cold. The bald eagle is rough. The dog chases the rabbit. The dog eats the rabbit. The rabbit chases the dog. The rabbit is round. The tiger chases the dog. The tiger eats the rabbit. The tiger is cold. If someone visits the dog and the dog eats the bald eagle then the bald eagle is green. If someone is red then they chase the rabbit. If someone eats the dog then they eat the rabbit. If someone chases the rabbit and the rabbit is green then they are green. If someone is green then they eat the dog. If someone visits the bald eagle and they are round then the bald eagle is green. If someone visits the rabbit and they eat the bald eagle then they eat the dog. If someone chases the dog then they visit the bald eagle. If someone is rough and they eat the rabbit then they eat the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is rough.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nEats(x, y) ::: x eats y.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nVisits(x, y) ::: x visits y.\nPremises:\nChases(BaldEagle, Tiger) ::: The bald eagle chases the tiger.\nCold(BaldEagle) ::: The bald eagle is cold.\nRough(BaldEagle) ::: The bald eagle is rough.\nChases(Dog, Rabbit) ::: The dog chases the rabbit.\nEats(Dog, Rabbit) ::: The dog eats the rabbit.\nChases(Rabbit, Dog) ::: The rabbit chases the dog.\nRound(Rabbit) ::: The rabbit is round.\nChases(Tiger, Dog) ::: The tiger chases the dog.\nEats(Tiger, Rabbit) ::: The tiger eats the rabbit.\nCold(Tiger) ::: The tiger is cold.\n∀x ((Visits(x, Dog) ∧ Eats(Dog, BaldEagle)) → Green(BaldEagle)) ::: If someone visits the dog and the dog eats the bald eagle then the bald eagle is green.\n∀x (Red(x) → Chases(x, Rabbit)) ::: If someone is red then they chase the rabbit.\n∀x (Eats(x, Dog) → Eats(x, Rabbit)) ::: If someone eats the dog then they eat the rabbit.\n∀x ((Chases(x, Rabbit) ∧ Green(Rabbit)) → Green(x)) ::: If someone chases the rabbit and the rabbit is green then they are green.\n∀x (Green(x) → Eats(x, Dog)) ::: If someone is green then they eat the dog.\n∀x ((Visits(x, BaldEagle) ∧ Round(x)) → Green(BaldEagle)) ::: If someone visits the bald eagle and they are round then the bald eagle is green.\n∀x ((Visits(x, Rabbit) ∧ Eats(x, BaldEagle)) → Eats(x, Dog)) ::: If someone visits the rabbit and they eat the bald eagle then they eat the dog.\n∀x (Chases(x, Dog) → Visits(x, BaldEagle)) ::: If someone chases the dog then they visit the bald eagle.\n∀x ((Rough(x) ∧ Eats(x, Rabbit)) → Eats(x, Tiger)) ::: If someone is rough and they eat the rabbit then they eat the tiger.\nConclusion:\nRough(BaldEagle) ::: The bald eagle is rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1205",
    "context": "Anne is blue. Anne is furry. Anne is red. Charlie is white. Gary is nice. Gary is rough. Harry is nice. Kind, white people are furry. All blue people are furry. Red people are blue. If someone is kind then they are furry. If Harry is nice and Harry is rough then Harry is red. White, rough people are kind. Blue, red people are white. Nice people are rough. If someone is kind and furry then they are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nKind(x) ::: x is kind.\nPremises:\nBlue(Anne) ::: Anne is blue.\nFurry(Anne) ::: Anne is furry.\nRed(Anne) ::: Anne is red.\nWhite(Charlie) ::: Charlie is white.\nNice(Gary) ::: Gary is nice.\nRough(Gary) ::: Gary is rough.\nNice(Harry) ::: Harry is nice.\n∀x ((Kind(x) ∧ White(x)) → Furry(x)) ::: Kind, white people are furry.\n∀x (Blue(x) → Furry(x)) ::: All blue people are furry.\n∀x (Red(x) → Blue(x)) ::: Red people are blue.\n∀x (Kind(x) → Furry(x)) ::: If someone is kind then they are furry.\n∀x ((Nice(Harry) ∧ Rough(Harry)) → Red(Harry)) ::: If Harry is nice and Harry is rough then Harry is red.\n∀x ((White(x) ∧ Rough(x)) → Kind(x)) ::: White, rough people are kind.\n∀x ((Blue(x) ∧ Red(x)) → White(x)) ::: Blue, red people are white.\n∀x (Nice(x) → Rough(x)) ::: Nice people are rough.\n∀x ((Kind(x) ∧ Furry(x)) → Rough(x)) ::: If someone is kind and furry then they are rough.\nConclusion:\n¬White(Charlie) ::: Charlie is not white."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-281",
    "context": "The bear eats the cow. The cat chases the bear. The cat eats the bear. The cat eats the tiger. The cat is green. The cat is kind. The cat is rough. The cat sees the bear. The cat sees the tiger. The cow eats the bear. The cow eats the tiger. The cow is green. The cow sees the cat. The tiger chases the bear. The tiger chases the cat. The tiger chases the cow. If someone chases the bear and the bear is cold then they eat the cat. If someone chases the bear and the bear chases the tiger then the bear sees the tiger. If the cat chases the bear and the cat sees the tiger then the bear chases the tiger. If someone chases the tiger and they are green then the tiger chases the cow. Nice, kind people are cold. If someone chases the bear then the bear chases the cat. If someone chases the cat then they are nice. If someone is nice then they are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is not kind.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nChases(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nPremises:\nEats(bear, cow) ::: The bear eats the cow.\nChases(cat, bear) ::: The cat chases the bear.\nEats(cat, bear) ::: The cat eats the bear.\nEats(cat, tiger) ::: The cat eats the tiger.\nGreen(cat) ::: The cat is green.\nKind(cat) ::: The cat is kind.\nRough(cat) ::: The cat is rough.\nSees(cat, bear) ::: The cat sees the bear.\nSees(cat, tiger) ::: The cat sees the tiger.\nEats(cow, bear) ::: The cow eats the bear.\nEats(cow, tiger) ::: The cow eats the tiger.\nGreen(cow) ::: The cow is green.\nSees(cow, cat) ::: The cow sees the cat.\nChases(tiger, bear) ::: The tiger chases the bear.\nChases(tiger, cat) ::: The tiger chases the cat.\nChases(tiger, cow) ::: The tiger chases the cow.\n∀x ((Chases(x, bear) ∧ Cold(bear)) → Eats(x, cat)) ::: If someone chases the bear and the bear is cold then they eat the cat.\n∀x ((Chases(x, bear) ∧ Chases(bear, tiger)) → Sees(bear, tiger)) ::: If someone chases the bear and the bear chases the tiger then the bear sees the tiger.\n∀x ((Chases(cat, bear) ∧ Sees(cat, tiger)) → Chases(bear, tiger)) ::: If the cat chases the bear and the cat sees the tiger then the bear chases the tiger.\n∀x ((Chases(tiger, x) ∧ Green(x)) → Chases(tiger, cow)) ::: If someone chases the tiger and they are green then the tiger chases the cow.\n∀x (Nice(x) → Cold(x)) ::: Nice, kind people are cold.\n∀x (Chases(x, bear) → Chases(bear, cat)) ::: If someone chases the bear then the bear chases the cat.\n∀x (Chases(x, cat) → Nice(x)) ::: If someone chases the cat then they are nice.\n∀x (Nice(x) → Kind(x)) ::: If someone is nice then they are kind.\nConclusion:\n¬Kind(cow) ::: The cow is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-766",
    "context": "Bob is big. Bob is round. Charlie is not cold. Charlie is green. Fiona is big. Fiona is green. Fiona is nice. Fiona is round. Harry is cold. Harry is nice. If someone is rough then they are not nice. All green people are nice. If someone is cold then they are nice. All big people are round. All green, blue people are big. If someone is round then they are not rough. All nice people are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is nice.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nBlue(x) ::: x is blue.\nPremises:\nBig(Bob) ::: Bob is big.\nRound(Bob) ::: Bob is round.\n¬Cold(Charlie) ::: Charlie is not cold.\nGreen(Charlie) ::: Charlie is green.\nBig(Fiona) ::: Fiona is big.\nGreen(Fiona) ::: Fiona is green.\nNice(Fiona) ::: Fiona is nice.\nRound(Fiona) ::: Fiona is round.\nCold(Harry) ::: Harry is cold.\nNice(Harry) ::: Harry is nice.\n∀x (Rough(x) → ¬Nice(x)) ::: If someone is rough then they are not nice.\n∀x (Green(x) → Nice(x)) ::: All green people are nice.\n∀x (Cold(x) → Nice(x)) ::: If someone is cold then they are nice.\n∀x (Big(x) → Round(x)) ::: All big people are round.\n∀x ((Green(x) ∧ Blue(x)) → Big(x)) ::: All green, blue people are big.\n∀x (Round(x) → ¬Rough(x)) ::: If someone is round then they are not rough.\n∀x (Nice(x) → Blue(x)) ::: All nice people are blue.\nConclusion:\nNice(Fiona) ::: Fiona is nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-878",
    "context": "Anne is smart. Bob is big. Bob is blue. Bob is rough. Bob is smart. Charlie is smart. Dave is quiet. Blue, round people are rough. If someone is smart and quiet then they are young. Smart people are quiet. If someone is round then they are blue. If Dave is big then Dave is quiet. If someone is blue then they are young. All rough, young people are round. Smart people are rough. Blue, round people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not big.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nPremises:\nSmart(Anne) ::: Anne is smart.\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\nRough(Bob) ::: Bob is rough.\nSmart(Bob) ::: Bob is smart.\nSmart(Charlie) ::: Charlie is smart.\nQuiet(Dave) ::: Dave is quiet.\n∀x ((Blue(x) ∧ Round(x)) → Rough(x)) ::: Blue, round people are rough.\n∀x ((Smart(x) ∧ Quiet(x)) → Young(x)) ::: If someone is smart and quiet then they are young.\n∀x (Smart(x) → Quiet(x)) ::: Smart people are quiet.\n∀x (Round(x) → Blue(x)) ::: If someone is round then they are blue.\n∀x ((Big(Dave) → Quiet(Dave))) ::: If Dave is big then Dave is quiet.\n∀x ((Blue(x) → Young(x))) ::: If someone is blue then they are young.\n∀x ((Rough(x) ∧ Young(x)) → Round(x)) ::: All rough, young people are round.\n∀x (Smart(x) → Rough(x)) ::: Smart people are rough.\n∀x ((Blue(x) ∧ Round(x)) → Big(x)) ::: Blue, round people are big.\nConclusion:\n¬Big(Bob) ::: Bob is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-284",
    "context": "Anne is red. Anne is round. Erin is quiet. Erin is round. Fiona is red. Harry is rough. Harry is smart. All rough things are white. If Fiona is smart and Fiona is round then Fiona is white. If something is young then it is smart. Red, white things are young. Red things are quiet. Young things are red. If something is quiet then it is rough. All round, white things are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nRed(Anne) ::: Anne is red.\nRound(Anne) ::: Anne is round.\nQuiet(Erin) ::: Erin is quiet.\nRound(Erin) ::: Erin is round.\nRed(Fiona) ::: Fiona is red.\nRough(Harry) ::: Harry is rough.\nSmart(Harry) ::: Harry is smart.\n∀x (Rough(x) → White(x)) ::: All rough things are white.\n∀x ((Smart(x) ∧ Round(x)) → White(x)) ::: If Fiona is smart and round then Fiona is white.\n∀x (Young(x) → Smart(x)) ::: If something is young then it is smart.\n∀x ((Red(x) ∧ White(x)) → Young(x)) ::: Red, white things are young.\n∀x (Red(x) → Quiet(x)) ::: Red things are quiet.\n∀x (Young(x) → Red(x)) ::: Young things are red.\n∀x (Quiet(x) → Rough(x)) ::: If something is quiet then it is rough.\n∀x ((Round(x) ∧ White(x)) → Young(x)) ::: All round, white things are young.\nConclusion:\n¬Quiet(Harry) ::: Harry is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-278",
    "context": "The bald eagle eats the lion. The bald eagle is young. The cow sees the dog. The cow sees the lion. The cow does not visit the bald eagle. The cow visits the dog. The dog does not eat the cow. The dog is round. The dog does not visit the bald eagle. The dog visits the cow. The lion is round. The lion is young. If someone visits the dog and they see the cow then they do not see the bald eagle. If someone visits the dog then they eat the bald eagle. If someone eats the bald eagle then the bald eagle is rough. If someone is rough then they visit the dog. If someone visits the lion and they are not nice then the lion eats the bald eagle. If someone sees the lion and the lion eats the dog then they eat the cow. If someone visits the dog then they see the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not eat the cow.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nYoung(x) ::: x is young.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nPremises:\nEats(bald eagle, lion) ::: The bald eagle eats the lion.\nYoung(bald eagle) ::: The bald eagle is young.\nSees(cow, dog) ::: The cow sees the dog.\nSees(cow, lion) ::: The cow sees the lion.\n¬Visits(cow, bald eagle) ::: The cow does not visit the bald eagle.\nVisits(cow, dog) ::: The cow visits the dog.\n¬Eats(dog, cow) ::: The dog does not eat the cow.\nRound(dog) ::: The dog is round.\n¬Visits(dog, bald eagle) ::: The dog does not visit the bald eagle.\nVisits(dog, cow) ::: The dog visits the cow.\nRound(lion) ::: The lion is round.\nYoung(lion) ::: The lion is young.\n∀x ((Visits(x, dog) ∧ Sees(x, cow)) → ¬Sees(x, bald eagle)) ::: If someone visits the dog and they see the cow then they do not see the bald eagle.\n∀x (Visits(x, dog) → Eats(x, bald eagle)) ::: If someone visits the dog then they eat the bald eagle.\n∀x (Eats(x, bald eagle) → Rough(bald eagle)) ::: If someone eats the bald eagle then the bald eagle is rough.\n∀x (Rough(x) → Visits(x, dog)) ::: If someone is rough then they visit the dog.\n∀x ((Visits(x, lion) ∧ ¬Nice(x)) → Eats(lion, bald eagle)) ::: If someone visits the lion and they are not nice then the lion eats the bald eagle.\n∀x ((Sees(x, lion) ∧ Eats(lion, dog)) → Eats(x, cow)) ::: If someone sees the lion and the lion eats the dog then they eat the cow.\n∀x (Visits(x, dog) → Sees(x, cow)) ::: If someone visits the dog then they see the cow.\nConclusion:\n¬Eats(dog, cow) ::: The dog does not eat the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-78",
    "context": "The lion eats the mouse. The lion is green. The mouse is kind. The squirrel is green. The squirrel is round. The squirrel likes the lion. The squirrel visits the mouse. The squirrel visits the tiger. The tiger is kind. The tiger is nice. If someone visits the mouse then the mouse is nice. If someone eats the mouse and they visit the tiger then the mouse is green. Big, nice people are round. If the mouse is green then the mouse is big. If the lion is nice then the lion does not visit the tiger. If someone is round and big then they like the lion. If someone is green then they visit the tiger. If someone eats the tiger and they are not nice then the tiger likes the lion. If someone likes the tiger and they do not eat the squirrel then the tiger likes the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not eat the mouse.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nBig(x) ::: x is big.\nPremises:\nEats(lion, mouse) ::: The lion eats the mouse.\nGreen(lion) ::: The lion is green.\nKind(mouse) ::: The mouse is kind.\nGreen(squirrel) ::: The squirrel is green.\nRound(squirrel) ::: The squirrel is round.\nLikes(squirrel, lion) ::: The squirrel likes the lion.\nVisits(squirrel, mouse) ::: The squirrel visits the mouse.\nVisits(squirrel, tiger) ::: The squirrel visits the tiger.\nKind(tiger) ::: The tiger is kind.\nNice(tiger) ::: The tiger is nice.\n∀x (Visits(x, mouse) → Nice(mouse)) ::: If someone visits the mouse then the mouse is nice.\n∀x ((Eats(x, mouse) ∧ Visits(x, tiger)) → Green(mouse)) ::: If someone eats the mouse and they visit the tiger then the mouse is green.\n∀x ((Big(x) ∧ Nice(x)) → Round(x)) ::: Big, nice people are round.\n∀x (Green(mouse) → Big(mouse)) ::: If the mouse is green then the mouse is big.\n∀x (Nice(lion) → ¬Visits(lion, tiger)) ::: If the lion is nice then the lion does not visit the tiger.\n∀x ((Round(x) ∧ Big(x)) → Likes(x, lion)) ::: If someone is round and big then they like the lion.\n∀x (Green(x) → Visits(x, tiger)) ::: If someone is green then they visit the tiger.\n∀x ((Eats(x, tiger) ∧ ¬Nice(x)) → Likes(tiger, lion)) ::: If someone eats the tiger and they are not nice then the tiger likes the lion.\n∀x ((Likes(x, tiger) ∧ ¬Eats(x, squirrel)) → Likes(tiger, lion)) ::: If someone likes the tiger and they do not eat the squirrel then the tiger likes the lion.\nConclusion:\n¬Eats(lion, mouse) ::: The lion does not eat the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1176",
    "context": "Bob is not round. Charlie is furry. Charlie is nice. Charlie is smart. Erin is red. Fiona is furry. Fiona is young. All red people are not round. Red people are not blue. All young people are furry. If Erin is red and Erin is not round then Erin is nice. If someone is round and nice then they are not young. All smart people are young. Nice people are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not furry.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nPremises:\n¬Round(Bob) ::: Bob is not round.\nFurry(Charlie) ::: Charlie is furry.\nNice(Charlie) ::: Charlie is nice.\nSmart(Charlie) ::: Charlie is smart.\nRed(Erin) ::: Erin is red.\nFurry(Fiona) ::: Fiona is furry.\nYoung(Fiona) ::: Fiona is young.\n∀x (Red(x) → ¬Round(x)) ::: All red people are not round.\n∀x (Red(x) → ¬Blue(x)) ::: Red people are not blue.\n∀x (Young(x) → Furry(x)) ::: All young people are furry.\n∀x ((Red(Erin) ∧ ¬Round(Erin)) → Nice(Erin)) ::: If Erin is red and Erin is not round then Erin is nice.\n∀x ((Round(x) ∧ Nice(x)) → ¬Young(x)) ::: If someone is round and nice then they are not young.\n∀x (Smart(x) → Young(x)) ::: All smart people are young.\n∀x (Nice(x) → Smart(x)) ::: Nice people are smart.\nConclusion:\n¬Furry(Bob) ::: Bob is not furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-637",
    "context": "The bald eagle eats the bear. The bald eagle is nice. The bald eagle visits the mouse. The bear eats the tiger. The bear is kind. The bear visits the tiger. The mouse eats the bear. The mouse is green. The mouse is kind. The mouse sees the bald eagle. The mouse sees the bear. The mouse sees the tiger. The tiger eats the mouse. The tiger sees the bald eagle. The tiger sees the bear. The tiger visits the mouse. If something is kind then it visits the bald eagle. If something eats the bear then the bear sees the bald eagle. If the bald eagle is round then the bald eagle eats the bear. If something eats the bald eagle and it sees the bear then the bald eagle is kind. If something sees the bald eagle then the bald eagle visits the mouse. If something visits the bald eagle and the bald eagle visits the mouse then it eats the bald eagle. If something is blue and it eats the tiger then the tiger eats the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is nice.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nNice(x) ::: x is nice.\nVisits(x, y) ::: x visits y.\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nSees(x, y) ::: x sees y.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nPremises:\nEats(bald eagle, bear) ::: The bald eagle eats the bear.\nNice(bald eagle) ::: The bald eagle is nice.\nVisits(bald eagle, mouse) ::: The bald eagle visits the mouse.\nEats(bear, tiger) ::: The bear eats the tiger.\nKind(bear) ::: The bear is kind.\nVisits(bear, tiger) ::: The bear visits the tiger.\nEats(mouse, bear) ::: The mouse eats the bear.\nGreen(mouse) ::: The mouse is green.\nKind(mouse) ::: The mouse is kind.\nSees(mouse, bald eagle) ::: The mouse sees the bald eagle.\nSees(mouse, bear) ::: The mouse sees the bear.\nSees(mouse, tiger) ::: The mouse sees the tiger.\nEats(tiger, mouse) ::: The tiger eats the mouse.\nSees(tiger, bald eagle) ::: The tiger sees the bald eagle.\nSees(tiger, bear) ::: The tiger sees the bear.\nVisits(tiger, mouse) ::: The tiger visits the mouse.\n∀x (Kind(x) → Visits(x, bald eagle)) ::: If something is kind then it visits the bald eagle.\n∀x (Eats(x, bear) → Sees(bear, bald eagle)) ::: If something eats the bear then the bear sees the bald eagle.\n∀x (Round(bald eagle) → Eats(bald eagle, bear)) ::: If the bald eagle is round then the bald eagle eats the bear.\n∀x ((Eats(x, bald eagle) ∧ Sees(x, bear)) → Kind(bald eagle)) ::: If something eats the bald eagle and it sees the bear then the bald eagle is kind.\n∀x (Sees(x, bald eagle) → Visits(bald eagle, mouse)) ::: If something sees the bald eagle then the bald eagle visits the mouse.\n∀x ((Visits(x, bald eagle) ∧ Visits(bald eagle, mouse)) → Eats(x, bald eagle)) ::: If something visits the bald eagle and the bald eagle visits the mouse then it eats the bald eagle.\n∀x ((Blue(x) ∧ Eats(x, tiger)) → Eats(tiger, mouse)) ::: If something is blue and it eats the tiger then the tiger eats the mouse.\nConclusion:\nNice(bald eagle) ::: The bald eagle is nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-111",
    "context": "Bob is big. Bob is blue. Bob is cold. Bob is white. Dave is cold. Dave is kind. Dave is nice. Gary is cold. Gary is kind. Harry is white. All white things are blue. All big, kind things are nice. If something is nice then it is big. If something is kind then it is nice. If something is rough then it is white. If something is big and nice then it is rough. All white, blue things are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nPremises:\nBig(Bob) ::: Bob is big.\nBlue(Bob) ::: Bob is blue.\nCold(Bob) ::: Bob is cold.\nWhite(Bob) ::: Bob is white.\nCold(Dave) ::: Dave is cold.\nKind(Dave) ::: Dave is kind.\nNice(Dave) ::: Dave is nice.\nCold(Gary) ::: Gary is cold.\nKind(Gary) ::: Gary is kind.\nWhite(Harry) ::: Harry is white.\n∀x (White(x) → Blue(x)) ::: All white things are blue.\n∀x ((Big(x) ∧ Kind(x)) → Nice(x)) ::: All big, kind things are nice.\n∀x (Nice(x) → Big(x)) ::: If something is nice then it is big.\n∀x (Kind(x) → Nice(x)) ::: If something is kind then it is nice.\n∀x (Rough(x) → White(x)) ::: If something is rough then it is white.\n∀x ((Big(x) ∧ Nice(x)) → Rough(x)) ::: If something is big and nice then it is rough.\n∀x ((White(x) ∧ Blue(x)) → Cold(x)) ::: All white, blue things are cold.\nConclusion:\n¬Blue(Bob) ::: Bob is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-214",
    "context": "Anne is kind. Anne is round. Erin is furry. Erin is kind. Erin is young. Fiona is smart. Fiona is young. Harry is furry. Harry is round. Harry is smart. If something is round and rough then it is furry. If Harry is round then Harry is furry. Blue things are rough. All young, furry things are blue. Young, smart things are blue. If Anne is smart then Anne is young. All smart, blue things are kind. Kind things are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not furry.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nPremises:\nKind(Anne) ::: Anne is kind.\nRound(Anne) ::: Anne is round.\nFurry(Erin) ::: Erin is furry.\nKind(Erin) ::: Erin is kind.\nYoung(Erin) ::: Erin is young.\nSmart(Fiona) ::: Fiona is smart.\nYoung(Fiona) ::: Fiona is young.\nFurry(Harry) ::: Harry is furry.\nRound(Harry) ::: Harry is round.\nSmart(Harry) ::: Harry is smart.\n∀x ((Round(x) ∧ Rough(x)) → Furry(x)) ::: If something is round and rough then it is furry.\n∀x ((Round(Harry)) → Furry(Harry)) ::: If Harry is round then Harry is furry.\n∀x (Blue(x) → Rough(x)) ::: Blue things are rough.\n∀x ((Young(x) ∧ Furry(x)) → Blue(x)) ::: All young, furry things are blue.\n∀x ((Young(x) ∧ Smart(x)) → Blue(x)) ::: Young, smart things are blue.\n∀x ((Kind(x) ∧ Smart(x)) → Young(x)) ::: If Anne is smart then Anne is young.\n∀x ((Smart(x) ∧ Blue(x)) → Kind(x)) ::: All smart, blue things are kind.\n∀x (Kind(x) → Smart(x)) ::: Kind things are smart.\nConclusion:\n¬Furry(Fiona) ::: Fiona is not furry."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-242",
    "context": "The bald eagle chases the cow. The bald eagle is not kind. The bald eagle is round. The bear chases the tiger. The cow is red. The cow is round. The tiger sees the cow. If someone is young and they see the bald eagle then they see the bear. If someone chases the bear then the bear is young. If someone chases the tiger then they are rough. If someone chases the tiger then the tiger eats the bear. If the tiger is round and the tiger is kind then the tiger chases the bear. If someone is young then they see the bald eagle. If someone chases the cow then they chase the bear. If someone sees the bear then the bear chases the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger sees the cow.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nRed(x) ::: x is red.\nSees(x, y) ::: x sees y.\nYoung(x) ::: x is young.\nEats(x, y) ::: x eats y.\nPremises:\nChases(BaldEagle, Cow) ::: The bald eagle chases the cow.\n¬Kind(BaldEagle) ::: The bald eagle is not kind.\nRound(BaldEagle) ::: The bald eagle is round.\nChases(Bear, Tiger) ::: The bear chases the tiger.\nRed(Cow) ::: The cow is red.\nRound(Cow) ::: The cow is round.\nSees(Tiger, Cow) ::: The tiger sees the cow.\n∀x ((Young(x) ∧ Sees(x, BaldEagle)) → Sees(x, Bear)) ::: If someone is young and they see the bald eagle then they see the bear.\n∀x (Chases(x, Bear) → Young(Bear)) ::: If someone chases the bear then the bear is young.\n∀x (Chases(x, Tiger) → Rough(x)) ::: If someone chases the tiger then they are rough.\n∀x (Chases(x, Tiger) → Eats(Tiger, Bear)) ::: If someone chases the tiger then the tiger eats the bear.\n∀x ((Round(Tiger) ∧ Kind(Tiger)) → Chases(Tiger, Bear)) ::: If the tiger is round and the tiger is kind then the tiger chases the bear.\n∀x (Young(x) → Sees(x, BaldEagle)) ::: If someone is young then they see the bald eagle.\n∀x (Chases(x, Cow) → Chases(x, Bear)) ::: If someone chases the cow then they chase the bear.\n∀x (Sees(x, Bear) → Chases(Bear, Cow)) ::: If someone sees the bear then the bear chases the cow.\nConclusion:\nSees(Tiger, Cow) ::: The tiger sees the cow."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-341",
    "context": "The bald eagle is cold. The bald eagle is nice. The bald eagle likes the cow. The bald eagle likes the tiger. The bald eagle sees the cow. The bald eagle sees the dog. The bald eagle sees the tiger. The bald eagle visits the cow. The cow is young. The cow visits the bald eagle. The dog sees the bald eagle. The dog visits the tiger. The tiger is blue. The tiger is cold. The tiger is young. The tiger visits the cow. If something is big and it visits the bald eagle then it visits the cow. If something likes the tiger and the tiger is big then it is big. If something visits the cow and the cow is young then it is big. If something visits the tiger then it is young. If the tiger likes the dog then the tiger visits the bald eagle. If something is big then it visits the dog. If something visits the dog then it is cold. If something is young then it likes the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not young.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nBaldEagle(x) ::: x is a bald eagle.\nCow(x) ::: x is a cow.\nTiger(x) ::: x is a tiger.\nDog(x) ::: x is a dog.\nPremises:\nCold(BaldEagle) ::: The bald eagle is cold.\nNice(BaldEagle) ::: The bald eagle is nice.\nLikes(BaldEagle, Cow) ::: The bald eagle likes the cow.\nLikes(BaldEagle, Tiger) ::: The bald eagle likes the tiger.\nSees(BaldEagle, Cow) ::: The bald eagle sees the cow.\nSees(BaldEagle, Dog) ::: The bald eagle sees the dog.\nSees(BaldEagle, Tiger) ::: The bald eagle sees the tiger.\nVisits(BaldEagle, Cow) ::: The bald eagle visits the cow.\nYoung(Cow) ::: The cow is young.\nVisits(Cow, BaldEagle) ::: The cow visits the bald eagle.\nSees(Dog, BaldEagle) ::: The dog sees the bald eagle.\nVisits(Dog, Tiger) ::: The dog visits the tiger.\nBlue(Tiger) ::: The tiger is blue.\nCold(Tiger) ::: The tiger is cold.\nYoung(Tiger) ::: The tiger is young.\nVisits(Tiger, Cow) ::: The tiger visits the cow.\n∀x ((Big(x) ∧ Visits(x, BaldEagle)) → Visits(x, Cow)) ::: If something is big and it visits the bald eagle then it visits the cow.\n∀x ((Likes(x, Tiger) ∧ Big(Tiger)) → Big(x)) ::: If something likes the tiger and the tiger is big then it is big.\n∀x ((Visits(x, Cow) ∧ Young(Cow)) → Big(x)) ::: If something visits the cow and the cow is young then it is big.\n∀x (Visits(x, Tiger) → Young(x)) ::: If something visits the tiger then it is young.\n∀x ((Tiger(x) ∧ Likes(x, Dog)) → Visits(x, BaldEagle)) ::: If the tiger likes the dog then the tiger visits the bald eagle.\n∀x (Big(x) → Visits(x, Dog)) ::: If something is big then it visits the dog.\n∀x (Visits(x, Dog) → Cold(x)) ::: If something visits the dog then it is cold.\n∀x (Young(x) → Likes(x, Tiger)) ::: If something is young then it likes the tiger.\nConclusion:\n¬Young(Tiger) ::: The tiger is not young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-29",
    "context": "The bald eagle is big. The bald eagle is red. The bald eagle sees the tiger. The bald eagle visits the bear. The bear needs the bald eagle. The bear sees the bald eagle. The bear does not see the tiger. The rabbit is big. The rabbit needs the bald eagle. The rabbit needs the bear. The rabbit visits the tiger. The tiger needs the bald eagle. The tiger needs the rabbit. The tiger visits the bear. If something is big then it needs the tiger. If something needs the tiger and it sees the bald eagle then the tiger is big. If something needs the tiger and it visits the bear then the tiger needs the rabbit. If the bald eagle visits the bear and the bald eagle needs the tiger then the bear needs the tiger. If something needs the tiger then it is red. If the bear sees the rabbit then the rabbit sees the tiger. If something is blue then it visits the bear. If something is blue and it needs the tiger then it does not visit the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear does not visit the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nSees(x, y) ::: x sees y.\nVisits(x, y) ::: x visits y.\nNeeds(x, y) ::: x needs y.\nBlue(x) ::: x is blue.\nPremises:\nBig(bald_eagle) ::: The bald eagle is big.\nRed(bald_eagle) ::: The bald eagle is red.\nSees(bald_eagle, tiger) ::: The bald eagle sees the tiger.\nVisits(bald_eagle, bear) ::: The bald eagle visits the bear.\nNeeds(bear, bald_eagle) ::: The bear needs the bald eagle.\nSees(bear, bald_eagle) ::: The bear sees the bald eagle.\n¬Sees(bear, tiger) ::: The bear does not see the tiger.\nBig(rabbit) ::: The rabbit is big.\nNeeds(rabbit, bald_eagle) ::: The rabbit needs the bald eagle.\nNeeds(rabbit, bear) ::: The rabbit needs the bear.\nVisits(rabbit, tiger) ::: The rabbit visits the tiger.\nNeeds(tiger, bald_eagle) ::: The tiger needs the bald eagle.\nNeeds(tiger, rabbit) ::: The tiger needs the rabbit.\nVisits(tiger, bear) ::: The tiger visits the bear.\n∀x (Big(x) → Needs(x, tiger)) ::: If something is big then it needs the tiger.\n∀x ((Needs(x, tiger) ∧ Sees(x, bald_eagle)) → Big(tiger)) ::: If something needs the tiger and it sees the bald eagle then the tiger is big.\n∀x ((Needs(x, tiger) ∧ Visits(x, bear)) → Needs(tiger, rabbit)) ::: If something needs the tiger and it visits the bear then the tiger needs the rabbit.\n∀x ((Visits(bald_eagle, bear) ∧ Needs(bald_eagle, tiger)) → Needs(bear, tiger)) ::: If the bald eagle visits the bear and the bald eagle needs the tiger then the bear needs the tiger.\n∀x (Needs(x, tiger) → Red(x)) ::: If something needs the tiger then it is red.\n∀x ((Sees(bear, rabbit)) → Sees(rabbit, tiger)) ::: If the bear sees the rabbit then the rabbit sees the tiger.\n∀x ((Blue(x)) → Visits(x, bear)) ::: If something is blue then it visits the bear.\n∀x ((Blue(x) ∧ Needs(x, tiger)) → ¬Visits(x, bald_eagle)) ::: If something is blue and it needs the tiger then it does not visit the bald eagle.\nConclusion:\n¬Visits(bear, bear) ::: The bear does not visit the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-233",
    "context": "Dave is furry. Dave is green. Dave is kind. Dave is smart. Erin is rough. Gary is furry. Gary is green. Gary is kind. Harry is not furry. Harry is kind. Harry is white. All furry, big things are green. If something is big and furry then it is green. If something is white and rough then it is furry. If something is smart then it is white. All big, rough things are white. If something is big and furry then it is white. Rough things are big. If something is big then it is rough. All green, furry things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nPremises:\nFurry(Dave) ::: Dave is furry.\nGreen(Dave) ::: Dave is green.\nKind(Dave) ::: Dave is kind.\nSmart(Dave) ::: Dave is smart.\nRough(Erin) ::: Erin is rough.\nFurry(Gary) ::: Gary is furry.\nGreen(Gary) ::: Gary is green.\nKind(Gary) ::: Gary is kind.\n¬Furry(Harry) ::: Harry is not furry.\nKind(Harry) ::: Harry is kind.\nWhite(Harry) ::: Harry is white.\n∀x ((Furry(x) ∧ Big(x)) → Green(x)) ::: All furry, big things are green.\n∀x ((Big(x) ∧ Furry(x)) → Green(x)) ::: If something is big and furry then it is green.\n∀x ((White(x) ∧ Rough(x)) → Furry(x)) ::: If something is white and rough then it is furry.\n∀x (Smart(x) → White(x)) ::: If something is smart then it is white.\n∀x ((Big(x) ∧ Rough(x)) → White(x)) ::: All big, rough things are white.\n∀x ((Big(x) ∧ Furry(x)) → White(x)) ::: If something is big and furry then it is white.\n∀x (Rough(x) → Big(x)) ::: Rough things are big.\n∀x (Big(x) → Rough(x)) ::: If something is big then it is rough.\n∀x ((Green(x) ∧ Furry(x)) → Kind(x)) ::: All green, furry things are kind.\nConclusion:\nFurry(Dave) ::: Dave is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-789",
    "context": "The bald eagle eats the lion. The bald eagle is cold. The bald eagle sees the cat. The cat eats the lion. The cat is round. The cat sees the bald eagle. The lion chases the cat. The lion eats the cat. The lion eats the squirrel. The squirrel chases the bald eagle. The squirrel chases the lion. The squirrel eats the lion. The squirrel is cold. The squirrel is kind. If something is round then it sees the cat. If something chases the cat and the cat is cold then the cat eats the squirrel. If something chases the cat and it is kind then it is round. If the lion eats the squirrel and the lion sees the cat then the lion is young. If something is cold then it chases the cat. If the squirrel eats the bald eagle and the bald eagle is cold then the bald eagle is round. If something chases the bald eagle and it is young then it chases the squirrel. If something eats the squirrel and it eats the cat then the squirrel chases the cat. If something is round then it eats the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not chase the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nSees(x, y) ::: x sees y.\nRound(x) ::: x is round.\nChases(x, y) ::: x chases y.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nPremises:\nEats(bald eagle, lion) ::: The bald eagle eats the lion.\nCold(bald eagle) ::: The bald eagle is cold.\nSees(bald eagle, cat) ::: The bald eagle sees the cat.\nEats(cat, lion) ::: The cat eats the lion.\nRound(cat) ::: The cat is round.\nSees(cat, bald eagle) ::: The cat sees the bald eagle.\nChases(lion, cat) ::: The lion chases the cat.\nEats(lion, cat) ::: The lion eats the cat.\nEats(lion, squirrel) ::: The lion eats the squirrel.\nChases(squirrel, bald eagle) ::: The squirrel chases the bald eagle.\nChases(squirrel, lion) ::: The squirrel chases the lion.\nEats(squirrel, lion) ::: The squirrel eats the lion.\nCold(squirrel) ::: The squirrel is cold.\nKind(squirrel) ::: The squirrel is kind.\n∀x ((Round(x) → Sees(x, cat))) ::: If something is round then it sees the cat.\n∀x ((Chases(x, cat) ∧ Cold(cat)) → Eats(cat, squirrel)) ::: If something chases the cat and the cat is cold then the cat eats the squirrel.\n∀x ((Chases(x, cat) ∧ Kind(x)) → Round(x)) ::: If something chases the cat and it is kind then it is round.\n∀x ((Eats(lion, squirrel) ∧ Sees(lion, cat)) → Young(lion)) ::: If the lion eats the squirrel and the lion sees the cat then the lion is young.\n∀x (Cold(x) → Chases(x, cat)) ::: If something is cold then it chases the cat.\n∀x ((Eats(squirrel, bald eagle) ∧ Cold(bald eagle)) → Round(bald eagle)) ::: If the squirrel eats the bald eagle and the bald eagle is cold then the bald eagle is round.\n∀x ((Chases(x, bald eagle) ∧ Young(x)) → Chases(x, squirrel)) ::: If something chases the bald eagle and it is young then it chases the squirrel.\n∀x ((Eats(x, squirrel) ∧ Eats(x, cat)) → Chases(squirrel, cat)) ::: If something eats the squirrel and it eats the cat then the squirrel chases the cat.\n∀x ((Round(x) → Eats(x, bald eagle))) ::: If something is round then it eats the bald eagle.\nConclusion:\n¬Chases(squirrel, bald eagle) ::: The squirrel does not chase the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-781",
    "context": "The bald eagle chases the rabbit. The bald eagle is red. The bald eagle is round. The bald eagle likes the squirrel. The lion chases the squirrel. The lion is round. The rabbit is green. The rabbit is nice. The rabbit likes the bald eagle. The rabbit sees the squirrel. The squirrel is round. The squirrel sees the bald eagle. If something likes the rabbit then the rabbit sees the lion. If something chases the squirrel and it likes the bald eagle then the squirrel is nice. If something is nice and it likes the squirrel then the squirrel chases the rabbit. If something likes the bald eagle and it sees the rabbit then it likes the squirrel. If something likes the squirrel and it likes the lion then the lion likes the bald eagle. If something is young then it sees the rabbit. Green things are round. All round things are young. If the squirrel is nice then the squirrel likes the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not like the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nLikes(x, y) ::: x likes y.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nSees(x, y) ::: x sees y.\nYoung(x) ::: x is young.\nPremises:\nChases(BaldEagle, Rabbit) ::: The bald eagle chases the rabbit.\nRed(BaldEagle) ::: The bald eagle is red.\nRound(BaldEagle) ::: The bald eagle is round.\nLikes(BaldEagle, Squirrel) ::: The bald eagle likes the squirrel.\nChases(Lion, Squirrel) ::: The lion chases the squirrel.\nRound(Lion) ::: The lion is round.\nGreen(Rabbit) ::: The rabbit is green.\nNice(Rabbit) ::: The rabbit is nice.\nLikes(Rabbit, BaldEagle) ::: The rabbit likes the bald eagle.\nSees(Rabbit, Squirrel) ::: The rabbit sees the squirrel.\nRound(Squirrel) ::: The squirrel is round.\nSees(Squirrel, BaldEagle) ::: The squirrel sees the bald eagle.\n∀x ((Likes(x, Rabbit)) → Sees(Rabbit, Lion)) ::: If something likes the rabbit then the rabbit sees the lion.\n∀x ((Chases(x, Squirrel) ∧ Likes(x, BaldEagle)) → Nice(Squirrel)) ::: If something chases the squirrel and it likes the bald eagle then the squirrel is nice.\n∀x ((Nice(x) ∧ Likes(x, Squirrel)) → Chases(Squirrel, Rabbit)) ::: If something is nice and it likes the squirrel then the squirrel chases the rabbit.\n∀x ((Likes(x, BaldEagle) ∧ Sees(x, Rabbit)) → Likes(x, Squirrel)) ::: If something likes the bald eagle and it sees the rabbit then it likes the squirrel.\n∀x ((Likes(x, Squirrel) ∧ Likes(x, Lion)) → Likes(Lion, BaldEagle)) ::: If something likes the squirrel and it likes the lion then the lion likes the bald eagle.\n∀x (Young(x) → Sees(x, Rabbit)) ::: If something is young then it sees the rabbit.\n∀x (Green(x) → Round(x)) ::: Green things are round.\n∀x (Round(x) → Young(x)) ::: All round things are young.\n∀x ((Nice(Squirrel)) → Likes(Squirrel, Rabbit)) ::: If the squirrel is nice then the squirrel likes the rabbit.\nConclusion:\n¬Likes(Lion, Squirrel) ::: The lion does not like the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-616",
    "context": "The bald eagle is big. The bald eagle likes the cow. The bald eagle sees the rabbit. The cow is big. The cow sees the bald eagle. The dog is big. The dog is young. The dog likes the bald eagle. The rabbit sees the bald eagle. The rabbit visits the bald eagle. If the bald eagle sees the rabbit then the rabbit is big. If something likes the bald eagle then it is blue. If something likes the rabbit and the rabbit visits the cow then the cow is young. If something visits the rabbit then it is round. If something is round and it sees the cow then the cow sees the rabbit. If something is big then it visits the cow. If something sees the rabbit then the rabbit visits the bald eagle. If something is blue then it likes the rabbit. If something likes the cow and the cow is young then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nYoung(x) ::: x is young.\nVisits(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nPremises:\nBig(bald_eagle) ::: The bald eagle is big.\nLikes(bald_eagle, cow) ::: The bald eagle likes the cow.\nSees(bald_eagle, rabbit) ::: The bald eagle sees the rabbit.\nBig(cow) ::: The cow is big.\nSees(cow, bald_eagle) ::: The cow sees the bald eagle.\nBig(dog) ::: The dog is big.\nYoung(dog) ::: The dog is young.\nLikes(dog, bald_eagle) ::: The dog likes the bald eagle.\nSees(rabbit, bald_eagle) ::: The rabbit sees the bald eagle.\nVisits(rabbit, bald_eagle) ::: The rabbit visits the bald eagle.\n∀x ((Sees(bald_eagle, rabbit)) → Big(rabbit)) ::: If the bald eagle sees the rabbit then the rabbit is big.\n∀x ((Likes(x, bald_eagle)) → Blue(x)) ::: If something likes the bald eagle then it is blue.\n∀x ((Likes(x, rabbit) ∧ Visits(rabbit, cow)) → Young(cow)) ::: If something likes the rabbit and the rabbit visits the cow then the cow is young.\n∀x (Visits(x, rabbit) → Round(x)) ::: If something visits the rabbit then it is round.\n∀x ((Round(x) ∧ Sees(x, cow)) → Sees(cow, rabbit)) ::: If something is round and it sees the cow then the cow sees the rabbit.\n∀x (Big(x) → Visits(x, cow)) ::: If something is big then it visits the cow.\n∀x (Sees(x, rabbit) → Visits(rabbit, bald_eagle)) ::: If something sees the rabbit then the rabbit visits the bald eagle.\n∀x (Blue(x) → Likes(x, rabbit)) ::: If something is blue then it likes the rabbit.\n∀x ((Likes(x, cow) ∧ Young(cow)) → Blue(x)) ::: If something likes the cow and the cow is young then it is blue.\nConclusion:\nBig(cow) ::: The cow is big."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-294",
    "context": "The cat eats the squirrel. The cat is round. The cat needs the dog. The cat needs the squirrel. The dog likes the cat. The dog likes the tiger. The squirrel is blue. The squirrel is not round. The tiger is blue. The tiger is kind. The tiger is round. The tiger needs the squirrel. If something likes the tiger and the tiger needs the dog then it is round. If something eats the cat then it needs the dog. If something is big then it needs the dog. If the dog likes the tiger and the tiger likes the dog then the dog does not like the squirrel. If something is round then it eats the cat. If something needs the cat and it eats the tiger then the tiger needs the dog. If something needs the dog and it does not eat the tiger then it is blue. If the dog is round then the dog eats the squirrel. If something likes the tiger and it is kind then the tiger likes the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nLikes(x, y) ::: x likes y.\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nPremises:\nEats(cat, squirrel) ::: The cat eats the squirrel.\nRound(cat) ::: The cat is round.\nNeeds(cat, dog) ::: The cat needs the dog.\nNeeds(cat, squirrel) ::: The cat needs the squirrel.\nLikes(dog, cat) ::: The dog likes the cat.\nLikes(dog, tiger) ::: The dog likes the tiger.\nBlue(squirrel) ::: The squirrel is blue.\n¬Round(squirrel) ::: The squirrel is not round.\nBlue(tiger) ::: The tiger is blue.\nKind(tiger) ::: The tiger is kind.\nRound(tiger) ::: The tiger is round.\nNeeds(tiger, squirrel) ::: The tiger needs the squirrel.\n∀x ((Likes(x, tiger) ∧ Needs(tiger, dog)) → Round(x)) ::: If something likes the tiger and the tiger needs the dog then it is round.\n∀x ((Eats(x, cat)) → Needs(x, dog)) ::: If something eats the cat then it needs the dog.\n∀x (Big(x) → Needs(x, dog)) ::: If something is big then it needs the dog.\n∀x ((Likes(dog, tiger) ∧ Likes(tiger, dog)) → ¬Likes(dog, squirrel)) ::: If the dog likes the tiger and the tiger likes the dog then the dog does not like the squirrel.\n∀x (Round(x) → Eats(x, cat)) ::: If something is round then it eats the cat.\n∀x ((Needs(x, cat) ∧ Eats(x, tiger)) → Needs(tiger, dog)) ::: If something needs the cat and it eats the tiger then the tiger needs the dog.\n∀x ((Needs(x, dog) ∧ ¬Eats(x, tiger)) → Blue(x)) ::: If something needs the dog and it does not eat the tiger then it is blue.\n∀x (Round(dog) → Eats(dog, squirrel)) ::: If the dog is round then the dog eats the squirrel.\n∀x ((Likes(x, tiger) ∧ Kind(tiger)) → Likes(tiger, cat)) ::: If something likes the tiger and it is kind then the tiger likes the cat.\nConclusion:\n¬Blue(tiger) ::: The tiger is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-317",
    "context": "The cow chases the squirrel. The cow is young. The cow sees the squirrel. The dog is round. The dog likes the rabbit. The dog likes the squirrel. The dog sees the rabbit. The rabbit chases the cow. The rabbit does not chase the dog. The squirrel chases the rabbit. The squirrel is young. The squirrel likes the cow. If someone chases the cow then the cow is big. If someone likes the rabbit and they do not see the squirrel then they are big. If someone is big then they like the rabbit. If someone is young then they do not see the dog. If someone is blue then they chase the cow. If someone likes the rabbit then they like the cow. If someone likes the cow then they see the cow. If someone sees the cow and they chase the squirrel then they see the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not see the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nYoung(x) ::: x is young.\nSees(x, y) ::: x sees y.\nRound(x) ::: x is round.\nLikes(x, y) ::: x likes y.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nPremises:\nChases(Cow, Squirrel) ::: The cow chases the squirrel.\nYoung(Cow) ::: The cow is young.\nSees(Cow, Squirrel) ::: The cow sees the squirrel.\nRound(Dog) ::: The dog is round.\nLikes(Dog, Rabbit) ::: The dog likes the rabbit.\nLikes(Dog, Squirrel) ::: The dog likes the squirrel.\nSees(Dog, Rabbit) ::: The dog sees the rabbit.\nChases(Rabbit, Cow) ::: The rabbit chases the cow.\n¬Chases(Rabbit, Dog) ::: The rabbit does not chase the dog.\nChases(Squirrel, Rabbit) ::: The squirrel chases the rabbit.\nYoung(Squirrel) ::: The squirrel is young.\nLikes(Squirrel, Cow) ::: The squirrel likes the cow.\n∀x (Chases(x, Cow) → Big(Cow)) ::: If someone chases the cow then the cow is big.\n∀x ((Likes(x, Rabbit) ∧ ¬Sees(x, Squirrel)) → Big(x)) ::: If someone likes the rabbit and they do not see the squirrel then they are big.\n∀x (Big(x) → Likes(x, Rabbit)) ::: If someone is big then they like the rabbit.\n∀x (Young(x) → ¬Sees(x, Dog)) ::: If someone is young then they do not see the dog.\n∀x (Blue(x) → Chases(x, Cow)) ::: If someone is blue then they chase the cow.\n∀x (Likes(x, Rabbit) → Likes(x, Cow)) ::: If someone likes the rabbit then they like the cow.\n∀x (Likes(x, Cow) → Sees(x, Cow)) ::: If someone likes the cow then they see the cow.\n∀x ((Sees(x, Cow) ∧ Chases(x, Squirrel)) → Sees(x, Rabbit)) ::: If someone sees the cow and they chase the squirrel then they see the rabbit.\nConclusion:\n¬Sees(Squirrel, Rabbit) ::: The squirrel does not see the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1302",
    "context": "Anne is cold. Anne is nice. Bob is quiet. Bob is white. Gary is quiet. Harry is big. Harry is green. Harry is nice. Harry is quiet. Harry is white. If someone is white and nice then they are big. All quiet, cold people are nice. All round people are green. Quiet, round people are green. If someone is nice then they are round. All green, quiet people are cold. Quiet people are round. Quiet, nice people are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is white.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nPremises:\nCold(Anne) ::: Anne is cold.\nNice(Anne) ::: Anne is nice.\nQuiet(Bob) ::: Bob is quiet.\nWhite(Bob) ::: Bob is white.\nQuiet(Gary) ::: Gary is quiet.\nBig(Harry) ::: Harry is big.\nGreen(Harry) ::: Harry is green.\nNice(Harry) ::: Harry is nice.\nQuiet(Harry) ::: Harry is quiet.\nWhite(Harry) ::: Harry is white.\n∀x ((White(x) ∧ Nice(x)) → Big(x)) ::: If someone is white and nice then they are big.\n∀x ((Quiet(x) ∧ Cold(x)) → Nice(x)) ::: All quiet, cold people are nice.\n∀x (Round(x) → Green(x)) ::: All round people are green.\n∀x ((Quiet(x) ∧ Round(x)) → Green(x)) ::: Quiet, round people are green.\n∀x (Nice(x) → Round(x)) ::: If someone is nice then they are round.\n∀x ((Green(x) ∧ Quiet(x)) → Cold(x)) ::: All green, quiet people are cold.\n∀x (Quiet(x) → Round(x)) ::: Quiet people are round.\n∀x ((Quiet(x) ∧ Nice(x)) → White(x)) ::: Quiet, nice people are white.\nConclusion:\nWhite(Harry) ::: Harry is white."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-668",
    "context": "The bald eagle chases the lion. The bald eagle chases the rabbit. The bald eagle is big. The cow needs the bald eagle. The cow needs the rabbit. The lion chases the cow. The lion chases the rabbit. The lion is kind. The lion is not round. The lion needs the bald eagle. The lion does not visit the cow. The lion visits the rabbit. The rabbit chases the bald eagle. The rabbit visits the bald eagle. If someone needs the rabbit then the rabbit chases the lion. If someone is rough and they do not chase the rabbit then they visit the bald eagle. If someone chases the lion then they do not need the cow. If someone needs the bald eagle and the bald eagle chases the cow then the bald eagle is not round. If someone chases the bald eagle and they do not need the cow then they visit the cow. If someone needs the rabbit and the rabbit visits the cow then the rabbit is big. If someone is big then they do not visit the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow does not need the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nBig(x) ::: x is big.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nVisits(x, y) ::: x visits y.\nRough(x) ::: x is rough.\nPremises:\nChases(BaldEagle, Lion) ::: The bald eagle chases the lion.\nChases(BaldEagle, Rabbit) ::: The bald eagle chases the rabbit.\nBig(BaldEagle) ::: The bald eagle is big.\nNeeds(Cow, BaldEagle) ::: The cow needs the bald eagle.\nNeeds(Cow, Rabbit) ::: The cow needs the rabbit.\nChases(Lion, Cow) ::: The lion chases the cow.\nChases(Lion, Rabbit) ::: The lion chases the rabbit.\nKind(Lion) ::: The lion is kind.\n¬Round(Lion) ::: The lion is not round.\nNeeds(Lion, BaldEagle) ::: The lion needs the bald eagle.\n¬Visits(Lion, Cow) ::: The lion does not visit the cow.\nVisits(Lion, Rabbit) ::: The lion visits the rabbit.\nChases(Rabbit, BaldEagle) ::: The rabbit chases the bald eagle.\nVisits(Rabbit, BaldEagle) ::: The rabbit visits the bald eagle.\n∀x ((Needs(x, Rabbit)) → Chases(Rabbit, Lion)) ::: If someone needs the rabbit then the rabbit chases the lion.\n∀x ((Rough(x) ∧ ¬Chases(x, Rabbit)) → Visits(x, BaldEagle)) ::: If someone is rough and they do not chase the rabbit then they visit the bald eagle.\n∀x ((Chases(x, Lion)) → ¬Needs(x, Cow)) ::: If someone chases the lion then they do not need the cow.\n∀x ((Needs(x, BaldEagle) ∧ Chases(BaldEagle, Cow)) → ¬Round(BaldEagle)) ::: If someone needs the bald eagle and the bald eagle chases the cow then the bald eagle is not round.\n∀x ((Chases(x, BaldEagle) ∧ ¬Needs(x, Cow)) → Visits(x, Cow)) ::: If someone chases the bald eagle and they do not need the cow then they visit the cow.\n∀x ((Needs(x, Rabbit) ∧ Visits(Rabbit, Cow)) → Big(Rabbit)) ::: If someone needs the rabbit and the rabbit visits the cow then the rabbit is big.\n∀x ((Big(x)) → ¬Visits(x, Lion)) ::: If someone is big then they do not visit the lion.\nConclusion:\n¬Needs(Cow, Rabbit) ::: The cow does not need the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1009",
    "context": "Anne is blue. Charlie is furry. Dave is quiet. Dave is smart. Dave is white. Gary is furry. Gary is green. If Dave is quiet and Dave is blue then Dave is furry. All green, young people are quiet. All young people are quiet. All smart, green people are not white. All quiet, furry people are blue. All blue people are green. All furry people are smart. All furry people are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nPremises:\nBlue(Anne) ::: Anne is blue.\nFurry(Charlie) ::: Charlie is furry.\nQuiet(Dave) ::: Dave is quiet.\nSmart(Dave) ::: Dave is smart.\nWhite(Dave) ::: Dave is white.\nFurry(Gary) ::: Gary is furry.\nGreen(Gary) ::: Gary is green.\n∀x ((Quiet(x) ∧ Blue(x)) → Furry(x)) ::: If Dave is quiet and Dave is blue then Dave is furry.\n∀x ((Green(x) ∧ Young(x)) → Quiet(x)) ::: All green, young people are quiet.\n∀x (Young(x) → Quiet(x)) ::: All young people are quiet.\n∀x ((Smart(x) ∧ Green(x)) → ¬White(x)) ::: All smart, green people are not white.\n∀x ((Quiet(x) ∧ Furry(x)) → Blue(x)) ::: All quiet, furry people are blue.\n∀x (Blue(x) → Green(x)) ::: All blue people are green.\n∀x (Furry(x) → Smart(x)) ::: All furry people are smart.\n∀x (Furry(x) → Young(x)) ::: All furry people are young.\nConclusion:\n¬Quiet(Anne) ::: Anne is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-398",
    "context": "The bald eagle is blue. The bald eagle is cold. The bald eagle needs the rabbit. The bear visits the lion. The lion is nice. The lion likes the bald eagle. The lion needs the bald eagle. The lion needs the rabbit. The lion visits the rabbit. The rabbit likes the bear. The rabbit needs the bald eagle. The rabbit needs the lion. The rabbit visits the bald eagle. The rabbit visits the bear. If someone visits the rabbit then they need the bear. If someone needs the rabbit then the rabbit likes the bear. If someone visits the bear and the bear needs the rabbit then they need the bear. If someone needs the bear then they need the rabbit. If the bear needs the lion and the bear likes the bald eagle then the bear visits the bald eagle. If someone is blue and they like the bald eagle then the bald eagle needs the rabbit. If someone likes the bear then the bear visits the rabbit. If the bald eagle likes the rabbit and the bald eagle visits the rabbit then the bald eagle needs the bear. If the rabbit likes the bear then the bear visits the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear visits the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nLikes(x, y) ::: x likes y.\n\nPremises:\nBlue(bald eagle) ::: The bald eagle is blue.\nCold(bald eagle) ::: The bald eagle is cold.\nNeeds(bald eagle, rabbit) ::: The bald eagle needs the rabbit.\nVisits(bear, lion) ::: The bear visits the lion.\nNice(lion) ::: The lion is nice.\nLikes(lion, bald eagle) ::: The lion likes the bald eagle.\nNeeds(lion, bald eagle) ::: The lion needs the bald eagle.\nNeeds(lion, rabbit) ::: The lion needs the rabbit.\nVisits(lion, rabbit) ::: The lion visits the rabbit.\nLikes(rabbit, bear) ::: The rabbit likes the bear.\nNeeds(rabbit, bald eagle) ::: The rabbit needs the bald eagle.\nNeeds(rabbit, lion) ::: The rabbit needs the lion.\nVisits(rabbit, bald eagle) ::: The rabbit visits the bald eagle.\nVisits(rabbit, bear) ::: The rabbit visits the bear.\n∀x (Visits(x, rabbit) → Needs(x, bear)) ::: If someone visits the rabbit then they need the bear.\n∀x (Needs(x, rabbit) → Likes(rabbit, bear)) ::: If someone needs the rabbit then the rabbit likes the bear.\n∀x ((Visits(x, bear) ∧ Needs(bear, rabbit)) → Needs(x, bear)) ::: If someone visits the bear and the bear needs the rabbit then they need the bear.\n∀x (Needs(x, bear) → Needs(bear, rabbit)) ::: If someone needs the bear then they need the rabbit.\n∀x ((Needs(bear, lion) ∧ Likes(bear, bald eagle)) → Visits(bear, bald eagle)) ::: If the bear needs the lion and the bear likes the bald eagle then the bear visits the bald eagle.\n∀x ((Blue(x) ∧ Likes(x, bald eagle)) → Needs(x, rabbit)) ::: If someone is blue and they like the bald eagle then the bald eagle needs the rabbit.\n∀x (Likes(x, bear) → Visits(bear, rabbit)) ::: If someone likes the bear then the bear visits the rabbit.\n∀x ((Likes(bald eagle, rabbit) ∧ Visits(bald eagle, rabbit)) → Needs(bald eagle, bear)) ::: If the bald eagle likes the rabbit and the bald eagle visits the rabbit then the bald eagle needs the bear.\n∀x (Likes(rabbit, bear) → Visits(bear, bald eagle)) ::: If the rabbit likes the bear then the bear visits the bald eagle.\n\nConclusion:\nVisits(bear, lion) ::: The bear visits the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-947",
    "context": "The bear does not eat the lion. The bear likes the lion. The lion is big. The lion visits the mouse. The lion visits the squirrel. The mouse eats the squirrel. The mouse likes the bear. The mouse likes the lion. The mouse visits the squirrel. The squirrel is not cold. The squirrel is nice. If something eats the squirrel then the squirrel eats the mouse. If something visits the bear and it is green then it is nice. If something is green and blue then it visits the bear. If something likes the lion and it is blue then the lion is nice. If something eats the mouse then it likes the lion. If the bear is not green then the bear likes the lion. If something visits the bear then the bear likes the lion. If something likes the lion and the lion is blue then the lion likes the mouse. If something is nice then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is cold.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nLikes(x, y) ::: x likes y.\nBig(x) ::: x is big.\nVisits(x, y) ::: x visits y.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nPremises:\n¬Eats(bear, lion) ::: The bear does not eat the lion.\nLikes(bear, lion) ::: The bear likes the lion.\nBig(lion) ::: The lion is big.\nVisits(lion, mouse) ::: The lion visits the mouse.\nVisits(lion, squirrel) ::: The lion visits the squirrel.\nEats(mouse, squirrel) ::: The mouse eats the squirrel.\nLikes(mouse, bear) ::: The mouse likes the bear.\nLikes(mouse, lion) ::: The mouse likes the lion.\nVisits(mouse, squirrel) ::: The mouse visits the squirrel.\n¬Cold(squirrel) ::: The squirrel is not cold.\nNice(squirrel) ::: The squirrel is nice.\n∀x ((Eats(x, squirrel)) → (Eats(squirrel, mouse))) ::: If something eats the squirrel then the squirrel eats the mouse.\n∀x ((Visits(x, bear) ∧ Green(x)) → Nice(x)) ::: If something visits the bear and it is green then it is nice.\n∀x ((Green(x) ∧ Blue(x)) → Visits(x, bear)) ::: If something is green and blue then it visits the bear.\n∀x ((Likes(x, lion) ∧ Blue(x)) → Nice(lion)) ::: If something likes the lion and it is blue then the lion is nice.\n∀x ((Eats(x, mouse)) → Likes(lion, x)) ::: If something eats the mouse then it likes the lion.\n∀x (¬Green(bear) → Likes(bear, lion)) ::: If the bear is not green then the bear likes the lion.\n∀x (Visits(x, bear) → Likes(bear, lion)) ::: If something visits the bear then the bear likes the lion.\n∀x ((Likes(x, lion) ∧ Blue(x)) → Likes(lion, mouse)) ::: If something likes the lion and the lion is blue then the lion likes the mouse.\n∀x (Nice(x) → Blue(x)) ::: If something is nice then it is blue.\nConclusion:\n¬Cold(squirrel) ::: The squirrel is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1087",
    "context": "Bob is blue. Dave is green. Dave is rough. Fiona is green. Fiona is white. Gary is green. Gary is white. Young, round people are furry. All green, young people are furry. If Bob is blue and Bob is white then Bob is young. If Fiona is green then Fiona is rough. Young, blue people are green. If someone is blue then they are white. Furry people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nPremises:\nBlue(Bob) ::: Bob is blue.\nGreen(Dave) ::: Dave is green.\nRough(Dave) ::: Dave is rough.\nGreen(Fiona) ::: Fiona is green.\nWhite(Fiona) ::: Fiona is white.\nGreen(Gary) ::: Gary is green.\nWhite(Gary) ::: Gary is white.\n∀x ((Young(x) ∧ Round(x)) → Furry(x)) ::: Young, round people are furry.\n∀x ((Green(x) ∧ Young(x)) → Furry(x)) ::: All green, young people are furry.\n∀x ((Blue(x) ∧ White(x)) → Young(x)) ::: If Bob is blue and Bob is white then Bob is young.\n∀x (Green(Fiona) → Rough(Fiona)) ::: If Fiona is green then Fiona is rough.\n∀x ((Young(x) ∧ Blue(x)) → Green(x)) ::: Young, blue people are green.\n∀x (Blue(x) → White(x)) ::: If someone is blue then they are white.\n∀x (Furry(x) → Rough(x)) ::: Furry people are rough.\nConclusion:\n¬Rough(Gary) ::: Gary is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-842",
    "context": "Anne is big. Anne is cold. Anne is young. Dave is round. Dave is white. Erin is cold. Erin is white. Erin is young. Gary is cold. Gary is young. If something is big then it is cold. Round things are big. Furry, round things are big. All cold things are furry. If Erin is round then Erin is young. All furry, big things are young. White things are round. If Gary is cold then Gary is white. All white, young things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is white.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nPremises:\nBig(Anne) ::: Anne is big.\nCold(Anne) ::: Anne is cold.\nYoung(Anne) ::: Anne is young.\nRound(Dave) ::: Dave is round.\nWhite(Dave) ::: Dave is white.\nCold(Erin) ::: Erin is cold.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\nCold(Gary) ::: Gary is cold.\nYoung(Gary) ::: Gary is young.\n∀x (Big(x) → Cold(x)) ::: If something is big then it is cold.\n∀x (Round(x) → Big(x)) ::: Round things are big.\n∀x ((Furry(x) ∧ Round(x)) → Big(x)) ::: Furry, round things are big.\n∀x (Cold(x) → Furry(x)) ::: All cold things are furry.\n∀x ((Erin) → Young(x)) ::: If Erin is round then Erin is young.\n∀x ((Furry(x) ∧ Big(x)) → Young(x)) ::: All furry, big things are young.\n∀x (White(x) → Round(x)) ::: White things are round.\n∀x (Cold(Gary) → White(Gary)) ::: If Gary is cold then Gary is white.\n∀x ((White(x) ∧ Young(x)) → Nice(x)) ::: All white, young things are nice.\nConclusion:\nWhite(Dave) ::: Dave is white."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-129",
    "context": "The lion is cold. The lion does not need the mouse. The lion visits the squirrel. The mouse is cold. The mouse does not visit the squirrel. The rabbit is cold. The rabbit is rough. The rabbit does not need the lion. The rabbit does not visit the squirrel. The squirrel is kind. The squirrel needs the mouse. The squirrel needs the rabbit. The squirrel does not see the lion. The squirrel does not see the rabbit. If something needs the rabbit and the rabbit sees the mouse then the mouse does not see the lion. If something is rough then it visits the mouse. If something needs the rabbit and it visits the mouse then the mouse needs the rabbit. If something needs the rabbit and the rabbit is cold then it is rough. If something needs the rabbit then the rabbit needs the squirrel. If the squirrel sees the lion and the squirrel is not green then the lion needs the squirrel. If something is big then it visits the lion. If something visits the squirrel and the squirrel sees the lion then the lion is not kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not need the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nNeed(x, y) ::: x needs y.\nVisit(x, y) ::: x visits y.\nRough(x) ::: x is rough.\nKind(x) ::: x is kind.\nSee(x, y) ::: x sees y.\nBig(x) ::: x is big.\nPremises:\nCold(Lion) ::: The lion is cold.\n¬Need(Lion, Mouse) ::: The lion does not need the mouse.\nVisit(Lion, Squirrel) ::: The lion visits the squirrel.\nCold(Mouse) ::: The mouse is cold.\n¬Visit(Mouse, Squirrel) ::: The mouse does not visit the squirrel.\nCold(Rabbit) ::: The rabbit is cold.\nRough(Rabbit) ::: The rabbit is rough.\n¬Need(Rabbit, Lion) ::: The rabbit does not need the lion.\n¬Visit(Rabbit, Squirrel) ::: The rabbit does not visit the squirrel.\nKind(Squirrel) ::: The squirrel is kind.\nNeed(Squirrel, Mouse) ::: The squirrel needs the mouse.\nNeed(Squirrel, Rabbit) ::: The squirrel needs the rabbit.\n¬See(Squirrel, Lion) ::: The squirrel does not see the lion.\n¬See(Squirrel, Rabbit) ::: The squirrel does not see the rabbit.\n∀x ((Need(Rabbit, x) ∧ See(Rabbit, Mouse)) → ¬See(Mouse, Lion)) ::: If something needs the rabbit and the rabbit sees the mouse then the mouse does not see the lion.\n∀x (Rough(x) → Visit(x, Mouse)) ::: If something is rough then it visits the mouse.\n∀x ((Need(Rabbit, x) ∧ Visit(x, Mouse)) → Need(Mouse, Rabbit)) ::: If something needs the rabbit and it visits the mouse then the mouse needs the rabbit.\n∀x ((Need(Rabbit, x) ∧ Cold(x)) → Rough(x)) ::: If something needs the rabbit and the rabbit is cold then it is rough.\n∀x (Need(x, Rabbit) → Need(Rabbit, Squirrel)) ::: If something needs the rabbit then the rabbit needs the squirrel.\n∀x ((See(Squirrel, Lion) ∧ ¬Green(Squirrel)) → Need(Lion, Squirrel)) ::: If the squirrel sees the lion and the squirrel is not green then the lion needs the squirrel.\n∀x (Big(x) → Visit(x, Lion)) ::: If something is big then it visits the lion.\n∀x ((Visit(x, Squirrel) ∧ See(Squirrel, Lion)) → ¬Kind(Lion)) ::: If something visits the squirrel and the squirrel sees the lion then the lion is not kind.\nConclusion:\n¬Need(Squirrel, Rabbit) ::: The squirrel does not need the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-301",
    "context": "Bob is cold. Bob is kind. Bob is red. Bob is smart. Bob is young. Fiona is blue. Gary is blue. Gary is kind. Harry is kind. Harry is young. All red people are blue. All blue people are smart. All young people are cold. Cold people are red. If someone is kind and smart then they are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nPremises:\nCold(Bob) ::: Bob is cold.\nKind(Bob) ::: Bob is kind.\nRed(Bob) ::: Bob is red.\nSmart(Bob) ::: Bob is smart.\nYoung(Bob) ::: Bob is young.\nBlue(Fiona) ::: Fiona is blue.\nBlue(Gary) ::: Gary is blue.\nKind(Gary) ::: Gary is kind.\nKind(Harry) ::: Harry is kind.\nYoung(Harry) ::: Harry is young.\n∀x (Red(x) → Blue(x)) ::: All red people are blue.\n∀x (Blue(x) → Smart(x)) ::: All blue people are smart.\n∀x (Young(x) → Cold(x)) ::: All young people are cold.\n∀x (Cold(x) → Red(x)) ::: Cold people are red.\n∀x ((Kind(x) ∧ Smart(x)) → White(x)) ::: If someone is kind and smart then they are white.\nConclusion:\n¬Red(Fiona) ::: Fiona is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-30",
    "context": "The bald eagle does not chase the mouse. The bald eagle chases the squirrel. The bald eagle needs the mouse. The bald eagle does not see the dog. The bald eagle sees the squirrel. The dog is not red. The dog needs the squirrel. The mouse does not chase the squirrel. The mouse is red. The mouse needs the dog. The mouse does not need the squirrel. The mouse sees the bald eagle. The mouse sees the dog. The squirrel is cold. The squirrel is red. The squirrel is round. If something is round and red then it chases the dog. If something chases the bald eagle then it sees the mouse. If something needs the mouse and the mouse needs the bald eagle then it does not see the squirrel. If something needs the mouse then the mouse does not see the squirrel. If something is blue and it needs the dog then it is cold. If something chases the dog then it chases the bald eagle. If the bald eagle chases the squirrel and the bald eagle sees the squirrel then the squirrel is red. If something sees the mouse and the mouse needs the dog then the dog chases the bald eagle. If something sees the squirrel and the squirrel is cold then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle sees the squirrel.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChase(x, y) ::: x chases y.\nNeed(x, y) ::: x needs y.\nSee(x, y) ::: x sees y.\nRed(x) ::: x is red.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nPremises:\n¬Chase(BaldEagle, Mouse) ::: The bald eagle does not chase the mouse.\nChase(BaldEagle, Squirrel) ::: The bald eagle chases the squirrel.\nNeed(BaldEagle, Mouse) ::: The bald eagle needs the mouse.\n¬See(BaldEagle, Dog) ::: The bald eagle does not see the dog.\nSee(BaldEagle, Squirrel) ::: The bald eagle sees the squirrel.\n¬Red(Dog) ::: The dog is not red.\nNeed(Dog, Squirrel) ::: The dog needs the squirrel.\n¬Chase(Mouse, Squirrel) ::: The mouse does not chase the squirrel.\nRed(Mouse) ::: The mouse is red.\nNeed(Mouse, Dog) ::: The mouse needs the dog.\n¬Need(Mouse, Squirrel) ::: The mouse does not need the squirrel.\nSee(Mouse, BaldEagle) ::: The mouse sees the bald eagle.\nSee(Mouse, Dog) ::: The mouse sees the dog.\nCold(Squirrel) ::: The squirrel is cold.\nRed(Squirrel) ::: The squirrel is red.\nRound(Squirrel) ::: The squirrel is round.\n∀x ((Round(x) ∧ Red(x)) → Chase(x, Dog)) ::: If something is round and red then it chases the dog.\n∀x (Chase(x, BaldEagle) → See(x, Mouse)) ::: If something chases the bald eagle then it sees the mouse.\n∀x ((Need(x, Mouse) ∧ Need(Mouse, BaldEagle)) → ¬See(x, Squirrel)) ::: If something needs the mouse and the mouse needs the bald eagle then it does not see the squirrel.\n∀x (Need(x, Mouse) → ¬See(Mouse, Squirrel)) ::: If something needs the mouse then the mouse does not see the squirrel.\n∀x ((Blue(x) ∧ Need(x, Dog)) → Cold(x)) ::: If something is blue and it needs the dog then it is cold.\n∀x (Chase(x, Dog) → Chase(x, BaldEagle)) ::: If something chases the dog then it chases the bald eagle.\n∀x ((Chase(BaldEagle, Squirrel) ∧ See(BaldEagle, Squirrel)) → Red(Squirrel)) ::: If the bald eagle chases the squirrel and the bald eagle sees the squirrel then the squirrel is red.\n∀x ((See(x, Mouse) ∧ Need(Mouse, Dog)) → Chase(Dog, BaldEagle)) ::: If something sees the mouse and the mouse needs the dog then the dog chases the bald eagle.\n∀x ((See(x, Squirrel) ∧ Cold(Squirrel)) → Blue(x)) ::: If something sees the squirrel and the squirrel is cold then it is blue.\nConclusion:\nSee(BaldEagle, Squirrel) ::: The bald eagle sees the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-483",
    "context": "The bear does not need the lion. The bear needs the mouse. The bear visits the cat. The bear does not visit the lion. The bear visits the mouse. The cat likes the lion. The lion is green. The lion visits the bear. The lion visits the cat. The lion visits the mouse. The mouse needs the lion. The mouse visits the bear. If something visits the lion and the lion is not blue then the lion is not green. If something is green then it likes the mouse. If something likes the mouse then the mouse needs the lion. If something visits the bear then it is not nice. If something likes the cat then it needs the bear. If something is young and it visits the mouse then it likes the cat. If something visits the cat and it is not nice then it is young. If something needs the bear then it needs the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear visits the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeed(x, y) ::: x needs y.\nVisit(x, y) ::: x visits y.\nLike(x, y) ::: x likes y.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nPremises:\n¬Need(bear, lion) ::: The bear does not need the lion.\nNeed(bear, mouse) ::: The bear needs the mouse.\nVisit(bear, cat) ::: The bear visits the cat.\n¬Visit(bear, lion) ::: The bear does not visit the lion.\nVisit(bear, mouse) ::: The bear visits the mouse.\nLike(cat, lion) ::: The cat likes the lion.\nGreen(lion) ::: The lion is green.\nVisit(lion, bear) ::: The lion visits the bear.\nVisit(lion, cat) ::: The lion visits the cat.\nVisit(lion, mouse) ::: The lion visits the mouse.\nNeed(mouse, lion) ::: The mouse needs the lion.\nVisit(mouse, bear) ::: The mouse visits the bear.\n∀x ((Visit(x, lion) ∧ ¬Blue(lion)) → ¬Green(lion)) ::: If something visits the lion and the lion is not blue then the lion is not green.\n∀x (Green(x) → Like(x, mouse)) ::: If something is green then it likes the mouse.\n∀x (Like(x, mouse) → Need(mouse, lion)) ::: If something likes the mouse then the mouse needs the lion.\n∀x (Visit(x, bear) → ¬Nice(x)) ::: If something visits the bear then it is not nice.\n∀x (Like(x, cat) → Need(x, bear)) ::: If something likes the cat then it needs the bear.\n∀x ((Young(x) ∧ Visit(x, mouse)) → Like(x, cat)) ::: If something is young and it visits the mouse then it likes the cat.\n∀x ((Visit(x, cat) ∧ ¬Nice(x)) → Young(x)) ::: If something visits the cat and it is not nice then it is young.\n∀x (Need(x, bear) → Need(x, mouse)) ::: If something needs the bear then it needs the mouse.\nConclusion:\nVisit(bear, lion) ::: The bear visits the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-863",
    "context": "Anne is furry. Anne is kind. Anne is nice. Anne is young. Bob is big. Bob is furry. Charlie is nice. Charlie is young. Dave is cold. Dave is kind. Dave is young. All cold, big people are furry. All big people are rough. All kind, big people are rough. If someone is nice and rough then they are kind. If Charlie is kind then Charlie is big. If someone is rough and kind then they are cold. Nice people are big. All rough, furry people are cold. Cold, nice people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nPremises:\nFurry(Anne) ::: Anne is furry.\nKind(Anne) ::: Anne is kind.\nNice(Anne) ::: Anne is nice.\nYoung(Anne) ::: Anne is young.\nBig(Bob) ::: Bob is big.\nFurry(Bob) ::: Bob is furry.\nNice(Charlie) ::: Charlie is nice.\nYoung(Charlie) ::: Charlie is young.\nCold(Dave) ::: Dave is cold.\nKind(Dave) ::: Dave is kind.\nYoung(Dave) ::: Dave is young.\n∀x ((Cold(x) ∧ Big(x)) → Furry(x)) ::: All cold, big people are furry.\n∀x (Big(x) → Rough(x)) ::: All big people are rough.\n∀x ((Kind(x) ∧ Big(x)) → Rough(x)) ::: All kind, big people are rough.\n∀x ((Nice(x) ∧ Rough(x)) → Kind(x)) ::: If someone is nice and rough then they are kind.\n∀x (Kind(Charlie) → Big(Charlie)) ::: If Charlie is kind then Charlie is big.\n∀x ((Rough(x) ∧ Kind(x)) → Cold(x)) ::: If someone is rough and kind then they are cold.\n∀x (Nice(x) → Big(x)) ::: Nice people are big.\n∀x ((Rough(x) ∧ Furry(x)) → Cold(x)) ::: All rough, furry people are cold.\n∀x ((Cold(x) ∧ Nice(x)) → Big(x)) ::: Cold, nice people are big.\nConclusion:\n¬Big(Dave) ::: Dave is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1015",
    "context": "Anne is furry. Anne is nice. Dave is furry. Dave is not nice. Erin is smart. Harry is furry. Harry is nice. All round people are quiet. All round people are green. All quiet, furry people are green. Furry people are green. Big, quiet people are not smart. Smart people are nice. All green people are big. If Anne is big and Anne is green then Anne is round. If someone is quiet and smart then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not nice.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nPremises:\nFurry(Anne) ::: Anne is furry.\nNice(Anne) ::: Anne is nice.\nFurry(Dave) ::: Dave is furry.\n¬Nice(Dave) ::: Dave is not nice.\nSmart(Erin) ::: Erin is smart.\nFurry(Harry) ::: Harry is furry.\nNice(Harry) ::: Harry is nice.\n∀x ((Round(x) → Quiet(x)) ∧ (Round(x) → Green(x))) ::: All round people are quiet and green.\n∀x ((Quiet(x) ∧ Furry(x)) → Green(x)) ::: All quiet, furry people are green.\n∀x (Furry(x) → Green(x)) ::: Furry people are green.\n∀x ((Big(x) ∧ Quiet(x)) → ¬Smart(x)) ::: Big, quiet people are not smart.\n∀x (Smart(x) → Nice(x)) ::: Smart people are nice.\n∀x (Green(x) → Big(x)) ::: All green people are big.\n∀x ((Big(x) ∧ Green(x)) → Round(x)) ::: If someone is big and green then they are round.\n∀x ((Quiet(x) ∧ Smart(x)) → Round(x)) ::: If someone is quiet and smart then they are round.\nConclusion:\n¬Nice(Dave) ::: Dave is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-961",
    "context": "Anne is cold. Anne is round. Erin is blue. Erin is furry. Fiona is green. Fiona is red. Gary is green. Furry, green things are cold. Round things are green. If something is round and green then it is red. All green things are blue. Kind things are round. All blue things are green. If something is cold then it is kind. If something is round and kind then it is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not green.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nPremises:\nCold(Anne) ::: Anne is cold.\nRound(Anne) ::: Anne is round.\nBlue(Erin) ::: Erin is blue.\nFurry(Erin) ::: Erin is furry.\nGreen(Fiona) ::: Fiona is green.\nRed(Fiona) ::: Fiona is red.\nGreen(Gary) ::: Gary is green.\n∀x ((Furry(x) ∧ Green(x)) → Cold(x)) ::: Furry, green things are cold.\n∀x ((Round(x)) → Green(x)) ::: Round things are green.\n∀x ((Round(x) ∧ Green(x)) → Red(x)) ::: If something is round and green then it is red.\n∀x (Green(x) → Blue(x)) ::: All green things are blue.\n∀x (Kind(x) → Round(x)) ::: Kind things are round.\n∀x (Blue(x) → Green(x)) ::: All blue things are green.\n∀x (Cold(x) → Kind(x)) ::: If something is cold then it is kind.\n∀x ((Round(x) ∧ Kind(x)) → Cold(x)) ::: If something is round and kind then it is cold.\nConclusion:\n¬Green(Fiona) ::: Fiona is not green."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-872",
    "context": "Charlie is kind. Charlie is quiet. Charlie is rough. Charlie is smart. Charlie is white. Dave is kind. Dave is white. Dave is young. Fiona is blue. Fiona is rough. Gary is blue. Gary is kind. If Fiona is rough and Fiona is blue then Fiona is not smart. If Dave is smart then Dave is not white. All kind things are white. If something is smart and not blue then it is kind. All quiet things are kind. If something is white then it is young. If something is blue and not smart then it is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nKind(Charlie) ::: Charlie is kind.\nQuiet(Charlie) ::: Charlie is quiet.\nRough(Charlie) ::: Charlie is rough.\nSmart(Charlie) ::: Charlie is smart.\nWhite(Charlie) ::: Charlie is white.\nKind(Dave) ::: Dave is kind.\nWhite(Dave) ::: Dave is white.\nYoung(Dave) ::: Dave is young.\nBlue(Fiona) ::: Fiona is blue.\nRough(Fiona) ::: Fiona is rough.\nBlue(Gary) ::: Gary is blue.\nKind(Gary) ::: Gary is kind.\n∀x ((Rough(x) ∧ Blue(x)) → ¬Smart(x)) ::: If Fiona is rough and Fiona is blue then Fiona is not smart.\n∀x (Smart(x) → ¬White(x)) ::: If Dave is smart then Dave is not white.\n∀x (Kind(x) → White(x)) ::: All kind things are white.\n∀x ((Smart(x) ∧ ¬Blue(x)) → Kind(x)) ::: If something is smart and not blue then it is kind.\n∀x (Quiet(x) → Kind(x)) ::: All quiet things are kind.\n∀x (White(x) → Young(x)) ::: If something is white then it is young.\n∀x ((Blue(x) ∧ ¬Smart(x)) → Quiet(x)) ::: If something is blue and not smart then it is quiet.\nConclusion:\n¬Quiet(Gary) ::: Gary is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-305",
    "context": "Anne is quiet. Bob is not rough. Gary is big. Gary is kind. Gary is rough. Gary is young. Harry is young. All big people are furry. Young people are furry. All quiet, kind people are furry. If Harry is furry and Harry is quiet then Harry is round. Rough, kind people are quiet. Young, rough people are kind. All quiet, furry people are round. Furry people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nPremises:\nQuiet(Anne) ::: Anne is quiet.\n¬Rough(Bob) ::: Bob is not rough.\nBig(Gary) ::: Gary is big.\nKind(Gary) ::: Gary is kind.\nRough(Gary) ::: Gary is rough.\nYoung(Gary) ::: Gary is young.\nYoung(Harry) ::: Harry is young.\n∀x (Big(x) → Furry(x)) ::: All big people are furry.\n∀x (Young(x) → Furry(x)) ::: Young people are furry.\n∀x ((Quiet(x) ∧ Kind(x)) → Furry(x)) ::: All quiet, kind people are furry.\n∀x ((Furry(Harry) ∧ Quiet(Harry)) → Round(Harry)) ::: If Harry is furry and quiet then Harry is round.\n∀x ((Rough(x) ∧ Kind(x)) → Quiet(x)) ::: Rough, kind people are quiet.\n∀x ((Young(x) ∧ Rough(x)) → Kind(x)) ::: Young, rough people are kind.\n∀x ((Quiet(x) ∧ Furry(x)) → Round(x)) ::: All quiet, furry people are round.\n∀x (Furry(x) → Rough(x)) ::: Furry people are rough.\nConclusion:\nYoung(Gary) ::: Gary is young."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-890",
    "context": "The bald eagle needs the cow. The bald eagle needs the mouse. The cow is round. The mouse does not visit the rabbit. The rabbit is green. The rabbit needs the bald eagle. The rabbit visits the bald eagle. If someone visits the mouse then they like the cow. If someone likes the mouse and they are blue then the mouse needs the rabbit. If someone needs the bald eagle then the bald eagle likes the rabbit. If someone needs the bald eagle then the bald eagle likes the mouse. If someone likes the cow then they are blue. If someone is red and they visit the cow then the cow is green. If someone visits the mouse then they do not visit the bald eagle. If someone is round and they need the bald eagle then the bald eagle is round. If someone visits the bald eagle and the bald eagle likes the rabbit then the bald eagle visits the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit does not visit the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nRound(x) ::: x is round.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nLikes(x, y) ::: x likes y.\nBlue(x) ::: x is blue.\nRed(x) ::: x is red.\nPremises:\nNeeds(bald eagle, cow) ::: The bald eagle needs the cow.\nNeeds(bald eagle, mouse) ::: The bald eagle needs the mouse.\nRound(cow) ::: The cow is round.\n¬Visits(mouse, rabbit) ::: The mouse does not visit the rabbit.\nGreen(rabbit) ::: The rabbit is green.\nNeeds(rabbit, bald eagle) ::: The rabbit needs the bald eagle.\nVisits(rabbit, bald eagle) ::: The rabbit visits the bald eagle.\n∀x ((Visits(x, mouse) → Likes(x, cow))) ::: If someone visits the mouse then they like the cow.\n∀x ((Likes(x, mouse) ∧ Blue(x)) → Needs(mouse, rabbit)) ::: If someone likes the mouse and they are blue then the mouse needs the rabbit.\n∀x (Needs(x, bald eagle) → Likes(bald eagle, rabbit)) ::: If someone needs the bald eagle then the bald eagle likes the rabbit.\n∀x (Needs(x, bald eagle) → Likes(bald eagle, mouse)) ::: If someone needs the bald eagle then the bald eagle likes the mouse.\n∀x (Likes(x, cow) → Blue(x)) ::: If someone likes the cow then they are blue.\n∀x ((Red(x) ∧ Visits(x, cow)) → Green(cow)) ::: If someone is red and they visit the cow then the cow is green.\n∀x (Visits(x, mouse) → ¬Visits(x, bald eagle)) ::: If someone visits the mouse then they do not visit the bald eagle.\n∀x ((Round(x) ∧ Needs(x, bald eagle)) → Round(bald eagle)) ::: If someone is round and they need the bald eagle then the bald eagle is round.\n∀x ((Visits(x, bald eagle) ∧ Likes(bald eagle, rabbit)) → Visits(bald eagle, mouse)) ::: If someone visits the bald eagle and the bald eagle likes the rabbit then the bald eagle visits the mouse.\nConclusion:\n¬Visits(rabbit, bald eagle) ::: The rabbit does not visit the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-884",
    "context": "The bear is cold. The bear is rough. The bear needs the cat. The bear needs the rabbit. The bear sees the rabbit. The cat eats the bear. The cat is blue. The rabbit eats the cat. The rabbit eats the squirrel. The rabbit is big. The rabbit is rough. The rabbit is round. The squirrel eats the bear. The squirrel eats the cat. The squirrel is big. The squirrel is rough. If something eats the rabbit then the rabbit sees the bear. If something eats the rabbit then it needs the squirrel. If something sees the bear and it sees the cat then the cat sees the rabbit. If something sees the rabbit and the rabbit is rough then it sees the cat. All round, blue things are big. If the bear is big and the bear sees the squirrel then the bear is round. If something sees the cat then it sees the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not need the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nEats(x, y) ::: x eats y.\nBlue(x) ::: x is blue.\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nPremises:\nCold(bear) ::: The bear is cold.\nRough(bear) ::: The bear is rough.\nNeeds(bear, cat) ::: The bear needs the cat.\nNeeds(bear, rabbit) ::: The bear needs the rabbit.\nSees(bear, rabbit) ::: The bear sees the rabbit.\nEats(cat, bear) ::: The cat eats the bear.\nBlue(cat) ::: The cat is blue.\nEats(rabbit, cat) ::: The rabbit eats the cat.\nEats(rabbit, squirrel) ::: The rabbit eats the squirrel.\nBig(rabbit) ::: The rabbit is big.\nRough(rabbit) ::: The rabbit is rough.\nRound(rabbit) ::: The rabbit is round.\nEats(squirrel, bear) ::: The squirrel eats the bear.\nEats(squirrel, cat) ::: The squirrel eats the cat.\nBig(squirrel) ::: The squirrel is big.\nRough(squirrel) ::: The squirrel is rough.\n∀x (Eats(x, rabbit) → Sees(rabbit, bear)) ::: If something eats the rabbit then the rabbit sees the bear.\n∀x (Eats(x, rabbit) → Needs(x, squirrel)) ::: If something eats the rabbit then it needs the squirrel.\n∀x ((Sees(x, bear) ∧ Sees(x, cat)) → Sees(cat, rabbit)) ::: If something sees the bear and it sees the cat then the cat sees the rabbit.\n∀x ((Sees(x, rabbit) ∧ Rough(rabbit)) → Sees(x, cat)) ::: If something sees the rabbit and the rabbit is rough then it sees the cat.\n∀x ((Round(x) ∧ Blue(x)) → Big(x)) ::: All round, blue things are big.\n∀x ((Big(bear) ∧ Sees(bear, squirrel)) → Round(bear)) ::: If the bear is big and the bear sees the squirrel then the bear is round.\n∀x (Sees(x, cat) → Sees(x, bear)) ::: If something sees the cat then it sees the bear.\nConclusion:\n¬Needs(squirrel, squirrel) ::: The squirrel does not need the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-691",
    "context": "The bald eagle sees the cat. The cat eats the dog. The cat is big. The cat is kind. The dog eats the bald eagle. The dog eats the cat. The dog is kind. The dog sees the lion. The lion eats the bald eagle. The lion is green. The lion is nice. The lion sees the dog. Cold things are green. If something sees the lion then it needs the dog. If something needs the bald eagle then it sees the lion. If something is nice then it sees the lion. If something is big then it sees the cat. If something is green and it needs the dog then it eats the cat. If something is green and it eats the cat then the cat needs the bald eagle. If something eats the bald eagle then the bald eagle is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSees(x, y) ::: x sees y.\nEats(x, y) ::: x eats y.\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nCold(x) ::: x is cold.\nNeeds(x, y) ::: x needs y.\nPremises:\nSees(BaldEagle, Cat) ::: The bald eagle sees the cat.\nEats(Cat, Dog) ::: The cat eats the dog.\nBig(Cat) ::: The cat is big.\nKind(Cat) ::: The cat is kind.\nEats(Dog, BaldEagle) ::: The dog eats the bald eagle.\nEats(Dog, Cat) ::: The dog eats the cat.\nKind(Dog) ::: The dog is kind.\nSees(Dog, Lion) ::: The dog sees the lion.\nEats(Lion, BaldEagle) ::: The lion eats the bald eagle.\nGreen(Lion) ::: The lion is green.\nNice(Lion) ::: The lion is nice.\nSees(Lion, Dog) ::: The lion sees the dog.\n∀x (Cold(x) → Green(x)) ::: Cold things are green.\n∀x ((Sees(x, Lion)) → Needs(x, Dog)) ::: If something sees the lion then it needs the dog.\n∀x ((Needs(x, BaldEagle)) → Sees(x, Lion)) ::: If something needs the bald eagle then it sees the lion.\n∀x ((Nice(x)) → Sees(x, Lion)) ::: If something is nice then it sees the lion.\n∀x ((Big(x)) → Sees(x, Cat)) ::: If something is big then it sees the cat.\n∀x ((Green(x) ∧ Needs(x, Dog)) → Eats(x, Cat)) ::: If something is green and it needs the dog then it eats the cat.\n∀x ((Green(x) ∧ Eats(x, Cat)) → Needs(Cat, BaldEagle)) ::: If something is green and it eats the cat then the cat needs the bald eagle.\n∀x (Eats(x, BaldEagle) → Nice(BaldEagle)) ::: If something eats the bald eagle then the bald eagle is nice.\nConclusion:\nKind(Dog) ::: The dog is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-108",
    "context": "Anne is green. Bob is big. Bob is furry. Dave is green. Erin is furry. Erin is green. Erin is round. If Anne is white and Anne is big then Anne is not furry. Furry people are kind. If someone is kind then they are white. If someone is white then they are big. If someone is rough then they are green. If someone is kind and not big then they are not rough. Furry, white people are rough. Green, kind people are round. If someone is white and not green then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nNotFurry(x) ::: x is not furry.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nPremises:\nGreen(Anne) ::: Anne is green.\nBig(Bob) ::: Bob is big.\nFurry(Bob) ::: Bob is furry.\nGreen(Dave) ::: Dave is green.\nFurry(Erin) ::: Erin is furry.\nGreen(Erin) ::: Erin is green.\nRound(Erin) ::: Erin is round.\n∀x ((White(x) ∧ Big(x)) → NotFurry(x)) ::: If Anne is white and Anne is big then Anne is not furry.\n∀x (Furry(x) → Kind(x)) ::: Furry people are kind.\n∀x (Kind(x) → White(x)) ::: If someone is kind then they are white.\n∀x (White(x) → Big(x)) ::: If someone is white then they are big.\n∀x (Rough(x) → Green(x)) ::: If someone is rough then they are green.\n∀x ((Kind(x) ∧ NotBig(x)) → NotRough(x)) ::: If someone is kind and not big then they are not rough.\n∀x ((Furry(x) ∧ White(x)) → Rough(x)) ::: Furry, white people are rough.\n∀x ((Green(x) ∧ Kind(x)) → Round(x)) ::: Green, kind people are round.\n∀x ((White(x) ∧ NotGreen(x)) → Round(x)) ::: If someone is white and not green then they are round.\nConclusion:\nNotRound(Erin) ::: Erin is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-400",
    "context": "Anne is smart. Bob is big. Bob is rough. Dave is big. Dave is nice. Dave is rough. Dave is white. Fiona is nice. Fiona is white. Fiona is young. All white things are nice. Rough, blue things are nice. All rough things are smart. If something is nice and white then it is blue. Nice things are white. Big, young things are white. If something is big and smart then it is young. If Fiona is blue and Fiona is big then Fiona is rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not nice.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nSmart(Anne) ::: Anne is smart.\nBig(Bob) ::: Bob is big.\nRough(Bob) ::: Bob is rough.\nBig(Dave) ::: Dave is big.\nNice(Dave) ::: Dave is nice.\nRough(Dave) ::: Dave is rough.\nWhite(Dave) ::: Dave is white.\nNice(Fiona) ::: Fiona is nice.\nWhite(Fiona) ::: Fiona is white.\nYoung(Fiona) ::: Fiona is young.\n∀x (White(x) → Nice(x)) ::: All white things are nice.\n∀x ((Rough(x) ∧ Blue(x)) → Nice(x)) ::: Rough, blue things are nice.\n∀x (Rough(x) → Smart(x)) ::: All rough things are smart.\n∀x ((Nice(x) ∧ White(x)) → Blue(x)) ::: If something is nice and white then it is blue.\n∀x (Nice(x) → White(x)) ::: Nice things are white.\n∀x ((Big(x) ∧ Young(x)) → White(x)) ::: Big, young things are white.\n∀x ((Big(x) ∧ Smart(x)) → Young(x)) ::: If something is big and smart then it is young.\n∀x ((Blue(Fiona) ∧ Big(Fiona)) → Rough(Fiona)) ::: If Fiona is blue and Fiona is big then Fiona is rough.\nConclusion:\n¬Nice(Anne) ::: Anne is not nice."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-731",
    "context": "The bald eagle eats the cat. The bald eagle needs the cow. The bald eagle visits the squirrel. The cat does not eat the squirrel. The cat is green. The cat needs the cow. The cow is young. The squirrel eats the cat. The squirrel is blue. The squirrel needs the bald eagle. The squirrel needs the cow. If someone needs the cow and they are not nice then they eat the squirrel. If someone eats the cow and the cow needs the bald eagle then they eat the squirrel. If someone needs the cat then they need the bald eagle. If someone eats the squirrel and they visit the squirrel then the squirrel eats the bald eagle. If someone needs the squirrel then the squirrel does not need the bald eagle. If someone needs the cat then the cat does not eat the cow. If someone needs the cat and they need the bald eagle then the bald eagle is young. If someone is young then they need the cat. If the squirrel does not eat the bald eagle then the squirrel visits the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat needs the cow.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nPremises:\nEats(bald eagle, cat) ::: The bald eagle eats the cat.\nNeeds(bald eagle, cow) ::: The bald eagle needs the cow.\nVisits(bald eagle, squirrel) ::: The bald eagle visits the squirrel.\n¬Eats(cat, squirrel) ::: The cat does not eat the squirrel.\nGreen(cat) ::: The cat is green.\nNeeds(cat, cow) ::: The cat needs the cow.\nYoung(cow) ::: The cow is young.\nEats(squirrel, cat) ::: The squirrel eats the cat.\nBlue(squirrel) ::: The squirrel is blue.\nNeeds(squirrel, bald eagle) ::: The squirrel needs the bald eagle.\nNeeds(squirrel, cow) ::: The squirrel needs the cow.\n∀x ((Needs(x, cow) ∧ ¬Nice(x)) → Eats(x, squirrel)) ::: If someone needs the cow and they are not nice then they eat the squirrel.\n∀x ((Eats(x, cow) ∧ Needs(cow, bald eagle)) → Eats(x, squirrel)) ::: If someone eats the cow and the cow needs the bald eagle then they eat the squirrel.\n∀x (Needs(x, cat) → Needs(x, bald eagle)) ::: If someone needs the cat then they need the bald eagle.\n∀x ((Eats(x, squirrel) ∧ Visits(x, squirrel)) → Eats(squirrel, bald eagle)) ::: If someone eats the squirrel and they visit the squirrel then the squirrel eats the bald eagle.\n∀x (Needs(x, squirrel) → ¬Needs(x, bald eagle)) ::: If someone needs the squirrel then the squirrel does not need the bald eagle.\n∀x (Needs(x, cat) → ¬Eats(x, cow)) ::: If someone needs the cat then the cat does not eat the cow.\n∀x ((Needs(x, cat) ∧ Needs(x, bald eagle)) → Young(bald eagle)) ::: If someone needs the cat and they need the bald eagle then the bald eagle is young.\n∀x (Young(x) → Needs(x, cat)) ::: If someone is young then they need the cat.\n¬Eats(squirrel, bald eagle) → Visits(squirrel, cow) ::: If the squirrel does not eat the bald eagle then the squirrel visits the cow.\nConclusion:\nNeeds(cat, cow) ::: The cat needs the cow."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-672",
    "context": "Anne is cold. Anne is kind. Anne is round. Anne is smart. Anne is young. Erin is cold. Erin is round. Erin is smart. Gary is cold. Gary is kind. Gary is rough. Gary is round. Gary is smart. Gary is white. Gary is young. Harry is cold. If someone is kind then they are round. Young, cold people are white. All white people are young. All cold people are white. All round people are smart. If someone is young and cold then they are kind. All round people are kind. All young people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nPremises:\nCold(Anne) ::: Anne is cold.\nKind(Anne) ::: Anne is kind.\nRound(Anne) ::: Anne is round.\nSmart(Anne) ::: Anne is smart.\nYoung(Anne) ::: Anne is young.\nCold(Erin) ::: Erin is cold.\nRound(Erin) ::: Erin is round.\nSmart(Erin) ::: Erin is smart.\nCold(Gary) ::: Gary is cold.\nKind(Gary) ::: Gary is kind.\nRound(Gary) ::: Gary is round.\nSmart(Gary) ::: Gary is smart.\nWhite(Gary) ::: Gary is white.\nYoung(Gary) ::: Gary is young.\nCold(Harry) ::: Harry is cold.\n∀x (Kind(x) → Round(x)) ::: If someone is kind then they are round.\n∀x ((Young(x) ∧ Cold(x)) → Kind(x)) ::: If someone is young and cold then they are kind.\n∀x ((Round(x) ∧ Smart(x)) → Kind(x)) ::: All round people are kind.\n∀x ((Young(x) ∧ Round(x)) → Smart(x)) ::: All young people are smart.\n∀x (Young(x) → White(x)) ::: All white people are young.\n∀x (Cold(x) → White(x)) ::: All cold people are white.\nConclusion:\n¬Kind(Anne) ::: Anne is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-515",
    "context": "Bob is red. Charlie is nice. Charlie is smart. Dave is cold. Dave is smart. Fiona is big. Fiona is red. All green people are rough. Red, smart people are green. If Bob is green and Bob is rough then Bob is red. If someone is rough then they are big. If someone is smart and big then they are cold. If someone is green and big then they are nice. All smart, nice people are cold. All nice, rough people are big. If Dave is cold then Dave is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nPremises:\nRed(Bob) ::: Bob is red.\nNice(Charlie) ::: Charlie is nice.\nSmart(Charlie) ::: Charlie is smart.\nCold(Dave) ::: Dave is cold.\nSmart(Dave) ::: Dave is smart.\nBig(Fiona) ::: Fiona is big.\nRed(Fiona) ::: Fiona is red.\n∀x (Green(x) → Rough(x)) ::: All green people are rough.\n∀x ((Red(x) ∧ Smart(x)) → Green(x)) ::: Red, smart people are green.\n∀x ((Green(Bob) ∧ Rough(Bob)) → Red(Bob)) ::: If Bob is green and Bob is rough then Bob is red.\n∀x (Rough(x) → Big(x)) ::: If someone is rough then they are big.\n∀x ((Smart(x) ∧ Big(x)) → Cold(x)) ::: If someone is smart and big then they are cold.\n∀x ((Green(x) ∧ Big(x)) → Nice(x)) ::: If someone is green and big then they are nice.\n∀x ((Smart(x) ∧ Nice(x)) → Cold(x)) ::: All smart, nice people are cold.\n∀x ((Nice(x) ∧ Rough(x)) → Big(x)) ::: All nice, rough people are big.\n∀x (Cold(Dave) → Red(Dave)) ::: If Dave is cold then Dave is red.\nConclusion:\n¬Green(Bob) ::: Bob is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-312",
    "context": "The dog chases the squirrel. The dog likes the tiger. The lion chases the squirrel. The lion is big. The lion is red. The lion likes the tiger. The lion visits the squirrel. The lion visits the tiger. The squirrel chases the lion. The squirrel is nice. The squirrel likes the lion. The tiger chases the dog. The tiger is kind. The tiger is red. The tiger likes the dog. The tiger likes the lion. If something chases the lion then the lion is blue. If something is kind then it chases the tiger. If something chases the tiger then it visits the dog. If something visits the lion then it likes the squirrel. If something is red and it chases the tiger then it likes the squirrel. If something chases the tiger and it visits the squirrel then the squirrel visits the tiger. If something visits the dog then the dog likes the lion. If something is kind and it visits the dog then the dog is kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion visits the tiger.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nLikes(x, y) ::: x likes y.\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nVisits(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nPremises:\nChases(Dog, Squirrel) ::: The dog chases the squirrel.\nLikes(Dog, Tiger) ::: The dog likes the tiger.\nChases(Lion, Squirrel) ::: The lion chases the squirrel.\nBig(Lion) ::: The lion is big.\nRed(Lion) ::: The lion is red.\nLikes(Lion, Tiger) ::: The lion likes the tiger.\nVisits(Lion, Squirrel) ::: The lion visits the squirrel.\nVisits(Lion, Tiger) ::: The lion visits the tiger.\nChases(Squirrel, Lion) ::: The squirrel chases the lion.\nNice(Squirrel) ::: The squirrel is nice.\nLikes(Squirrel, Lion) ::: The squirrel likes the lion.\nChases(Tiger, Dog) ::: The tiger chases the dog.\nKind(Tiger) ::: The tiger is kind.\nRed(Tiger) ::: The tiger is red.\nLikes(Tiger, Dog) ::: The tiger likes the dog.\nLikes(Tiger, Lion) ::: The tiger likes the lion.\n∀x (Chases(x, Lion) → Blue(Lion)) ::: If something chases the lion then the lion is blue.\n∀x (Kind(x) → Chases(x, Tiger)) ::: If something is kind then it chases the tiger.\n∀x (Chases(x, Tiger) → Visits(x, Dog)) ::: If something chases the tiger then it visits the dog.\n∀x (Visits(x, Lion) → Likes(x, Squirrel)) ::: If something visits the lion then it likes the squirrel.\n∀x ((Red(x) ∧ Chases(x, Tiger)) → Likes(x, Squirrel)) ::: If something is red and it chases the tiger then it likes the squirrel.\n∀x ((Chases(x, Tiger) ∧ Visits(x, Squirrel)) → Visits(Squirrel, Tiger)) ::: If something chases the tiger and it visits the squirrel then the squirrel visits the tiger.\n∀x (Visits(x, Dog) → Likes(Dog, Lion)) ::: If something visits the dog then the dog likes the lion.\n∀x ((Kind(x) ∧ Visits(x, Dog)) → Kind(Dog)) ::: If something is kind and it visits the dog then the dog is kind.\nConclusion:\nVisits(Lion, Tiger) ::: The lion visits the tiger."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-925",
    "context": "The bald eagle chases the bear. The bald eagle needs the cat. The bald eagle visits the squirrel. The bear does not chase the squirrel. The bear is blue. The cat chases the squirrel. The cat visits the bear. The cat visits the squirrel. The squirrel is green. The squirrel does not need the cat. If someone is cold and they visit the bear then the bear does not need the squirrel. If the bald eagle is blue and the bald eagle visits the cat then the cat is nice. If someone is blue then they visit the cat. If someone visits the bear then the bear needs the cat. If the bear visits the bald eagle then the bear visits the cat. If someone needs the squirrel then the squirrel chases the cat. If the bear needs the bald eagle and the bear needs the cat then the bald eagle is blue. If someone visits the cat then they need the bald eagle. If someone needs the bear and they are blue then the bear does not visit the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bear is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nCold(x) ::: x is cold.\nPremises:\nChases(bald eagle, bear) ::: The bald eagle chases the bear.\nNeeds(bald eagle, cat) ::: The bald eagle needs the cat.\nVisits(bald eagle, squirrel) ::: The bald eagle visits the squirrel.\n¬Chases(bear, squirrel) ::: The bear does not chase the squirrel.\nBlue(bear) ::: The bear is blue.\nChases(cat, squirrel) ::: The cat chases the squirrel.\nVisits(cat, bear) ::: The cat visits the bear.\nVisits(cat, squirrel) ::: The cat visits the squirrel.\nGreen(squirrel) ::: The squirrel is green.\n¬Needs(squirrel, cat) ::: The squirrel does not need the cat.\n∀x ((Cold(x) ∧ Visits(x, bear)) → ¬Needs(bear, squirrel)) ::: If someone is cold and they visit the bear then the bear does not need the squirrel.\n∀x ((Blue(bald eagle) ∧ Visits(bald eagle, cat)) → Nice(cat)) ::: If the bald eagle is blue and the bald eagle visits the cat then the cat is nice.\n∀x (Blue(x) → Visits(x, cat)) ::: If someone is blue then they visit the cat.\n∀x (Visits(x, bear) → Needs(bear, cat)) ::: If someone visits the bear then the bear needs the cat.\n∀x (Visits(bear, bald eagle) → (Visits(bear, cat) ∧ Blue(bald eagle))) ::: If the bear visits the bald eagle then the bear visits the cat and the bald eagle is blue.\n∀x (Needs(x, squirrel) → Chases(squirrel, cat)) ::: If someone needs the squirrel then the squirrel chases the cat.\n∀x ((Needs(bear, bald eagle) ∧ Needs(bear, cat)) → Blue(bald eagle)) ::: If the bear needs the bald eagle and the bear needs the cat then the bald eagle is blue.\n∀x (Visits(x, cat) → Needs(x, bald eagle)) ::: If someone visits the cat then they need the bald eagle.\n∀x ((Needs(bear, x) ∧ Blue(x)) → ¬Visits(bear, squirrel)) ::: If someone needs the bear and they are blue then the bear does not visit the squirrel.\nConclusion:\n¬Blue(bear) ::: The bear is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-455",
    "context": "The bald eagle chases the squirrel. The bald eagle does not eat the lion. The bald eagle eats the squirrel. The bald eagle does not see the rabbit. The lion does not chase the rabbit. The lion is kind. The rabbit chases the bald eagle. The rabbit eats the bald eagle. The rabbit is big. The rabbit is cold. The rabbit sees the squirrel. The squirrel is blue. The squirrel is cold. The squirrel is kind. If something chases the rabbit then it is kind. If something sees the lion then it chases the rabbit. If the rabbit sees the squirrel and the squirrel eats the rabbit then the rabbit is green. If something eats the lion then the lion chases the squirrel. If something eats the rabbit then the rabbit sees the lion. If something is kind then it eats the rabbit. If something sees the lion and it does not eat the lion then it eats the bald eagle. If something eats the squirrel and the squirrel eats the bald eagle then the squirrel is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not eat the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nSees(x, y) ::: x sees y.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nBaldEagle(x) ::: x is a bald eagle.\nSquirrel(x) ::: x is a squirrel.\nLion(x) ::: x is a lion.\nRabbit(x) ::: x is a rabbit.\nPremises:\nChases(BaldEagle, Squirrel) ::: The bald eagle chases the squirrel.\n¬Eats(BaldEagle, Lion) ::: The bald eagle does not eat the lion.\nEats(BaldEagle, Squirrel) ::: The bald eagle eats the squirrel.\n¬Sees(BaldEagle, Rabbit) ::: The bald eagle does not see the rabbit.\n¬Chases(Lion, Rabbit) ::: The lion does not chase the rabbit.\nKind(Lion) ::: The lion is kind.\nChases(Rabbit, BaldEagle) ::: The rabbit chases the bald eagle.\nEats(Rabbit, BaldEagle) ::: The rabbit eats the bald eagle.\nBig(Rabbit) ::: The rabbit is big.\nCold(Rabbit) ::: The rabbit is cold.\nSees(Rabbit, Squirrel) ::: The rabbit sees the squirrel.\nBlue(Squirrel) ::: The squirrel is blue.\nCold(Squirrel) ::: The squirrel is cold.\nKind(Squirrel) ::: The squirrel is kind.\n∀x (Chases(x, Rabbit) → Kind(x)) ::: If something chases the rabbit then it is kind.\n∀x (Sees(x, Lion) → Chases(Rabbit, x)) ::: If something sees the lion then it chases the rabbit.\n∀x ((Sees(Rabbit, Squirrel) ∧ Eats(Squirrel, Rabbit)) → Green(Rabbit)) ::: If the rabbit sees the squirrel and the squirrel eats the rabbit then the rabbit is green.\n∀x (Eats(x, Lion) → Chases(Lion, Squirrel)) ::: If something eats the lion then the lion chases the squirrel.\n∀x (Eats(x, Rabbit) → Sees(Rabbit, Lion)) ::: If something eats the rabbit then the rabbit sees the lion.\n∀x (Kind(x) → Eats(x, Rabbit)) ::: If something is kind then it eats the rabbit.\n∀x ((Sees(x, Lion) ∧ ¬Eats(x, Lion)) → Eats(BaldEagle, x)) ::: If something sees the lion and it does not eat the lion then it eats the bald eagle.\n∀x ((Eats(x, Squirrel) ∧ Eats(Squirrel, BaldEagle)) → Cold(Squirrel)) ::: If something eats the squirrel and the squirrel eats the bald eagle then the squirrel is cold.\nConclusion:\n¬Eats(Lion, BaldEagle) ::: The lion does not eat the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-613",
    "context": "Anne is blue. Anne is nice. Anne is quiet. Anne is rough. Fiona is big. Fiona is blue. Fiona is quiet. Gary is blue. Gary is quiet. Gary is rough. Gary is white. Harry is white. All big people are rough. All blue, nice people are big. If someone is rough then they are green. All nice people are big. Green people are blue. Rough, white people are nice. White people are nice. Green people are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is blue.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nPremises:\nBlue(Anne) ::: Anne is blue.\nNice(Anne) ::: Anne is nice.\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nBig(Fiona) ::: Fiona is big.\nBlue(Fiona) ::: Fiona is blue.\nQuiet(Fiona) ::: Fiona is quiet.\nBlue(Gary) ::: Gary is blue.\nQuiet(Gary) ::: Gary is quiet.\nRough(Gary) ::: Gary is rough.\nWhite(Gary) ::: Gary is white.\nWhite(Harry) ::: Harry is white.\n∀x (Big(x) → Rough(x)) ::: All big people are rough.\n∀x ((Blue(x) ∧ Nice(x)) → Big(x)) ::: All blue, nice people are big.\n∀x (Rough(x) → Green(x)) ::: If someone is rough then they are green.\n∀x (Nice(x) → Big(x)) ::: All nice people are big.\n∀x (Green(x) → Blue(x)) ::: Green people are blue.\n∀x ((Rough(x) ∧ White(x)) → Nice(x)) ::: Rough, white people are nice.\n∀x (White(x) → Nice(x)) ::: White people are nice.\n∀x (Green(x) → Nice(x)) ::: Green people are nice.\nConclusion:\nBlue(Anne) ::: Anne is blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-650",
    "context": "Anne is smart. Charlie is nice. Erin is furry. Erin is white. Fiona is smart. Fiona is white. Fiona is young. Nice, smart things are young. All young, white things are cold. White things are red. All furry, red things are nice. All young things are white. All young things are white. All smart, cold things are furry. If something is nice and white then it is smart. If Anne is furry and Anne is white then Anne is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nSmart(x) ::: x is smart.\nNice(x) ::: x is nice.\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nPremises:\nSmart(Anne) ::: Anne is smart.\nNice(Charlie) ::: Charlie is nice.\nFurry(Erin) ::: Erin is furry.\nWhite(Erin) ::: Erin is white.\nSmart(Fiona) ::: Fiona is smart.\nWhite(Fiona) ::: Fiona is white.\nYoung(Fiona) ::: Fiona is young.\n∀x ((Nice(x) ∧ Smart(x)) → Young(x)) ::: Nice, smart things are young.\n∀x ((Young(x) ∧ White(x)) → Cold(x)) ::: All young, white things are cold.\n∀x (White(x) → Red(x)) ::: White things are red.\n∀x ((Furry(x) ∧ Red(x)) → Nice(x)) ::: All furry, red things are nice.\n∀x (Young(x) → White(x)) ::: All young things are white.\n∀x (Smart(x) → Furry(x)) ::: All smart, cold things are furry.\n∀x ((Nice(x) ∧ White(x)) → Smart(x)) ::: If something is nice and white then it is smart.\n∀x ((Furry(x) ∧ White(x)) → Red(x)) ::: If Anne is furry and Anne is white then Anne is red.\nConclusion:\n¬White(Erin) ::: Erin is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1039",
    "context": "Charlie is big. Charlie is kind. Charlie is nice. Charlie is round. Erin is round. Fiona is cold. Fiona is kind. Fiona is round. Harry is round. Harry is smart. If something is blue then it is cold. Blue, cold things are nice. Blue things are big. All round things are blue. Smart things are blue. Round, smart things are kind. All nice, round things are smart. Nice, round things are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nPremises:\nBig(Charlie) ::: Charlie is big.\nKind(Charlie) ::: Charlie is kind.\nNice(Charlie) ::: Charlie is nice.\nRound(Charlie) ::: Charlie is round.\nRound(Erin) ::: Erin is round.\nCold(Fiona) ::: Fiona is cold.\nKind(Fiona) ::: Fiona is kind.\nRound(Fiona) ::: Fiona is round.\nRound(Harry) ::: Harry is round.\nSmart(Harry) ::: Harry is smart.\n∀x ((Blue(x) → Cold(x))) ::: If something is blue then it is cold.\n∀x ((Blue(x) ∧ Cold(x)) → Nice(x)) ::: Blue, cold things are nice.\n∀x (Blue(x) → Big(x)) ::: Blue things are big.\n∀x (Round(x) → Blue(x)) ::: All round things are blue.\n∀x (Smart(x) → Blue(x)) ::: Smart things are blue.\n∀x ((Round(x) ∧ Smart(x)) → Kind(x)) ::: Round, smart things are kind.\n∀x ((Nice(x) ∧ Round(x)) → Smart(x)) ::: All nice, round things are smart.\n∀x ((Nice(x) ∧ Round(x)) → Big(x)) ::: Nice, round things are big.\nConclusion:\n¬Kind(Erin) ::: Erin is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1215",
    "context": "Anne is big. Anne is cold. Anne is furry. Charlie is big. Charlie is not cold. Dave is furry. Dave is nice. Dave is not quiet. Dave is smart. Fiona is quiet. Fiona is smart. Furry, white people are cold. Furry, quiet people are white. Quiet people are white. All white, quiet people are nice. White, nice people are furry. All cold people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nPremises:\nBig(Anne) ::: Anne is big.\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nBig(Charlie) ::: Charlie is big.\n¬Cold(Charlie) ::: Charlie is not cold.\nFurry(Dave) ::: Dave is furry.\nNice(Dave) ::: Dave is nice.\n¬Quiet(Dave) ::: Dave is not quiet.\nSmart(Dave) ::: Dave is smart.\nQuiet(Fiona) ::: Fiona is quiet.\nSmart(Fiona) ::: Fiona is smart.\n∀x ((Furry(x) ∧ White(x)) → Cold(x)) ::: Furry, white people are cold.\n∀x ((Furry(x) ∧ Quiet(x)) → White(x)) ::: Furry, quiet people are white.\n∀x (Quiet(x) → White(x)) ::: Quiet people are white.\n∀x ((White(x) ∧ Quiet(x)) → Nice(x)) ::: All white, quiet people are nice.\n∀x ((White(x) ∧ Nice(x)) → Furry(x)) ::: White, nice people are furry.\n∀x (Cold(x) → Big(x)) ::: All cold people are big.\nConclusion:\n¬Quiet(Dave) ::: Dave is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-718",
    "context": "Bob is round. Charlie is big. Charlie is furry. Charlie is green. Charlie is round. Charlie is white. Dave is big. Dave is quiet. Gary is green. Gary is quiet. All furry people are white. If someone is big then they are smart. All white, big people are round. If someone is quiet then they are smart. Smart people are big. All big, green people are furry. If someone is smart and round then they are quiet. Green people are smart. All smart, furry people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nPremises:\nRound(Bob) ::: Bob is round.\nBig(Charlie) ::: Charlie is big.\nFurry(Charlie) ::: Charlie is furry.\nGreen(Charlie) ::: Charlie is green.\nRound(Charlie) ::: Charlie is round.\nWhite(Charlie) ::: Charlie is white.\nBig(Dave) ::: Dave is big.\nQuiet(Dave) ::: Dave is quiet.\nGreen(Gary) ::: Gary is green.\nQuiet(Gary) ::: Gary is quiet.\n∀x (Furry(x) → White(x)) ::: All furry people are white.\n∀x (Big(x) → Smart(x)) ::: If someone is big then they are smart.\n∀x ((White(x) ∧ Big(x)) → Round(x)) ::: All white, big people are round.\n∀x (Quiet(x) → Smart(x)) ::: If someone is quiet then they are smart.\n∀x (Smart(x) → Big(x)) ::: Smart people are big.\n∀x ((Big(x) ∧ Green(x)) → Furry(x)) ::: All big, green people are furry.\n∀x ((Smart(x) ∧ Round(x)) → Quiet(x)) ::: If someone is smart and round then they are quiet.\n∀x (Green(x) → Smart(x)) ::: Green people are smart.\n∀x ((Smart(x) ∧ Furry(x)) → Big(x)) ::: All smart, furry people are big.\nConclusion:\n¬Quiet(Gary) ::: Gary is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-649",
    "context": "The bald eagle is nice. The bald eagle is rough. The bald eagle needs the mouse. The bald eagle needs the squirrel. The mouse is kind. The mouse is young. The mouse likes the tiger. The mouse sees the bald eagle. The squirrel is kind. The squirrel is nice. The squirrel needs the bald eagle. The tiger is kind. If someone likes the bald eagle then they are rough. If someone is blue and they see the tiger then the tiger needs the squirrel. If the mouse needs the bald eagle and the bald eagle likes the mouse then the bald eagle is rough. If the mouse needs the squirrel then the squirrel likes the mouse. If someone is rough then they see the mouse. If someone needs the tiger and the tiger is kind then they like the bald eagle. If someone sees the mouse then they need the squirrel. If someone needs the squirrel and the squirrel is nice then the squirrel needs the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nBlue(x) ::: x is blue.\n∀x (BaldEagle(x) → Nice(x)) ::: The bald eagle is nice.\n∀x (BaldEagle(x) → Rough(x)) ::: The bald eagle is rough.\n∀x (BaldEagle(x) ∧ Needs(x, Mouse)) ::: The bald eagle needs the mouse.\n∀x (BaldEagle(x) ∧ Needs(x, Squirrel)) ::: The bald eagle needs the squirrel.\n∀x (Mouse(x) → Kind(x)) ::: The mouse is kind.\n∀x (Mouse(x) → Young(x)) ::: The mouse is young.\n∀x (Mouse(x) ∧ Likes(x, Tiger)) ::: The mouse likes the tiger.\n∀x (Mouse(x) ∧ Sees(x, BaldEagle)) ::: The mouse sees the bald eagle.\n∀x (Squirrel(x) → Kind(x)) ::: The squirrel is kind.\n∀x (Squirrel(x) → Nice(x)) ::: The squirrel is nice.\n∀x (Squirrel(x) ∧ Needs(x, BaldEagle)) ::: The squirrel needs the bald eagle.\n∀x (Tiger(x) → Kind(x)) ::: The tiger is kind.\n∀x ((Likes(x, BaldEagle)) → Rough(x)) ::: If someone likes the bald eagle then they are rough.\n∀x ((Blue(x) ∧ Sees(x, Tiger)) → Needs(Tiger, Squirrel)) ::: If someone is blue and they see the tiger then the tiger needs the squirrel.\n∀x ((Mouse(x) ∧ Needs(x, BaldEagle) ∧ Likes(BaldEagle, x)) → Rough(BaldEagle)) ::: If the mouse needs the bald eagle and the bald eagle likes the mouse then the bald eagle is rough.\n∀x ((Mouse(x) ∧ Needs(x, Squirrel)) → Likes(Squirrel, x)) ::: If the mouse needs the squirrel then the squirrel likes the mouse.\n∀x (Rough(x) → Sees(x, Mouse)) ::: If someone is rough then they see the mouse.\n∀x ((Needs(x, Tiger) ∧ Tiger(x) ∧ Kind(Tiger)) → Likes(x, BaldEagle)) ::: If someone needs the tiger and the tiger is kind then they like the bald eagle.\n∀x ((Sees(x, Mouse)) → Needs(x, Squirrel)) ::: If someone sees the mouse then they need the squirrel.\n∀x ((Needs(x, Squirrel) ∧ Squirrel(x) ∧ Nice(Squirrel)) → Needs(Squirrel, Tiger)) ::: If someone needs the squirrel and the squirrel is nice then the squirrel needs the tiger.\nConclusion:\n¬Rough(Mouse) ::: The mouse is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-550",
    "context": "Anne is furry. Anne is smart. Bob is furry. Dave is red. Dave is smart. Fiona is nice. Fiona is not round. All smart, round things are not nice. All smart, blue things are nice. If something is blue then it is green. All nice, furry things are not green. All furry things are green. If something is red then it is smart. If something is smart then it is round. Green things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nSmart(x) ::: x is smart.\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nPremises:\nFurry(Anne) ::: Anne is furry.\nSmart(Anne) ::: Anne is smart.\nFurry(Bob) ::: Bob is furry.\nRed(Dave) ::: Dave is red.\nSmart(Dave) ::: Dave is smart.\nNice(Fiona) ::: Fiona is nice.\n¬Round(Fiona) ::: Fiona is not round.\n∀x ((Smart(x) ∧ Round(x)) → ¬Nice(x)) ::: All smart, round things are not nice.\n∀x ((Smart(x) ∧ Blue(x)) → Nice(x)) ::: All smart, blue things are nice.\n∀x (Blue(x) → Green(x)) ::: If something is blue then it is green.\n∀x ((Nice(x) ∧ Furry(x)) → ¬Green(x)) ::: All nice, furry things are not green.\n∀x (Furry(x) → Green(x)) ::: All furry things are green.\n∀x (Red(x) → Smart(x)) ::: If something is red then it is smart.\n∀x (Smart(x) → Round(x)) ::: If something is smart then it is round.\nGreen(x) → Red(x) ::: Green things are red.\nConclusion:\nFurry(Bob) ::: Bob is furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-401",
    "context": "Anne is cold. Anne is kind. Charlie is blue. Charlie is round. Dave is blue. Fiona is not green. Fiona is kind. If Charlie is cold then Charlie is quiet. If Charlie is big then Charlie is not green. If Anne is kind then Anne is big. All big people are blue. Blue people are quiet. If Dave is kind then Dave is cold. If someone is round then they are green. Quiet people are round. If someone is kind and not blue then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nBig(x) ::: x is big.\nPremises:\nCold(Anne) ::: Anne is cold.\nKind(Anne) ::: Anne is kind.\nBlue(Charlie) ::: Charlie is blue.\nRound(Charlie) ::: Charlie is round.\nBlue(Dave) ::: Dave is blue.\n¬Green(Fiona) ::: Fiona is not green.\nKind(Fiona) ::: Fiona is kind.\n∀x ((Cold(x) → Quiet(x)) ::: If Charlie is cold then Charlie is quiet.\n∀x ((Big(x) → ¬Green(x)) ::: If Charlie is big then Charlie is not green.\n∀x ((Kind(x) → Big(x)) ::: If Anne is kind then Anne is big.\n∀x (Big(x) → Blue(x)) ::: All big people are blue.\n∀x (Blue(x) → Quiet(x)) ::: Blue people are quiet.\n∀x ((Kind(x) → Cold(x)) ::: If Dave is kind then Dave is cold.\n∀x (Round(x) → Green(x)) ::: If someone is round then they are green.\n∀x (Quiet(x) → Round(x)) ::: Quiet people are round.\n∀x ((Kind(x) ∧ ¬Blue(x)) → Round(x)) ::: If someone is kind and not blue then they are round.\nConclusion:\n¬Blue(Charlie) ::: Charlie is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-818",
    "context": "The bald eagle chases the squirrel. The cat is not young. The cow likes the bald eagle. The cow likes the cat. The cow visits the bald eagle. The squirrel is green. The squirrel does not like the cat. If something is nice then it does not like the cow. If something is round and young then it does not like the cow. If the cow visits the squirrel then the squirrel likes the bald eagle. If something likes the bald eagle then it likes the squirrel. If something likes the squirrel then it visits the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not visit the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nYoung(x) ::: x is young.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nPremises:\nChases(bald eagle, squirrel) ::: The bald eagle chases the squirrel.\n¬Young(cat) ::: The cat is not young.\nLikes(cow, bald eagle) ::: The cow likes the bald eagle.\nLikes(cow, cat) ::: The cow likes the cat.\nVisits(cow, bald eagle) ::: The cow visits the bald eagle.\nGreen(squirrel) ::: The squirrel is green.\n¬Likes(squirrel, cat) ::: The squirrel does not like the cat.\n∀x (Nice(x) → ¬Likes(x, cow)) ::: If something is nice then it does not like the cow.\n∀x ((Round(x) ∧ Young(x)) → ¬Likes(x, cow)) ::: If something is round and young then it does not like the cow.\n∀x ((cow visits x) → Likes(x, bald eagle)) ::: If the cow visits the squirrel then the squirrel likes the bald eagle.\n∀x (Likes(x, bald eagle) → Likes(x, squirrel)) ::: If something likes the bald eagle then it likes the squirrel.\n∀x (Likes(x, squirrel) → Visits(x, squirrel)) ::: If something likes the squirrel then it visits the squirrel.\nConclusion:\n¬Visits(cat, squirrel) ::: The cat does not visit the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-179",
    "context": "The dog is big. The dog does not need the tiger. The dog sees the tiger. The dog visits the squirrel. The rabbit is nice. The rabbit is young. The rabbit sees the squirrel. The rabbit visits the dog. The squirrel is cold. The squirrel is not nice. The tiger is not nice. The tiger is round. The tiger needs the rabbit. The tiger sees the rabbit. The tiger does not visit the dog. The tiger visits the squirrel. If someone visits the rabbit and they visit the tiger then the tiger needs the dog. If someone is young and they visit the squirrel then the squirrel needs the dog. If someone is big then they see the squirrel. If someone is big and they visit the tiger then they are young. If someone needs the squirrel and the squirrel needs the dog then the dog visits the tiger. If someone is young then they need the squirrel. If someone sees the rabbit and they are round then the rabbit visits the squirrel. If someone is big and they do not visit the tiger then the tiger visits the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nNeed(x, y) ::: x needs y.\nSee(x, y) ::: x sees y.\nVisit(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nPremises:\nBig(Dog) ::: The dog is big.\n¬Need(Dog, Tiger) ::: The dog does not need the tiger.\nSee(Dog, Tiger) ::: The dog sees the tiger.\nVisit(Dog, Squirrel) ::: The dog visits the squirrel.\nNice(Rabbit) ::: The rabbit is nice.\nYoung(Rabbit) ::: The rabbit is young.\nSee(Rabbit, Squirrel) ::: The rabbit sees the squirrel.\nVisit(Rabbit, Dog) ::: The rabbit visits the dog.\nCold(Squirrel) ::: The squirrel is cold.\n¬Nice(Squirrel) ::: The squirrel is not nice.\n¬Nice(Tiger) ::: The tiger is not nice.\nRound(Tiger) ::: The tiger is round.\nNeed(Tiger, Rabbit) ::: The tiger needs the rabbit.\nSee(Tiger, Rabbit) ::: The tiger sees the rabbit.\n¬Visit(Tiger, Dog) ::: The tiger does not visit the dog.\nVisit(Tiger, Squirrel) ::: The tiger visits the squirrel.\n∀x ((Visit(x, Rabbit) ∧ Visit(x, Tiger)) → Need(Tiger, Dog)) ::: If someone visits the rabbit and they visit the tiger then the tiger needs the dog.\n∀x ((Young(x) ∧ Visit(x, Squirrel)) → Need(Squirrel, Dog)) ::: If someone is young and they visit the squirrel then the squirrel needs the dog.\n∀x (Big(x) → See(x, Squirrel)) ::: If someone is big then they see the squirrel.\n∀x ((Big(x) ∧ Visit(x, Tiger)) → Young(x)) ::: If someone is big and they visit the tiger then they are young.\n∀x ((Need(x, Squirrel) ∧ Need(Squirrel, Dog)) → Visit(Dog, Tiger)) ::: If someone needs the squirrel and the squirrel needs the dog then the dog visits the tiger.\n∀x (Young(x) → Need(x, Squirrel)) ::: If someone is young then they need the squirrel.\n∀x ((See(x, Rabbit) ∧ Round(x)) → Visit(Rabbit, Squirrel)) ::: If someone sees the rabbit and they are round then the rabbit visits the squirrel.\n∀x ((Big(x) ∧ ¬Visit(x, Tiger)) → Visit(Tiger, Dog)) ::: If someone is big and they do not visit the tiger then the tiger visits the dog.\nConclusion:\nRound(Tiger) ::: The tiger is round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-461",
    "context": "Anne is big. Anne is kind. Anne is quiet. Anne is rough. Anne is white. Fiona is big. Gary is big. Gary is cold. Gary is kind. Harry is kind. If something is kind then it is big. If something is white and kind then it is rough. If Harry is quiet and Harry is cold then Harry is big. If something is quiet then it is big. If something is cold and rough then it is quiet. All kind things are young. If Harry is kind and Harry is cold then Harry is white. If something is young and kind then it is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nPremises:\nBig(Anne) ::: Anne is big.\nKind(Anne) ::: Anne is kind.\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nWhite(Anne) ::: Anne is white.\nBig(Fiona) ::: Fiona is big.\nBig(Gary) ::: Gary is big.\nCold(Gary) ::: Gary is cold.\nKind(Gary) ::: Gary is kind.\nKind(Harry) ::: Harry is kind.\n∀x (Kind(x) → Big(x)) ::: If something is kind then it is big.\n∀x ((White(x) ∧ Kind(x)) → Rough(x)) ::: If something is white and kind then it is rough.\n∀x ((Quiet(Harry) ∧ Cold(Harry)) → Big(Harry)) ::: If Harry is quiet and Harry is cold then Harry is big.\n∀x (Quiet(x) → Big(x)) ::: If something is quiet then it is big.\n∀x ((Cold(x) ∧ Rough(x)) → Quiet(x)) ::: If something is cold and rough then it is quiet.\n∀x (Kind(x) → Young(x)) ::: All kind things are young.\n∀x ((Kind(Harry) ∧ Cold(Harry)) → White(Harry)) ::: If Harry is kind and Harry is cold then Harry is white.\n∀x ((Young(x) ∧ Kind(x)) → Cold(x)) ::: If something is young and kind then it is cold.\nConclusion:\n¬White(Anne) ::: Anne is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-472",
    "context": "Bob is big. Bob is cold. Bob is kind. Bob is quiet. Bob is smart. Erin is blue. Erin is cold. Erin is kind. Erin is white. Fiona is quiet. Fiona is not smart. Fiona is white. Gary is blue. Gary is white. If someone is cold then they are blue. If someone is big then they are cold. If someone is smart then they are quiet. If someone is blue then they are quiet. All cold people are quiet. All quiet, blue people are big. Cold, quiet people are smart. If someone is smart and not cold then they are kind. White, smart people are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nPremises:\nBig(Bob) ::: Bob is big.\nCold(Bob) ::: Bob is cold.\nKind(Bob) ::: Bob is kind.\nQuiet(Bob) ::: Bob is quiet.\nSmart(Bob) ::: Bob is smart.\nBlue(Erin) ::: Erin is blue.\nCold(Erin) ::: Erin is cold.\nKind(Erin) ::: Erin is kind.\nWhite(Erin) ::: Erin is white.\nQuiet(Fiona) ::: Fiona is quiet.\n¬Smart(Fiona) ::: Fiona is not smart.\nWhite(Fiona) ::: Fiona is white.\nBlue(Gary) ::: Gary is blue.\nWhite(Gary) ::: Gary is white.\n∀x (Cold(x) → Blue(x)) ::: If someone is cold then they are blue.\n∀x (Big(x) → Cold(x)) ::: If someone is big then they are cold.\n∀x (Smart(x) → Quiet(x)) ::: If someone is smart then they are quiet.\n∀x (Blue(x) → Quiet(x)) ::: If someone is blue then they are quiet.\n∀x (Cold(x) → Quiet(x)) ::: All cold people are quiet.\n∀x ((Quiet(x) ∧ Blue(x)) → Big(x)) ::: All quiet, blue people are big.\n∀x ((Cold(x) ∧ Quiet(x)) → Smart(x)) ::: Cold, quiet people are smart.\n∀x ((Smart(x) ∧ ¬Cold(x)) → Kind(x)) ::: If someone is smart and not cold then they are kind.\n∀x ((White(x) ∧ Smart(x)) → Kind(x)) ::: White, smart people are kind.\nConclusion:\n¬Blue(Fiona) ::: Fiona is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1280",
    "context": "Erin is blue. Erin is white. Fiona is furry. Gary is blue. Gary is green. Gary is nice. Gary is smart. Harry is furry. Harry is green. Harry is nice. Harry is rough. Harry is smart. If Erin is rough then Erin is smart. All furry, nice things are green. If Fiona is furry and Fiona is green then Fiona is white. If something is white then it is rough. If Gary is green then Gary is furry. Smart, blue things are nice. All nice, blue things are furry. If something is green and nice then it is white. Nice, furry things are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is blue.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nRough(x) ::: x is rough.\nPremises:\nBlue(Erin) ::: Erin is blue.\nWhite(Erin) ::: Erin is white.\nFurry(Fiona) ::: Fiona is furry.\nBlue(Gary) ::: Gary is blue.\nGreen(Gary) ::: Gary is green.\nNice(Gary) ::: Gary is nice.\nSmart(Gary) ::: Gary is smart.\nFurry(Harry) ::: Harry is furry.\nGreen(Harry) ::: Harry is green.\nNice(Harry) ::: Harry is nice.\nRough(Harry) ::: Harry is rough.\nSmart(Harry) ::: Harry is smart.\n∀x ((Erin(x) ∧ Rough(x)) → Smart(x)) ::: If Erin is rough then Erin is smart.\n∀x ((Furry(x) ∧ Nice(x)) → Green(x)) ::: All furry, nice things are green.\n∀x ((Furry(x) ∧ Green(x)) → White(x)) ::: If Fiona is furry and green then Fiona is white.\n∀x (White(x) → Rough(x)) ::: If something is white then it is rough.\n∀x (Green(x) → Furry(x)) ::: If Gary is green then Gary is furry.\n∀x ((Smart(x) ∧ Blue(x)) → Nice(x)) ::: Smart, blue things are nice.\n∀x ((Nice(x) ∧ Blue(x)) → Furry(x)) ::: All nice, blue things are furry.\n∀x ((Green(x) ∧ Nice(x)) → White(x)) ::: If something is green and nice then it is white.\n∀x ((Nice(x) ∧ Furry(x)) → Blue(x)) ::: Nice, furry things are blue.\nConclusion:\nBlue(Gary) ::: Gary is blue."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-230",
    "context": "The bear is big. The bear is cold. The bear likes the cat. The bear visits the cat. The bear visits the cow. The cat is green. The cat needs the bear. The cow needs the dog. The dog is blue. The dog likes the bear. The dog visits the cow. If something is blue then it is red. If something likes the cow then the cow is big. If the cow needs the cat then the cow likes the cat. If something is blue then it is cold. If something is big and it likes the dog then the dog likes the cow. If something needs the bear and the bear needs the dog then the bear is red. If something likes the bear and it is big then it needs the dog. If something is big then it needs the cat. If the bear is big then the bear likes the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not like the bear.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nGreen(x) ::: x is green.\nNeeds(x, y) ::: x needs y.\nBlue(x) ::: x is blue.\nRed(x) ::: x is red.\nConclusion:\n¬Likes(Dog, Bear) ::: The dog does not like the bear.\nPremises:\nBig(Bear) ::: The bear is big.\nCold(Bear) ::: The bear is cold.\nLikes(Bear, Cat) ::: The bear likes the cat.\nVisits(Bear, Cat) ::: The bear visits the cat.\nVisits(Bear, Cow) ::: The bear visits the cow.\nGreen(Cat) ::: The cat is green.\nNeeds(Cat, Bear) ::: The cat needs the bear.\nNeeds(Cow, Dog) ::: The cow needs the dog.\nBlue(Dog) ::: The dog is blue.\nLikes(Dog, Bear) ::: The dog likes the bear.\nVisits(Dog, Cow) ::: The dog visits the cow.\n∀x (Blue(x) → Red(x)) ::: If something is blue then it is red.\n∀x (Likes(x, Cow) → Big(Cow)) ::: If something likes the cow then the cow is big.\n∀x (Needs(Cow, Cat) → Likes(Cow, Cat)) ::: If the cow needs the cat then the cow likes the cat.\n∀x (Blue(x) → Cold(x)) ::: If something is blue then it is cold.\n∀x ((Big(x) ∧ Likes(x, Dog)) → Likes(Dog, Cow)) ::: If something is big and it likes the dog then the dog likes the cow.\n∀x ((Needs(x, Bear) ∧ Needs(Bear, Dog)) → Red(Bear)) ::: If something needs the bear and the bear needs the dog then the bear is red.\n∀x ((Likes(x, Bear) ∧ Big(x)) → Needs(x, Dog)) ::: If something likes the bear and it is big then it needs the dog.\n∀x (Big(x) → Needs(x, Cat)) ::: If something is big then it needs the cat.\n∀x (Big(Bear) → Likes(Bear, Dog)) ::: If the bear is big then the bear likes the dog."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-251",
    "context": "The dog does not visit the rabbit. The dog visits the squirrel. The lion is nice. The lion does not need the dog. The lion does not see the dog. The lion sees the rabbit. The rabbit needs the lion. The rabbit sees the dog. The rabbit sees the lion. The rabbit visits the dog. The squirrel sees the rabbit. The squirrel visits the dog. If something sees the squirrel then the squirrel is kind. If something needs the lion and the lion does not visit the squirrel then it is cold. If something needs the lion then it is cold. If something sees the squirrel then the squirrel needs the lion. If something is cold then it sees the squirrel. If something is blue then it visits the rabbit. If something is nice then it sees the lion. If something is cold and it needs the lion then it sees the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not see the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nVisit(x, y) ::: x visits y.\nNice(x) ::: x is nice.\nNeed(x, y) ::: x needs y.\nSee(x, y) ::: x sees y.\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nRabbit(x) ::: x is a rabbit.\nDog(x) ::: x is a dog.\nLion(x) ::: x is a lion.\nSquirrel(x) ::: x is a squirrel.\nPremises:\n¬Visit(Dog, Rabbit) ::: The dog does not visit the rabbit.\nVisit(Dog, Squirrel) ::: The dog visits the squirrel.\nNice(Lion) ::: The lion is nice.\n¬Need(Lion, Dog) ::: The lion does not need the dog.\n¬See(Lion, Dog) ::: The lion does not see the dog.\nSee(Lion, Rabbit) ::: The lion sees the rabbit.\nNeed(Rabbit, Lion) ::: The rabbit needs the lion.\nSee(Rabbit, Dog) ::: The rabbit sees the dog.\nSee(Rabbit, Lion) ::: The rabbit sees the lion.\nVisit(Rabbit, Dog) ::: The rabbit visits the dog.\nSee(Squirrel, Rabbit) ::: The squirrel sees the rabbit.\nVisit(Squirrel, Dog) ::: The squirrel visits the dog.\n∀x (See(x, Squirrel) → Kind(Squirrel)) ::: If something sees the squirrel then the squirrel is kind.\n∀x ((Need(x, Lion) ∧ ¬Visit(Lion, Squirrel)) → Cold(x)) ::: If something needs the lion and the lion does not visit the squirrel then it is cold.\n∀x (Need(x, Lion) → Cold(x)) ::: If something needs the lion then it is cold.\n∀x (See(x, Squirrel) → Need(Squirrel, Lion)) ::: If something sees the squirrel then the squirrel needs the lion.\n∀x (Cold(x) → See(x, Squirrel)) ::: If something is cold then it sees the squirrel.\n∀x (Blue(x) → Visit(x, Rabbit)) ::: If something is blue then it visits the rabbit.\n∀x (Nice(x) → See(x, Lion)) ::: If something is nice then it sees the lion.\n∀x ((Cold(x) ∧ Need(x, Lion)) → See(x, Dog)) ::: If something is cold and it needs the lion then it sees the dog.\nConclusion:\n¬See(Lion, Squirrel) ::: The lion does not see the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-510",
    "context": "The bear is cold. The bear is not green. The bear is rough. The rabbit is cold. The squirrel is nice. The squirrel does not visit the rabbit. The squirrel visits the tiger. The tiger chases the bear. The tiger does not eat the rabbit. The tiger is cold. The tiger is nice. The tiger is not rough. The tiger visits the rabbit. The tiger visits the squirrel. If something is green and it visits the squirrel then the squirrel is green. If something chases the rabbit then it eats the bear. If the squirrel eats the rabbit and the rabbit visits the bear then the bear is not red. If something is cold then it chases the rabbit. If the rabbit chases the squirrel then the squirrel eats the bear. If something chases the bear and it visits the tiger then the tiger chases the squirrel. If something is cold and not nice then it eats the rabbit. If something eats the bear and the bear visits the squirrel then it eats the rabbit. If something eats the bear then it chases the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger chases the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nNice(x) ::: x is nice.\nVisit(x, y) ::: x visits y.\nChase(x, y) ::: x chases y.\nEat(x, y) ::: x eats y.\nRed(x) ::: x is red.\nPremises:\nCold(bear) ::: The bear is cold.\n¬Green(bear) ::: The bear is not green.\nRough(bear) ::: The bear is rough.\nCold(rabbit) ::: The rabbit is cold.\nNice(squirrel) ::: The squirrel is nice.\n¬Visit(squirrel, rabbit) ::: The squirrel does not visit the rabbit.\nVisit(squirrel, tiger) ::: The squirrel visits the tiger.\nChase(tiger, bear) ::: The tiger chases the bear.\n¬Eat(tiger, rabbit) ::: The tiger does not eat the rabbit.\nCold(tiger) ::: The tiger is cold.\nNice(tiger) ::: The tiger is nice.\n¬Rough(tiger) ::: The tiger is not rough.\nVisit(x, squirrel) ∧ Green(x) → Green(squirrel) ::: If something is green and it visits the squirrel then the squirrel is green.\nChase(x, rabbit) → Eat(x, bear) ::: If something chases the rabbit then it eats the bear.\nEat(squirrel, rabbit) ∧ Visit(rabbit, bear) → ¬Red(bear) ::: If the squirrel eats the rabbit and the rabbit visits the bear then the bear is not red.\nCold(x) → Chase(x, rabbit) ::: If something is cold then it chases the rabbit.\nChase(rabbit, squirrel) → Eat(squirrel, bear) ::: If the rabbit chases the squirrel then the squirrel eats the bear.\nChase(x, bear) ∧ Visit(bear, tiger) → Chase(tiger, squirrel) ::: If something chases the bear and it visits the tiger then the tiger chases the squirrel.\nCold(x) ∧ ¬Nice(x) → Eat(x, rabbit) ::: If something is cold and not nice then it eats the rabbit.\nEat(x, bear) ∧ Visit(bear, squirrel) → Eat(x, rabbit) ::: If something eats the bear and the bear visits the squirrel then it eats the rabbit.\nEat(x, bear) → Chase(x, squirrel) ::: If something eats the bear then it chases the squirrel.\nConclusion:\nChase(tiger, bear) ::: The tiger chases the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-269",
    "context": "Charlie is blue. Charlie is round. Fiona is big. Fiona is cold. Gary is nice. Harry is nice. Harry is round. All rough, blue things are red. All nice things are cold. Big, cold things are rough. If something is red and blue then it is rough. All blue, cold things are nice. All red things are blue. If something is round and cold then it is blue. Blue things are big. If Charlie is big then Charlie is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nPremises:\nBlue(Charlie) ::: Charlie is blue.\nRound(Charlie) ::: Charlie is round.\nBig(Fiona) ::: Fiona is big.\nCold(Fiona) ::: Fiona is cold.\nNice(Gary) ::: Gary is nice.\nNice(Harry) ::: Harry is nice.\nRound(Harry) ::: Harry is round.\n∀x ((Rough(x) ∧ Blue(x)) → Red(x)) ::: All rough, blue things are red.\n∀x (Nice(x) → Cold(x)) ::: All nice things are cold.\n∀x ((Big(x) ∧ Cold(x)) → Rough(x)) ::: Big, cold things are rough.\n∀x ((Red(x) ∧ Blue(x)) → Rough(x)) ::: If something is red and blue then it is rough.\n∀x ((Blue(x) ∧ Cold(x)) → Nice(x)) ::: All blue, cold things are nice.\n∀x (Red(x) → Blue(x)) ::: All red things are blue.\n∀x ((Round(x) ∧ Cold(x)) → Blue(x)) ::: If something is round and cold then it is blue.\n∀x (Blue(x) → Big(x)) ::: Blue things are big.\n∀x ((Big(Charlie) → Blue(Charlie))) ::: If Charlie is big then Charlie is blue.\nConclusion:\n¬Round(Charlie) ::: Charlie is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-352",
    "context": "Charlie is furry. Charlie is green. Charlie is white. Dave is blue. Dave is cold. Gary is cold. Gary is rough. Harry is blue. Harry is furry. Harry is rough. Harry is white. Nice, cold people are green. Rough people are green. Green people are blue. If someone is blue then they are nice. Furry, green people are rough. Green, nice people are furry. White people are nice. Cold people are blue. All rough, nice people are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nNice(x) ::: x is nice.\nPremises:\nFurry(Charlie) ::: Charlie is furry.\nGreen(Charlie) ::: Charlie is green.\nWhite(Charlie) ::: Charlie is white.\nBlue(Dave) ::: Dave is blue.\nCold(Dave) ::: Dave is cold.\nCold(Gary) ::: Gary is cold.\nRough(Gary) ::: Gary is rough.\nBlue(Harry) ::: Harry is blue.\nFurry(Harry) ::: Harry is furry.\nRough(Harry) ::: Harry is rough.\nWhite(Harry) ::: Harry is white.\n∀x ((Nice(x) ∧ Cold(x)) → Green(x)) ::: Nice, cold people are green.\n∀x (Rough(x) → Green(x)) ::: Rough people are green.\n∀x (Green(x) → Blue(x)) ::: Green people are blue.\n∀x (Blue(x) → Nice(x)) ::: If someone is blue then they are nice.\n∀x ((Furry(x) ∧ Green(x)) → Rough(x)) ::: Furry, green people are rough.\n∀x ((Green(x) ∧ Nice(x)) → Furry(x)) ::: Green, nice people are furry.\n∀x (White(x) → Nice(x)) ::: White people are nice.\n∀x (Cold(x) → Blue(x)) ::: Cold people are blue.\n∀x ((Rough(x) ∧ Nice(x)) → White(x)) ::: All rough, nice people are white.\nConclusion:\n¬Cold(Charlie) ::: Charlie is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-413",
    "context": "The bear is green. The bear is kind. The mouse needs the bear. The mouse visits the bear. The mouse visits the squirrel. The mouse visits the tiger. The squirrel chases the bear. The squirrel is cold. The squirrel is nice. The tiger is green. The tiger needs the bear. If something needs the mouse then it is kind. If the mouse is young then the mouse needs the bear. If something chases the bear then it needs the tiger. If something needs the squirrel and it visits the mouse then the mouse needs the squirrel. If something visits the squirrel then it needs the mouse. If something chases the squirrel and the squirrel is nice then it is young. If something visits the mouse and the mouse is green then it needs the tiger. If something is kind and it visits the tiger then the tiger visits the squirrel. If the bear needs the squirrel and the bear visits the tiger then the bear chases the tiger.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nPremises:\nGreen(bear) ::: The bear is green.\nKind(bear) ::: The bear is kind.\nNeeds(mouse, bear) ::: The mouse needs the bear.\nVisits(mouse, bear) ::: The mouse visits the bear.\nVisits(mouse, squirrel) ::: The mouse visits the squirrel.\nVisits(mouse, tiger) ::: The mouse visits the tiger.\nChases(squirrel, bear) ::: The squirrel chases the bear.\nCold(squirrel) ::: The squirrel is cold.\nNice(squirrel) ::: The squirrel is nice.\nGreen(tiger) ::: The tiger is green.\nNeeds(tiger, bear) ::: The tiger needs the bear.\n∀x (Needs(x, mouse) → Kind(x)) ::: If something needs the mouse then it is kind.\n∀x (Young(mouse) → Needs(mouse, bear)) ::: If the mouse is young then the mouse needs the bear.\n∀x ((Chases(x, bear)) → Needs(x, tiger)) ::: If something chases the bear then it needs the tiger.\n∀x ((Needs(x, squirrel) ∧ Visits(x, mouse)) → Needs(mouse, squirrel)) ::: If something needs the squirrel and it visits the mouse then the mouse needs the squirrel.\n∀x (Visits(x, squirrel) → Needs(mouse, x)) ::: If something visits the squirrel then it needs the mouse.\n∀x ((Chases(x, squirrel) ∧ Nice(squirrel)) → Young(x)) ::: If something chases the squirrel and the squirrel is nice then it is young.\n∀x ((Visits(x, mouse) ∧ Green(mouse)) → Needs(x, tiger)) ::: If something visits the mouse and the mouse is green then it needs the tiger.\n∀x ((Kind(x) ∧ Visits(x, tiger)) → Visits(tiger, squirrel)) ::: If something is kind and it visits the tiger then the tiger visits the squirrel.\n∀x ((Needs(bear, squirrel) ∧ Visits(bear, tiger)) → Chases(bear, tiger)) ::: If the bear needs the squirrel and the bear visits the tiger then the bear chases the tiger.\nConclusion:\nCold(squirrel) ::: The squirrel is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-844",
    "context": "Anne is big. Anne is cold. Anne is furry. Anne is white. Erin is cold. Fiona is round. Gary is smart. All smart things are furry. Big, blue things are round. If Gary is cold then Gary is smart. All blue, furry things are big. If Gary is furry then Gary is blue. Round things are cold. Cold, white things are furry. Round things are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nPremises:\nBig(Anne) ::: Anne is big.\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nWhite(Anne) ::: Anne is white.\nCold(Erin) ::: Erin is cold.\nRound(Fiona) ::: Fiona is round.\nSmart(Gary) ::: Gary is smart.\n∀x (Smart(x) → Furry(x)) ::: All smart things are furry.\n∀x ((Big(x) ∧ Blue(x)) → Round(x)) ::: Big, blue things are round.\n∀x ((Gary(x) ∧ Cold(x)) → Smart(x)) ::: If Gary is cold then Gary is smart.\n∀x ((Blue(x) ∧ Furry(x)) → Big(x)) ::: All blue, furry things are big.\n∀x ((Gary(x) ∧ Furry(x)) → Blue(x)) ::: If Gary is furry then Gary is blue.\n∀x (Round(x) → Cold(x)) ::: Round things are cold.\n∀x ((Cold(x) ∧ White(x)) → Furry(x)) ::: Cold, white things are furry.\n∀x (Round(x) → Blue(x)) ::: Round things are blue.\nConclusion:\n¬Furry(Anne) ::: Anne is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-56",
    "context": "Dave is red. Erin is quiet. Fiona is white. Harry is big. Harry is not green. Harry is quiet. Harry is red. Quiet, red people are smart. If someone is quiet then they are smart. If Dave is red then Dave is big. If Dave is smart and Dave is white then Dave is big. If Fiona is white and Fiona is red then Fiona is rough. If someone is white then they are quiet. Rough people are green. All smart people are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nSmart(x) ::: x is smart.\nRough(x) ::: x is rough.\nPremises:\nRed(Dave) ::: Dave is red.\nQuiet(Erin) ::: Erin is quiet.\nWhite(Fiona) ::: Fiona is white.\nBig(Harry) ::: Harry is big.\n¬Green(Harry) ::: Harry is not green.\nQuiet(Harry) ::: Harry is quiet.\nRed(Harry) ::: Harry is red.\n∀x ((Quiet(x) ∧ Red(x)) → Smart(x)) ::: Quiet, red people are smart.\n∀x (Quiet(x) → Smart(x)) ::: If someone is quiet then they are smart.\n∀x ((Red(Dave)) → Big(Dave)) ::: If Dave is red then Dave is big.\n∀x ((Smart(Dave) ∧ White(Dave)) → Big(Dave)) ::: If Dave is smart and Dave is white then Dave is big.\n∀x ((White(Fiona) ∧ Red(Fiona)) → Rough(Fiona)) ::: If Fiona is white and Fiona is red then Fiona is rough.\n∀x ((White(x)) → Quiet(x)) ::: If someone is white then they are quiet.\n∀x (Rough(x) → Green(x)) ::: Rough people are green.\n∀x (Smart(x) → Red(x)) ::: All smart people are red.\nConclusion:\n¬Quiet(Dave) ::: Dave is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1250",
    "context": "Anne is white. Erin is round. Erin is white. Gary is cold. Gary is round. Harry is furry. Harry is green. Furry, white people are green. Nice people are round. All round, furry people are green. All cold people are white. All cold, rough people are round. All white people are cold. If someone is cold then they are furry. All furry, green people are rough. All round, green people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite(x) ::: x is white.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nPremises:\nWhite(Anne) ::: Anne is white.\nRound(Erin) ::: Erin is round.\nWhite(Erin) ::: Erin is white.\nCold(Gary) ::: Gary is cold.\nRound(Gary) ::: Gary is round.\nFurry(Harry) ::: Harry is furry.\nGreen(Harry) ::: Harry is green.\n∀x ((Furry(x) ∧ White(x)) → Green(x)) ::: Furry, white people are green.\n∀x (Nice(x) → Round(x)) ::: Nice people are round.\n∀x ((Round(x) ∧ Furry(x)) → Green(x)) ::: All round, furry people are green.\n∀x (Cold(x) → White(x)) ::: All cold people are white.\n∀x ((Cold(x) ∧ Rough(x)) → Round(x)) ::: All cold, rough people are round.\n∀x (White(x) → Cold(x)) ::: All white people are cold.\n∀x (Cold(x) → Furry(x)) ::: If someone is cold then they are furry.\n∀x ((Furry(x) ∧ Green(x)) → Rough(x)) ::: All furry, green people are rough.\n∀x ((Round(x) ∧ Green(x)) → Cold(x)) ::: All round, green people are cold.\nConclusion:\nRound(Gary) ::: Gary is round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1330",
    "context": "Bob is red. Bob is young. Charlie is big. Charlie is green. Charlie is red. Charlie is rough. Charlie is young. Dave is big. Harry is rough. Harry is round. Harry is young. All rough, white things are young. All big things are round. All white, red things are rough. All round things are green. All big things are white. If Harry is round then Harry is big. All rough, young things are red. If something is young then it is green. All green things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not rough.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nPremises:\nRed(Bob) ::: Bob is red.\nYoung(Bob) ::: Bob is young.\nBig(Charlie) ::: Charlie is big.\nGreen(Charlie) ::: Charlie is green.\nRed(Charlie) ::: Charlie is red.\nRough(Charlie) ::: Charlie is rough.\nYoung(Charlie) ::: Charlie is young.\nBig(Dave) ::: Dave is big.\nRough(Harry) ::: Harry is rough.\nRound(Harry) ::: Harry is round.\nYoung(Harry) ::: Harry is young.\n∀x ((Rough(x) ∧ White(x)) → Young(x)) ::: All rough, white things are young.\n∀x ((Big(x)) → Round(x)) ::: All big things are round.\n∀x ((White(x) ∧ Red(x)) → Rough(x)) ::: All white, red things are rough.\n∀x ((Round(x)) → Green(x)) ::: All round things are green.\n∀x ((Big(x)) → White(x)) ::: All big things are white.\n∀x ((Round(Harry)) → Big(Harry)) ::: If Harry is round then Harry is big.\n∀x ((Rough(x) ∧ Young(x)) → Red(x)) ::: All rough, young things are red.\n∀x ((Young(x)) → Green(x)) ::: If something is young then it is green.\n∀x ((Green(x)) → Red(x)) ::: All green things are red.\nConclusion:\n¬Rough(Harry) ::: Harry is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-284",
    "context": "Bob is not blue. Bob is nice. Bob is red. Charlie is blue. Charlie is round. Erin is nice. Erin is round. Erin is smart. Gary is blue. Gary is cold. Gary is nice. Gary is smart. Blue, red people are nice. All round, big people are nice. If someone is round then they are big. Big people are round. Nice, round people are smart. Smart, blue people are red. All red, smart people are cold. If someone is nice and not red then they are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nBig(x) ::: x is big.\nPremises:\n¬Blue(Bob) ::: Bob is not blue.\nNice(Bob) ::: Bob is nice.\nRed(Bob) ::: Bob is red.\nBlue(Charlie) ::: Charlie is blue.\nRound(Charlie) ::: Charlie is round.\nNice(Erin) ::: Erin is nice.\nRound(Erin) ::: Erin is round.\nSmart(Erin) ::: Erin is smart.\nBlue(Gary) ::: Gary is blue.\nCold(Gary) ::: Gary is cold.\nNice(Gary) ::: Gary is nice.\nSmart(Gary) ::: Gary is smart.\n∀x ((Blue(x) ∧ Red(x)) → Nice(x)) ::: Blue, red people are nice.\n∀x ((Round(x) ∧ Big(x)) → Nice(x)) ::: All round, big people are nice.\n∀x (Round(x) → Big(x)) ::: If someone is round then they are big.\n∀x (Big(x) → Round(x)) ::: Big people are round.\n∀x ((Nice(x) ∧ ¬Red(x)) → Cold(x)) ::: If someone is nice and not red then they are cold.\n∀x ((Nice(x) ∧ ¬Red(x)) → Cold(x)) ::: If someone is nice and not red then they are cold.\n∀x ((Nice(x) ∧ Round(x)) → Smart(x)) ::: Nice, round people are smart.\n∀x ((Smart(x) ∧ Blue(x)) → Red(x)) ::: Smart, blue people are red.\n∀x ((Red(x) ∧ Smart(x)) → Cold(x)) ::: All red, smart people are cold.\nConclusion:\n¬Cold(Erin) ::: Erin is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1286",
    "context": "Anne is green. Fiona is cold. Fiona is white. Fiona is young. Gary is green. Harry is cold. Harry is rough. All young, cold things are white. If something is cold then it is green. Young things are white. White things are blue. If something is blue then it is red. If something is green then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nCold(x) ::: x is cold.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nBlue(x) ::: x is blue.\nRed(x) ::: x is red.\nPremises:\nGreen(Anne) ::: Anne is green.\nCold(Fiona) ::: Fiona is cold.\nWhite(Fiona) ::: Fiona is white.\nYoung(Fiona) ::: Fiona is young.\nGreen(Gary) ::: Gary is green.\nCold(Harry) ::: Harry is cold.\nRough(Harry) ::: Harry is rough.\n∀x ((Young(x) ∧ Cold(x)) → White(x)) ::: All young, cold things are white.\n∀x (Cold(x) → Green(x)) ::: If something is cold then it is green.\n∀x (Young(x) → White(x)) ::: Young things are white.\n∀x (White(x) → Blue(x)) ::: White things are blue.\n∀x (Blue(x) → Red(x)) ::: If something is blue then it is red.\n∀x (Green(x) → Young(x)) ::: If something is green then it is young.\nConclusion:\nCold(Fiona) ::: Fiona is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-4",
    "context": "The bald eagle is big. The bald eagle is nice. The cat is nice. The cat needs the tiger. The cat visits the bald eagle. The cat visits the rabbit. The rabbit eats the bald eagle. The rabbit eats the cat. The rabbit needs the tiger. The rabbit visits the cat. The rabbit visits the tiger. The tiger eats the cat. The tiger is cold. The tiger is round. If someone eats the cat then they visit the bald eagle. If someone is kind and they eat the cat then the cat needs the tiger. If the cat eats the tiger and the tiger needs the bald eagle then the tiger visits the bald eagle. If the bald eagle needs the rabbit and the rabbit eats the cat then the rabbit needs the bald eagle. If someone needs the tiger and the tiger needs the rabbit then they are kind. If someone visits the bald eagle then they are cold. If the tiger eats the cat then the tiger is big. If someone eats the bald eagle and they are cold then the bald eagle eats the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is not nice.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nRound(x) ::: x is round.\nKind(x) ::: x is kind.\n\nPremises:\nBig(bald eagle) ::: The bald eagle is big.\nNice(bald eagle) ::: The bald eagle is nice.\nNice(cat) ::: The cat is nice.\nNeeds(cat, tiger) ::: The cat needs the tiger.\nVisits(cat, bald eagle) ::: The cat visits the bald eagle.\nVisits(cat, rabbit) ::: The cat visits the rabbit.\nEats(rabbit, bald eagle) ::: The rabbit eats the bald eagle.\nEats(rabbit, cat) ::: The rabbit eats the cat.\nNeeds(rabbit, tiger) ::: The rabbit needs the tiger.\nVisits(rabbit, cat) ::: The rabbit visits the cat.\nVisits(rabbit, tiger) ::: The rabbit visits the tiger.\nEats(tiger, cat) ::: The tiger eats the cat.\nCold(tiger) ::: The tiger is cold.\nRound(tiger) ::: The tiger is round.\n∀x ((Eats(x, cat)) → Visits(x, bald eagle)) ::: If someone eats the cat then they visit the bald eagle.\n∀x ((Kind(x) ∧ Eats(x, cat)) → Needs(cat, tiger)) ::: If someone is kind and they eat the cat then the cat needs the tiger.\n∀x ((Eats(cat, tiger) ∧ Needs(tiger, bald eagle)) → Visits(tiger, bald eagle)) ::: If the cat eats the tiger and the tiger needs the bald eagle then the tiger visits the bald eagle.\n∀x ((Needs(bald eagle, rabbit) ∧ Eats(rabbit, cat)) → Needs(rabbit, bald eagle)) ::: If the bald eagle needs the rabbit and the rabbit eats the cat then the rabbit needs the bald eagle.\n∀x ((Needs(x, tiger) ∧ Needs(tiger, rabbit)) → Kind(x)) ::: If someone needs the tiger and the tiger needs the rabbit then they are kind.\n∀x (Visits(x, bald eagle) → Cold(x)) ::: If someone visits the bald eagle then they are cold.\n∀x ((Eats(tiger, cat)) → Big(tiger)) ::: If the tiger eats the cat then the tiger is big.\n∀x ((Eats(x, bald eagle) ∧ Cold(x)) → Eats(bald eagle, cat)) ::: If someone eats the bald eagle and they are cold then the bald eagle eats the cat.\n\nConclusion:\n¬Nice(bald eagle) ::: The bald eagle is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-327",
    "context": "Anne is cold. Anne is furry. Anne is rough. Anne is smart. Anne is white. Bob is nice. Bob is rough. Erin is cold. Erin is furry. Erin is nice. Erin is rough. Erin is smart. Erin is white. Erin is young. Fiona is cold. Fiona is furry. All smart things are cold. If Bob is young and Bob is cold then Bob is furry. Young things are cold. If Fiona is rough and Fiona is cold then Fiona is smart. Cold, furry things are white. All rough, nice things are young. If something is white and furry then it is smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nPremises:\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nRough(Anne) ::: Anne is rough.\nSmart(Anne) ::: Anne is smart.\nWhite(Anne) ::: Anne is white.\nNice(Bob) ::: Bob is nice.\nRough(Bob) ::: Bob is rough.\nCold(Erin) ::: Erin is cold.\nFurry(Erin) ::: Erin is furry.\nNice(Erin) ::: Erin is nice.\nRough(Erin) ::: Erin is rough.\nSmart(Erin) ::: Erin is smart.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\nCold(Fiona) ::: Fiona is cold.\nFurry(Fiona) ::: Fiona is furry.\n∀x (Smart(x) → Cold(x)) ::: All smart things are cold.\n∀x ((Young(Bob) ∧ Cold(Bob)) → Furry(Bob)) ::: If Bob is young and Bob is cold then Bob is furry.\n∀x (Young(x) → Cold(x)) ::: Young things are cold.\n∀x ((Rough(Fiona) ∧ Cold(Fiona)) → Smart(Fiona)) ::: If Fiona is rough and Fiona is cold then Fiona is smart.\n∀x ((Cold(x) ∧ Furry(x)) → White(x)) ::: Cold, furry things are white.\n∀x ((Rough(x) ∧ Nice(x)) → Young(x)) ::: All rough, nice things are young.\n∀x ((White(x) ∧ Furry(x)) → Smart(x)) ::: If something is white and furry then it is smart.\nConclusion:\n¬Young(Fiona) ::: Fiona is not young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-555",
    "context": "Bob is nice. Bob is rough. Dave is rough. Fiona is cold. Fiona is furry. Gary is red. Gary is young. Red people are nice. Rough people are young. If Bob is nice and Bob is smart then Bob is young. If someone is smart and furry then they are rough. Furry, young people are red. Smart, rough people are young. Nice people are red. If someone is cold then they are smart. If someone is nice then they are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nSmart(x) ::: x is smart.\nPremises:\nNice(Bob) ::: Bob is nice.\nRough(Bob) ::: Bob is rough.\nRough(Dave) ::: Dave is rough.\nCold(Fiona) ::: Fiona is cold.\nFurry(Fiona) ::: Fiona is furry.\nRed(Gary) ::: Gary is red.\nYoung(Gary) ::: Gary is young.\n∀x (Red(x) → Nice(x)) ::: Red people are nice.\n∀x (Rough(x) → Young(x)) ::: Rough people are young.\n∀x ((Nice(Bob) ∧ Smart(Bob)) → Young(Bob)) ::: If Bob is nice and Bob is smart then Bob is young.\n∀x ((Smart(x) ∧ Furry(x)) → Rough(x)) ::: If someone is smart and furry then they are rough.\n∀x ((Furry(x) ∧ Young(x)) → Red(x)) ::: Furry, young people are red.\n∀x ((Smart(x) ∧ Rough(x)) → Young(x)) ::: Smart, rough people are young.\n∀x (Nice(x) → Red(x)) ::: Nice people are red.\n∀x (Cold(x) → Smart(x)) ::: If someone is cold then they are smart.\n∀x (Nice(x) → Young(x)) ::: If someone is nice then they are young.\nConclusion:\nCold(Fiona) ::: Fiona is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-203",
    "context": "Charlie is cold. Charlie is young. Dave is cold. Erin is white. Fiona is nice. Fiona is white. Fiona is young. All blue things are white. If something is nice and blue then it is white. All young, blue things are not green. If something is white then it is nice. If something is nice then it is round. If Charlie is round then Charlie is white. All blue things are young. If something is cold and green then it is young. Round things are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not cold.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nPremises:\nCold(Charlie) ::: Charlie is cold.\nYoung(Charlie) ::: Charlie is young.\nCold(Dave) ::: Dave is cold.\nWhite(Erin) ::: Erin is white.\nNice(Fiona) ::: Fiona is nice.\nWhite(Fiona) ::: Fiona is white.\nYoung(Fiona) ::: Fiona is young.\n∀x (Blue(x) → White(x)) ::: All blue things are white.\n∀x ((Nice(x) ∧ Blue(x)) → White(x)) ::: If something is nice and blue then it is white.\n∀x ((Young(x) ∧ Blue(x)) → ¬Green(x)) ::: All young, blue things are not green.\n∀x (White(x) → Nice(x)) ::: If something is white then it is nice.\n∀x (Nice(x) → Round(x)) ::: If something is nice then it is round.\n∀x ((Round(Charlie)) → White(Charlie)) ::: If Charlie is round then Charlie is white.\n∀x (Blue(x) → Young(x)) ::: All blue things are young.\n∀x ((Cold(x) ∧ Green(x)) → Young(x)) ::: If something is cold and green then it is young.\n∀x (Round(x) → Blue(x)) ::: Round things are blue.\nConclusion:\n¬Cold(Dave) ::: Dave is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-702",
    "context": "Charlie is big. Charlie is cold. Charlie is nice. Charlie is young. Dave is big. Dave is nice. Fiona is big. Fiona is nice. Gary is cold. Gary is nice. All rough, young things are red. All rough, cold things are young. All nice, red things are round. If Charlie is cold and Charlie is rough then Charlie is young. All round, red things are rough. All cold, big things are red. Cold things are big. If Dave is rough then Dave is cold. If Fiona is cold then Fiona is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nPremises:\nBig(Charlie) ::: Charlie is big.\nCold(Charlie) ::: Charlie is cold.\nNice(Charlie) ::: Charlie is nice.\nYoung(Charlie) ::: Charlie is young.\nBig(Dave) ::: Dave is big.\nNice(Dave) ::: Dave is nice.\nBig(Fiona) ::: Fiona is big.\nNice(Fiona) ::: Fiona is nice.\nCold(Gary) ::: Gary is cold.\nNice(Gary) ::: Gary is nice.\n∀x ((Rough(x) ∧ Young(x)) → Red(x)) ::: All rough, young things are red.\n∀x ((Rough(x) ∧ Cold(x)) → Young(x)) ::: All rough, cold things are young.\n∀x ((Nice(x) ∧ Red(x)) → Round(x)) ::: All nice, red things are round.\n∀x ((Cold(Charlie) ∧ Rough(Charlie)) → Young(Charlie)) ::: If Charlie is cold and Charlie is rough then Charlie is young.\n∀x ((Round(x) ∧ Red(x)) → Rough(x)) ::: All round, red things are rough.\n∀x ((Cold(x) ∧ Big(x)) → Red(x)) ::: All cold, big things are red.\n∀x (Cold(x) → Big(x)) ::: Cold things are big.\n∀x (Rough(Dave) → Cold(Dave)) ::: If Dave is rough then Dave is cold.\n∀x (Cold(Fiona) → Red(Fiona)) ::: If Fiona is cold then Fiona is red.\nConclusion:\n¬Young(Fiona) ::: Fiona is not young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1003",
    "context": "Anne is big. Anne is blue. Anne is rough. Bob is cold. Bob is green. Bob is rough. Bob is white. Dave is blue. Dave is white. Harry is young. If Bob is big then Bob is white. Young people are white. Cold, young people are rough. If Anne is green and Anne is young then Anne is white. White, big people are blue. All blue people are green. If someone is young and white then they are big. Blue people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is white.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nBig(Anne) ::: Anne is big.\nBlue(Anne) ::: Anne is blue.\nRough(Anne) ::: Anne is rough.\nCold(Bob) ::: Bob is cold.\nGreen(Bob) ::: Bob is green.\nRough(Bob) ::: Bob is rough.\nWhite(Bob) ::: Bob is white.\nBlue(Dave) ::: Dave is blue.\nWhite(Dave) ::: Dave is white.\nYoung(Harry) ::: Harry is young.\n∀x ((Big(x) → White(x)) ::: If Bob is big then Bob is white.\n∀x (Young(x) → White(x)) ::: Young people are white.\n∀x ((Cold(x) ∧ Young(x)) → Rough(x)) ::: Cold, young people are rough.\n∀x ((Green(x) ∧ Young(x) ∧ Green(x)) → White(x)) ::: If Anne is green and Anne is young then Anne is white.\n∀x ((White(x) ∧ Big(x)) → Blue(x)) ::: White, big people are blue.\n∀x (Blue(x) → Green(x)) ::: All blue people are green.\n∀x ((Young(x) ∧ White(x)) → Big(x)) ::: If someone is young and white then they are big.\n∀x (Blue(x) → Cold(x)) ::: Blue people are cold.\nConclusion:\nWhite(Bob) ::: Bob is white."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-322",
    "context": "The bald eagle chases the mouse. The bald eagle chases the squirrel. The bald eagle needs the cow. The cow is big. The cow is blue. The cow is cold. The mouse eats the bald eagle. The mouse is kind. The squirrel chases the mouse. The squirrel is cold. If someone is big then they need the bald eagle. If someone eats the cow then the cow is green. If someone eats the bald eagle then the bald eagle eats the mouse. If the bald eagle chases the mouse then the bald eagle is kind. If someone is green then they chase the cow. If someone is cold and they need the bald eagle then they eat the cow. If someone chases the cow then the cow needs the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle does not chase the squirrel.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nNeeds(x, y) ::: x needs y.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nEats(x, y) ::: x eats y.\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nPremises:\nChases(BaldEagle, Mouse) ::: The bald eagle chases the mouse.\nChases(BaldEagle, Squirrel) ::: The bald eagle chases the squirrel.\nNeeds(BaldEagle, Cow) ::: The bald eagle needs the cow.\nBig(Cow) ::: The cow is big.\nBlue(Cow) ::: The cow is blue.\nCold(Cow) ::: The cow is cold.\nEats(Mouse, BaldEagle) ::: The mouse eats the bald eagle.\nKind(Mouse) ::: The mouse is kind.\nChases(Squirrel, Mouse) ::: The squirrel chases the mouse.\nCold(Squirrel) ::: The squirrel is cold.\n∀x (Big(x) → Needs(x, BaldEagle)) ::: If someone is big then they need the bald eagle.\n∀x (Eats(x, Cow) → Green(Cow)) ::: If someone eats the cow then the cow is green.\n∀x (Eats(BaldEagle, x) → Eats(BaldEagle, Mouse)) ::: If someone eats the bald eagle then the bald eagle eats the mouse.\n∀x (Chases(BaldEagle, Mouse) → Kind(BaldEagle)) ::: If the bald eagle chases the mouse then the bald eagle is kind.\n∀x (Green(x) → Chases(x, Cow)) ::: If someone is green then they chase the cow.\n∀x ((Cold(x) ∧ Needs(x, BaldEagle)) → Eats(x, Cow)) ::: If someone is cold and they need the bald eagle then they eat the cow.\n∀x (Chases(x, Cow) → Needs(Cow, Mouse)) ::: If someone chases the cow then the cow needs the mouse.\nConclusion:\n¬Chases(BaldEagle, Squirrel) ::: The bald eagle does not chase the squirrel."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-808",
    "context": "Charlie is cold. Charlie is rough. Erin is not big. Erin is blue. Erin is cold. Erin is furry. Erin is red. Erin is rough. Erin is smart. Fiona is big. Fiona is cold. Harry is blue. Harry is red. Harry is smart. If someone is blue then they are rough. Smart people are furry. All big people are blue. All furry people are red. All rough people are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nPremises:\nCold(Charlie) ::: Charlie is cold.\nRough(Charlie) ::: Charlie is rough.\n¬Big(Erin) ::: Erin is not big.\nBlue(Erin) ::: Erin is blue.\nCold(Erin) ::: Erin is cold.\nFurry(Erin) ::: Erin is furry.\nRed(Erin) ::: Erin is red.\nRough(Erin) ::: Erin is rough.\nSmart(Erin) ::: Erin is smart.\nBig(Fiona) ::: Fiona is big.\nCold(Fiona) ::: Fiona is cold.\nBlue(Harry) ::: Harry is blue.\nRed(Harry) ::: Harry is red.\nSmart(Harry) ::: Harry is smart.\n∀x (Blue(x) → Rough(x)) ::: If someone is blue then they are rough.\n∀x (Smart(x) → Furry(x)) ::: Smart people are furry.\n∀x (Big(x) → Blue(x)) ::: All big people are blue.\n∀x (Furry(x) → Red(x)) ::: All furry people are red.\n∀x (Rough(x) → Smart(x)) ::: All rough people are smart.\nConclusion:\n¬Blue(Charlie) ::: Charlie is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1212",
    "context": "Anne is big. Anne is quiet. Dave is furry. Dave is nice. Erin is furry. Erin is green. Fiona is furry. Fiona is green. Fiona is not quiet. Fiona is smart. Quiet, furry things are nice. Smart things are green. If something is quiet then it is white. If something is green then it is furry. All white things are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nGreen(x) ::: x is green.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nPremises:\nBig(Anne) ::: Anne is big.\nQuiet(Anne) ::: Anne is quiet.\nFurry(Dave) ::: Dave is furry.\nNice(Dave) ::: Dave is nice.\nFurry(Erin) ::: Erin is furry.\nGreen(Erin) ::: Erin is green.\nFurry(Fiona) ::: Fiona is furry.\nGreen(Fiona) ::: Fiona is green.\n¬Quiet(Fiona) ::: Fiona is not quiet.\nSmart(Fiona) ::: Fiona is smart.\n∀x ((Quiet(x) ∧ Furry(x)) → Nice(x)) ::: Quiet, furry things are nice.\n∀x (Smart(x) → Green(x)) ::: Smart things are green.\n∀x (Quiet(x) → White(x)) ::: If something is quiet then it is white.\n∀x (Green(x) → Furry(x)) ::: If something is green then it is furry.\n∀x (White(x) → Smart(x)) ::: All white things are smart.\nConclusion:\nFurry(Fiona) ::: Fiona is furry."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-68",
    "context": "The cat chases the rabbit. The cat likes the mouse. The dog is blue. The dog is not cold. The dog likes the cat. The dog likes the mouse. The mouse is cold. The mouse does not like the cat. The rabbit chases the mouse. The rabbit is nice. If someone chases the dog then the dog likes the cat. If someone is nice and they eat the mouse then the mouse chases the dog. If someone likes the mouse then they are blue. If someone eats the cat and they chase the rabbit then the rabbit likes the mouse. If the dog eats the rabbit and the rabbit likes the mouse then the dog likes the mouse. If the cat chases the rabbit then the cat chases the dog. If someone eats the rabbit then they like the rabbit. If someone is blue then they eat the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nLikes(x, y) ::: x likes y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nEats(x, y) ::: x eats y.\nNice(x) ::: x is nice.\nPremises:\nChases(Cat, Rabbit) ::: The cat chases the rabbit.\nLikes(Cat, Mouse) ::: The cat likes the mouse.\nBlue(Dog) ::: The dog is blue.\n¬Cold(Dog) ::: The dog is not cold.\nLikes(Dog, Cat) ::: The dog likes the cat.\nLikes(Dog, Mouse) ::: The dog likes the mouse.\nCold(Mouse) ::: The mouse is cold.\n¬Likes(Mouse, Cat) ::: The mouse does not like the cat.\nChases(Rabbit, Mouse) ::: The rabbit chases the mouse.\nNice(Rabbit) ::: The rabbit is nice.\n∀x (Chases(x, Dog) → Likes(Dog, Cat)) ::: If someone chases the dog then the dog likes the cat.\n∀x ((Nice(x) ∧ Eats(x, Mouse)) → Chases(Mouse, Dog)) ::: If someone is nice and they eat the mouse then the mouse chases the dog.\n∀x (Likes(x, Mouse) → Blue(x)) ::: If someone likes the mouse then they are blue.\n∀x ((Eats(x, Cat) ∧ Chases(x, Rabbit)) → Likes(Rabbit, Mouse)) ::: If someone eats the cat and they chase the rabbit then the rabbit likes the mouse.\n∀x ((Eats(Dog, Rabbit) ∧ Likes(Rabbit, Mouse)) → Likes(Dog, Mouse)) ::: If the dog eats the rabbit and the rabbit likes the mouse then the dog likes the mouse.\n∀x (Chases(Cat, Rabbit) → Chases(Cat, Dog)) ::: If the cat chases the rabbit then the cat chases the dog.\n∀x (Eats(x, Rabbit) → Likes(x, Rabbit)) ::: If someone eats the rabbit then they like the rabbit.\n∀x (Blue(x) → Eats(x, Cat)) ::: If someone is blue then they eat the cat.\nConclusion:\n¬Blue(Dog) ::: The dog is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-884",
    "context": "The cat chases the squirrel. The rabbit is red. The rabbit sees the tiger. The squirrel chases the rabbit. The squirrel does not see the rabbit. The tiger needs the squirrel. The tiger sees the squirrel. If something chases the rabbit then it is big. If something chases the cat then the cat chases the rabbit. If something is big and it chases the rabbit then it chases the cat. All big things are not green. All blue, green things are not cold. If something chases the rabbit then the rabbit does not chase the tiger. If the tiger sees the rabbit then the tiger is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not blue.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nRed(x) ::: x is red.\nSees(x, y) ::: x sees y.\nNeeds(x, y) ::: x needs y.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nPremises:\nChases(Cat, Squirrel) ::: The cat chases the squirrel.\nRed(Rabbit) ::: The rabbit is red.\nSees(Rabbit, Tiger) ::: The rabbit sees the tiger.\nChases(Squirrel, Rabbit) ::: The squirrel chases the rabbit.\n¬Sees(Squirrel, Rabbit) ::: The squirrel does not see the rabbit.\nNeeds(Tiger, Squirrel) ::: The tiger needs the squirrel.\nSees(Tiger, Squirrel) ::: The tiger sees the squirrel.\n∀x (Chases(x, Rabbit) → Big(x)) ::: If something chases the rabbit then it is big.\n∀x (Chases(x, Cat) → Chases(Cat, Rabbit)) ::: If something chases the cat then the cat chases the rabbit.\n∀x ((Big(x) ∧ Chases(x, Rabbit)) → Chases(x, Cat)) ::: If something is big and it chases the rabbit then it chases the cat.\n∀x (Big(x) → ¬Green(x)) ::: All big things are not green.\n∀x ((Blue(x) ∧ Green(x)) → ¬Cold(x)) ::: All blue, green things are not cold.\n∀x (Chases(x, Rabbit) → ¬Chases(Rabbit, Tiger)) ::: If something chases the rabbit then the rabbit does not chase the tiger.\n∀x (Sees(Tiger, Rabbit) → Blue(Tiger)) ::: If the tiger sees the rabbit then the tiger is blue.\nConclusion:\n¬Blue(Tiger) ::: The tiger is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-406",
    "context": "The bald eagle is big. The bald eagle is rough. The bald eagle sees the lion. The cat chases the lion. The cat is red. The cat is rough. The cat sees the bald eagle. The cow does not eat the bald eagle. The cow is not young. The lion eats the cow. The lion is rough. If something sees the bald eagle and the bald eagle chases the cat then it is red. If something is big and rough then it chases the cat. If something chases the cow and the cow chases the cat then it is rough. If something chases the cow then it eats the bald eagle. If something chases the cat then it sees the bald eagle. If something is red then it chases the cow. If something is round and it chases the lion then it does not eat the lion. If the cow chases the lion then the lion does not chase the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle is rough.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nChases(x, y) ::: x chases y.\nRed(x) ::: x is red.\nEats(x, y) ::: x eats y.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nPremises:\nBig(bald eagle) ::: The bald eagle is big.\nRough(bald eagle) ::: The bald eagle is rough.\nSees(bald eagle, lion) ::: The bald eagle sees the lion.\nChases(cat, lion) ::: The cat chases the lion.\nRed(cat) ::: The cat is red.\nRough(cat) ::: The cat is rough.\nSees(cat, bald eagle) ::: The cat sees the bald eagle.\n¬Eats(cow, bald eagle) ::: The cow does not eat the bald eagle.\n¬Young(cow) ::: The cow is not young.\nEats(lion, cow) ::: The lion eats the cow.\nRough(lion) ::: The lion is rough.\n∀x ((Sees(x, bald eagle) ∧ Chases(bald eagle, cat)) → Red(x)) ::: If something sees the bald eagle and the bald eagle chases the cat then it is red.\n∀x ((Big(x) ∧ Rough(x)) → Chases(x, cat)) ::: If something is big and rough then it chases the cat.\n∀x ((Chases(x, cow) ∧ Chases(cow, cat)) → Rough(x)) ::: If something chases the cow and the cow chases the cat then it is rough.\n∀x (Chases(x, cow) → Eats(x, bald eagle)) ::: If something chases the cow then it eats the bald eagle.\n∀x (Chases(x, cat) → Sees(x, bald eagle)) ::: If something chases the cat then it sees the bald eagle.\n∀x (Red(x) → Chases(x, cow)) ::: If something is red then it chases the cow.\n∀x ((Round(x) ∧ Chases(x, lion)) → ¬Eats(x, lion)) ::: If something is round and it chases the lion then it does not eat the lion.\n∀x (Chases(cow, lion) → ¬Chases(lion, bald eagle)) ::: If the cow chases the lion then the lion does not chase the bald eagle.\nConclusion:\nRough(bald eagle) ::: The bald eagle is rough."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-587",
    "context": "The bald eagle chases the squirrel. The bald eagle eats the bear. The bear does not eat the lion. The bear visits the lion. The lion does not eat the bald eagle. The squirrel is red. The squirrel visits the bald eagle. If something is round then it eats the squirrel. If something is blue and green then it chases the bald eagle. If something eats the squirrel then the squirrel is green. If the bald eagle is round then the bald eagle chases the lion. If something is blue then it chases the squirrel. All red things are blue. If something chases the lion then it is blue. Blue, red things are round. If something visits the bald eagle and it is not round then it visits the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not visit the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nEats(x, y) ::: x eats y.\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nBaldEagle(x) ::: x is a bald eagle.\nSquirrel(x) ::: x is a squirrel.\nBear(x) ::: x is a bear.\nLion(x) ::: x is a lion.\nPremises:\nChases(BaldEagle, Squirrel) ::: The bald eagle chases the squirrel.\nEats(BaldEagle, Bear) ::: The bald eagle eats the bear.\n¬Eats(Bear, Lion) ::: The bear does not eat the lion.\nVisits(Bear, Lion) ::: The bear visits the lion.\n¬Eats(Lion, BaldEagle) ::: The lion does not eat the bald eagle.\nRed(Squirrel) ::: The squirrel is red.\nVisits(Squirrel, BaldEagle) ::: The squirrel visits the bald eagle.\n∀x (Round(x) → Eats(x, Squirrel)) ::: If something is round then it eats the squirrel.\n∀x ((Blue(x) ∧ Green(x)) → Chases(x, BaldEagle)) ::: If something is blue and green then it chases the bald eagle.\n∀x (Eats(x, Squirrel) → Green(Squirrel)) ::: If something eats the squirrel then the squirrel is green.\n∀x (Round(BaldEagle) → Chases(BaldEagle, Lion)) ::: If the bald eagle is round then the bald eagle chases the lion.\n∀x (Blue(x) → Chases(x, Squirrel)) ::: If something is blue then it chases the squirrel.\n∀x (Red(x) → Blue(x)) ::: All red things are blue.\n∀x (Chases(x, Lion) → Blue(x)) ::: If something chases the lion then it is blue.\n∀x ((Blue(x) ∧ Red(x)) → Round(x)) ::: Blue, red things are round.\n∀x ((Visits(x, BaldEagle) ∧ ¬Round(x)) → Visits(x, Lion)) ::: If something visits the bald eagle and it is not round then it visits the lion.\nConclusion:\n¬Visits(Squirrel, BaldEagle) ::: The squirrel does not visit the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-754",
    "context": "Anne is big. Anne is furry. Anne is rough. Anne is round. Anne is young. Charlie is big. Charlie is cold. Dave is furry. Dave is young. Harry is furry. Harry is nice. Harry is young. All round things are cold. Cold, furry things are rough. If something is furry and rough then it is round. If Charlie is round and Charlie is furry then Charlie is nice. All round, nice things are rough. Big, cold things are furry. Furry, round things are cold. Nice, round things are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nPremises:\nBig(Anne) ::: Anne is big.\nFurry(Anne) ::: Anne is furry.\nRough(Anne) ::: Anne is rough.\nRound(Anne) ::: Anne is round.\nYoung(Anne) ::: Anne is young.\nBig(Charlie) ::: Charlie is big.\nCold(Charlie) ::: Charlie is cold.\nFurry(Dave) ::: Dave is furry.\nYoung(Dave) ::: Dave is young.\nFurry(Harry) ::: Harry is furry.\nNice(Harry) ::: Harry is nice.\nYoung(Harry) ::: Harry is young.\n∀x ((Round(x) → Cold(x))) ::: All round things are cold.\n∀x ((Cold(x) ∧ Furry(x)) → Rough(x)) ::: Cold, furry things are rough.\n∀x ((Furry(x) ∧ Rough(x)) → Round(x)) ::: If something is furry and rough then it is round.\n∀x ((Round(x) ∧ Furry(x)) → Nice(x)) ::: If Charlie is round and Charlie is furry then Charlie is nice.\n∀x ((Round(x) ∧ Nice(x)) → Rough(x)) ::: All round, nice things are rough.\n∀x ((Big(x) ∧ Cold(x)) → Furry(x)) ::: Big, cold things are furry.\n∀x ((Furry(x) ∧ Round(x)) → Cold(x)) ::: Furry, round things are cold.\n∀x ((Nice(x) ∧ Round(x)) → Young(x)) ::: Nice, round things are young.\nConclusion:\n¬Rough(Harry) ::: Harry is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-746",
    "context": "Bob is white. Charlie is furry. Charlie is kind. Dave is cold. Dave is smart. Gary is red. Gary is white. Green, furry things are smart. If Charlie is white then Charlie is green. White things are kind. Cold, smart things are red. All furry things are cold. If Bob is kind and Bob is furry then Bob is smart. If something is cold and kind then it is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nPremises:\nWhite(Bob) ::: Bob is white.\nFurry(Charlie) ::: Charlie is furry.\nKind(Charlie) ::: Charlie is kind.\nCold(Dave) ::: Dave is cold.\nSmart(Dave) ::: Dave is smart.\nRed(Gary) ::: Gary is red.\nWhite(Gary) ::: Gary is white.\n∀x ((Green(x) ∧ Furry(x)) → Smart(x)) ::: Green, furry things are smart.\n∀x ((White(x) → Green(x)) ::: If Charlie is white then Charlie is green.\n∀x (White(x) → Kind(x)) ::: White things are kind.\n∀x ((Cold(x) ∧ Smart(x)) → Red(x)) ::: Cold, smart things are red.\n∀x (Furry(x) → Cold(x)) ::: All furry things are cold.\n∀x ((Kind(Bob) ∧ Furry(Bob)) → Smart(Bob)) ::: If Bob is kind and Bob is furry then Bob is smart.\n∀x ((Cold(x) ∧ Kind(x)) → White(x)) ::: If something is cold and kind then it is white.\nConclusion:\nCold(Dave) ::: Dave is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-1029",
    "context": "The bear is young. The bear visits the lion. The cat is round. The cat needs the bear. The lion is cold. The lion is not green. The lion is round. The lion does not need the bear. The lion sees the bear. The lion visits the bear. The lion visits the cat. The lion visits the rabbit. The rabbit is green. The rabbit is rough. The rabbit sees the lion. The rabbit visits the cat. If something visits the cat then the cat sees the lion. If something visits the lion and the lion visits the rabbit then it needs the lion. If something needs the lion and the lion is round then it needs the cat. If something is green and it needs the rabbit then the rabbit is green. If something is round then it visits the lion. If something sees the cat and the cat visits the lion then it is not rough. If something needs the cat and it is not green then it sees the cat. If something is young and it visits the bear then it sees the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nVisits(x, y) ::: x visits y.\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nPremises:\nYoung(bear) ::: The bear is young.\nVisits(bear, lion) ::: The bear visits the lion.\nRound(cat) ::: The cat is round.\nNeeds(cat, bear) ::: The cat needs the bear.\nCold(lion) ::: The lion is cold.\n¬Green(lion) ::: The lion is not green.\nRound(lion) ::: The lion is round.\n¬Needs(lion, bear) ::: The lion does not need the bear.\nSees(lion, bear) ::: The lion sees the bear.\nVisits(lion, bear) ::: The lion visits the bear.\nVisits(lion, cat) ::: The lion visits the cat.\nVisits(lion, rabbit) ::: The lion visits the rabbit.\nGreen(rabbit) ::: The rabbit is green.\nRough(rabbit) ::: The rabbit is rough.\nSees(rabbit, lion) ::: The rabbit sees the lion.\nVisits(rabbit, cat) ::: The rabbit visits the cat.\n∀x ((Visits(x, cat)) → Sees(cat, lion)) ::: If something visits the cat then the cat sees the lion.\n∀x ((Visits(x, lion) ∧ Visits(lion, rabbit)) → Needs(x, lion)) ::: If something visits the lion and the lion visits the rabbit then it needs the lion.\n∀x ((Needs(x, lion) ∧ Round(lion)) → Needs(x, cat)) ::: If something needs the lion and the lion is round then it needs the cat.\n∀x ((Green(x) ∧ Needs(x, rabbit)) → Green(rabbit)) ::: If something is green and it needs the rabbit then the rabbit is green.\n∀x (Round(x) → Visits(x, lion)) ::: If something is round then it visits the lion.\n∀x ((Sees(x, cat) ∧ Visits(cat, lion)) → ¬Rough(x)) ::: If something sees the cat and the cat visits the lion then it is not rough.\n∀x ((Needs(x, cat) ∧ ¬Green(x)) → Sees(x, cat)) ::: If something needs the cat and it is not green then it sees the cat.\n∀x ((Young(x) ∧ Visits(x, bear)) → Sees(x, cat)) ::: If something is young and it visits the bear then it sees the cat.\nConclusion:\n¬Round(lion) ::: The lion is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-699",
    "context": "Anne is red. Charlie is cold. Charlie is quiet. Charlie is not round. Charlie is young. Dave is round. Dave is not young. Gary is green. Gary is quiet. Gary is not red. Gary is round. Gary is young. If someone is quiet then they are nice. If someone is round and quiet then they are nice. If Anne is red then Anne is round. Nice, young people are green. Round people are green. Nice, round people are not cold. If someone is green then they are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRed(x) ::: x is red.\nCold(x) ::: x is cold.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nPremises:\nRed(Anne) ::: Anne is red.\nCold(Charlie) ::: Charlie is cold.\nQuiet(Charlie) ::: Charlie is quiet.\n¬Round(Charlie) ::: Charlie is not round.\nYoung(Charlie) ::: Charlie is young.\nRound(Dave) ::: Dave is round.\n¬Young(Dave) ::: Dave is not young.\nGreen(Gary) ::: Gary is green.\nQuiet(Gary) ::: Gary is quiet.\n¬Red(Gary) ::: Gary is not red.\nRound(Gary) ::: Gary is round.\nYoung(Gary) ::: Gary is young.\n∀x (Quiet(x) → Nice(x)) ::: If someone is quiet then they are nice.\n∀x ((Round(x) ∧ Quiet(x)) → Nice(x)) ::: If someone is round and quiet then they are nice.\n∀x ((Red(x) → Round(x)) ::: If Anne is red then Anne is round.\n∀x ((Nice(x) ∧ Young(x)) → Green(x)) ::: Nice, young people are green.\n∀x (Round(x) → Green(x)) ::: Round people are green.\n∀x ((Nice(x) ∧ Round(x)) → ¬Cold(x)) ::: Nice, round people are not cold.\n∀x (Green(x) → Quiet(x)) ::: If someone is green then they are quiet.\nConclusion:\n¬Red(Dave) ::: Dave is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-81",
    "context": "The cat eats the squirrel. The cat sees the squirrel. The cow eats the squirrel. The cow sees the cat. The rabbit is round. The rabbit sees the cat. The squirrel eats the rabbit. The squirrel is cold. The squirrel needs the rabbit. The squirrel sees the cat. If someone sees the cat and they are not green then they see the cow. If the rabbit is kind and the rabbit sees the squirrel then the squirrel needs the rabbit. Rough people are cold. If someone sees the rabbit then they are not round. If someone sees the squirrel and they are not green then they need the squirrel. If someone eats the cow then they see the rabbit. If someone eats the squirrel then they are rough. If someone is cold then they eat the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel eats the rabbit.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nSees(x, y) ::: x sees y.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nCow(x) ::: x is a cow.\nRabbit(x) ::: x is a rabbit.\nCat(x) ::: x is a cat.\nSquirrel(x) ::: x is a squirrel.\nPremises:\nEats(Cat, Squirrel) ::: The cat eats the squirrel.\nSees(Cat, Squirrel) ::: The cat sees the squirrel.\nEats(Cow, Squirrel) ::: The cow eats the squirrel.\nSees(Cow, Cat) ::: The cow sees the cat.\nRound(Rabbit) ::: The rabbit is round.\nSees(Rabbit, Cat) ::: The rabbit sees the cat.\nEats(Squirrel, Rabbit) ::: The squirrel eats the rabbit.\nCold(Squirrel) ::: The squirrel is cold.\nNeeds(Squirrel, Rabbit) ::: The squirrel needs the rabbit.\nSees(Squirrel, Cat) ::: The squirrel sees the cat.\n∀x ((Sees(x, Cat) ∧ ¬Green(x)) → Sees(x, Cow)) ::: If someone sees the cat and they are not green then they see the cow.\n∀x ((Kind(x) ∧ Sees(x, Squirrel)) → Needs(Squirrel, Rabbit)) ::: If the rabbit is kind and the rabbit sees the squirrel then the squirrel needs the rabbit.\n∀x (Rough(x) → Cold(x)) ::: Rough people are cold.\n∀x (Sees(x, Rabbit) → ¬Round(x)) ::: If someone sees the rabbit then they are not round.\n∀x ((Sees(x, Squirrel) ∧ ¬Green(x)) → Needs(Squirrel, x)) ::: If someone sees the squirrel and they are not green then they need the squirrel.\n∀x (Eats(x, Cow) → Sees(x, Rabbit)) ::: If someone eats the cow then they see the rabbit.\n∀x (Eats(x, Squirrel) → Rough(x)) ::: If someone eats the squirrel then they are rough.\n∀x (Cold(x) → Eats(x, Cow)) ::: If someone is cold then they eat the cow.\nConclusion:\nEats(Squirrel, Rabbit) ::: The squirrel eats the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1247",
    "context": "Bob is blue. Bob is furry. Dave is white. Erin is green. Erin is white. Gary is green. Gary is red. If Erin is furry and Erin is blue then Erin is big. Red things are round. If something is blue and big then it is white. Red, furry things are white. If something is round then it is furry. If something is furry and green then it is blue. Blue, white things are furry. If something is green then it is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nPremises:\nBlue(Bob) ::: Bob is blue.\nFurry(Bob) ::: Bob is furry.\nWhite(Dave) ::: Dave is white.\nGreen(Erin) ::: Erin is green.\nWhite(Erin) ::: Erin is white.\nGreen(Gary) ::: Gary is green.\nRed(Gary) ::: Gary is red.\n∀x ((Furry(x) ∧ Blue(x)) → Big(x)) ::: If Erin is furry and Erin is blue then Erin is big.\n∀x (Red(x) → Round(x)) ::: Red things are round.\n∀x ((Blue(x) ∧ Big(x)) → White(x)) ::: If something is blue and big then it is white.\n∀x ((Red(x) ∧ Furry(x)) → White(x)) ::: Red, furry things are white.\n∀x (Round(x) → Furry(x)) ::: If something is round then it is furry.\n∀x ((Furry(x) ∧ Green(x)) → Blue(x)) ::: If something is furry and green then it is blue.\n∀x ((Blue(x) ∧ White(x)) → Furry(x)) ::: Blue, white things are furry.\n∀x (Green(x) → Red(x)) ::: If something is green then it is red.\nConclusion:\n¬White(Dave) ::: Dave is not white."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-70",
    "context": "The bald eagle chases the rabbit. The bald eagle chases the tiger. The lion needs the rabbit. The rabbit does not chase the lion. The rabbit needs the bald eagle. The rabbit needs the lion. The tiger visits the rabbit. If something chases the rabbit then it is big. If something needs the tiger then it is big. If something needs the lion and it visits the rabbit then it chases the lion. If something is big then it chases the lion. If something chases the tiger then the tiger needs the rabbit. If something visits the tiger then the tiger is not green. If something chases the lion then the lion chases the rabbit. If something chases the tiger then it visits the bald eagle. If something chases the rabbit and it does not visit the lion then the lion does not need the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nBaldEagle(x) ::: x is a bald eagle.\nRabbit(x) ::: x is a rabbit.\nTiger(x) ::: x is a tiger.\nLion(x) ::: x is a lion.\nPremises:\nChases(BaldEagle, Rabbit) ::: The bald eagle chases the rabbit.\nChases(BaldEagle, Tiger) ::: The bald eagle chases the tiger.\nNeeds(Lion, Rabbit) ::: The lion needs the rabbit.\n¬Chases(Rabbit, Lion) ::: The rabbit does not chase the lion.\nNeeds(Rabbit, BaldEagle) ::: The rabbit needs the bald eagle.\nNeeds(Rabbit, Lion) ::: The rabbit needs the lion.\nVisits(Tiger, Rabbit) ::: The tiger visits the rabbit.\n∀x (Chases(x, Rabbit) → Big(x)) ::: If something chases the rabbit then it is big.\n∀x (Needs(x, Tiger) → Big(x)) ::: If something needs the tiger then it is big.\n∀x ((Needs(x, Lion) ∧ Visits(x, Rabbit)) → Chases(Lion, x)) ::: If something needs the lion and it visits the rabbit then it chases the lion.\n∀x (Big(x) → Chases(x, Lion)) ::: If something is big then it chases the lion.\n∀x (Chases(x, Tiger) → Needs(Tiger, Rabbit)) ::: If something chases the tiger then the tiger needs the rabbit.\n∀x (Visits(x, Tiger) → ¬Green(Tiger)) ::: If something visits the tiger then the tiger is not green.\n∀x (Chases(x, Lion) → Chases(Lion, Rabbit)) ::: If something chases the lion then the lion chases the rabbit.\n∀x (Chases(x, Tiger) → Visits(BaldEagle, x)) ::: If something chases the tiger then it visits the bald eagle.\n∀x ((Chases(x, Rabbit) ∧ ¬Visits(x, Lion)) → ¬Needs(Lion, Rabbit)) ::: If something chases the rabbit and it does not visit the lion then the lion does not need the rabbit.\nConclusion:\n¬Big(Tiger) ::: The tiger is not big."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-765",
    "context": "Anne is blue. Anne is kind. Anne is quiet. Bob is not kind. Bob is young. Erin is white. Gary is blue. Gary is kind. Gary is nice. Gary is quiet. Gary is rough. Nice people are kind. All white, quiet people are blue. Kind, nice people are quiet. Rough people are nice. If someone is white then they are rough. All blue, nice people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is blue.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nPremises:\nBlue(Anne) ::: Anne is blue.\nKind(Anne) ::: Anne is kind.\nQuiet(Anne) ::: Anne is quiet.\n¬Kind(Bob) ::: Bob is not kind.\nYoung(Bob) ::: Bob is young.\nWhite(Erin) ::: Erin is white.\nBlue(Gary) ::: Gary is blue.\nKind(Gary) ::: Gary is kind.\nNice(Gary) ::: Gary is nice.\nQuiet(Gary) ::: Gary is quiet.\nRough(Gary) ::: Gary is rough.\n∀x (Nice(x) → Kind(x)) ::: Nice people are kind.\n∀x ((White(x) ∧ Quiet(x)) → Blue(x)) ::: All white, quiet people are blue.\n∀x ((Kind(x) ∧ Nice(x)) → Quiet(x)) ::: Kind, nice people are quiet.\n∀x (Rough(x) → Nice(x)) ::: Rough people are nice.\n∀x (White(x) → Rough(x)) ::: If someone is white then they are rough.\n∀x ((Blue(x) ∧ Nice(x)) → Rough(x)) ::: All blue, nice people are rough.\nConclusion:\nBlue(Anne) ::: Anne is blue."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-713",
    "context": "The cat needs the cow. The cow eats the cat. The cow is blue. The mouse eats the rabbit. The mouse is cold. The mouse is young. The mouse needs the cow. The rabbit is cold. The rabbit is young. The rabbit needs the cat. If someone is cold and they see the rabbit then the rabbit is young. If the mouse sees the cat and the cow does not need the mouse then the cat eats the rabbit. If someone eats the cow then they eat the mouse. If someone is nice and young then they see the rabbit. If someone eats the rabbit then they need the cat. If someone sees the rabbit then they are not green. If someone sees the cat and they are cold then they are nice. If someone needs the cat and they are young then they see the cat. If the cow is not young then the cow is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not eat the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nEats(x, y) ::: x eats y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nNice(x) ::: x is nice.\nSee(x, y) ::: x sees y.\nGreen(x) ::: x is green.\nPremises:\nNeeds(cat, cow) ::: The cat needs the cow.\nEats(cow, cat) ::: The cow eats the cat.\nBlue(cow) ::: The cow is blue.\nEats(mouse, rabbit) ::: The mouse eats the rabbit.\nCold(mouse) ::: The mouse is cold.\nYoung(mouse) ::: The mouse is young.\nNeeds(mouse, cow) ::: The mouse needs the cow.\nCold(rabbit) ::: The rabbit is cold.\nYoung(rabbit) ::: The rabbit is young.\nNeeds(rabbit, cat) ::: The rabbit needs the cat.\n∀x ((Cold(x) ∧ See(x, rabbit)) → Young(rabbit)) ::: If someone is cold and they see the rabbit then the rabbit is young.\n∀x ((See(mouse, cat) ∧ ¬Needs(cow, mouse)) → Eats(cat, rabbit)) ::: If the mouse sees the cat and the cow does not need the mouse then the cat eats the rabbit.\n∀x (Eats(x, cow) → Eats(x, mouse)) ::: If someone eats the cow then they eat the mouse.\n∀x ((Nice(x) ∧ Young(x)) → See(x, rabbit)) ::: If someone is nice and young then they see the rabbit.\n∀x (Eats(x, rabbit) → Needs(x, cat)) ::: If someone eats the rabbit then they need the cat.\n∀x (See(x, rabbit) → ¬Green(x)) ::: If someone sees the rabbit then they are not green.\n∀x ((See(x, cat) ∧ Cold(x)) → Nice(x)) ::: If someone sees the cat and they are cold then they are nice.\n∀x ((Needs(x, cat) ∧ Young(x)) → See(x, cat)) ::: If someone needs the cat and they are young then they see the cat.\n¬Young(cow) → Green(cow) ::: If the cow is not young then the cow is green.\nConclusion:\n¬Eats(mouse, rabbit) ::: The mouse does not eat the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-745",
    "context": "The dog is green. The dog is not kind. The lion is big. The lion is round. The lion needs the dog. The mouse is big. The mouse likes the dog. The mouse does not need the rabbit. The mouse visits the dog. The rabbit is kind. The rabbit visits the dog. If someone needs the dog then they visit the lion. If someone needs the mouse then they are kind. If someone is round and they like the rabbit then the rabbit visits the mouse. If someone visits the rabbit then the rabbit visits the mouse. If someone likes the dog then the dog visits the rabbit. If the mouse visits the lion and the mouse needs the dog then the dog needs the lion. If the rabbit needs the lion then the lion needs the mouse. If someone visits the mouse then the mouse needs the dog.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit does not visit the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nPremises:\nGreen(dog) ::: The dog is green.\n¬Kind(dog) ::: The dog is not kind.\nBig(lion) ::: The lion is big.\nRound(lion) ::: The lion is round.\nNeeds(lion, dog) ::: The lion needs the dog.\nBig(mouse) ::: The mouse is big.\nLikes(mouse, dog) ::: The mouse likes the dog.\n¬Needs(mouse, rabbit) ::: The mouse does not need the rabbit.\nVisits(mouse, dog) ::: The mouse visits the dog.\nKind(rabbit) ::: The rabbit is kind.\nVisits(rabbit, dog) ::: The rabbit visits the dog.\n∀x ((Needs(x, dog)) → (Visits(x, lion))) ::: If someone needs the dog then they visit the lion.\n∀x ((Needs(x, mouse)) → Kind(x)) ::: If someone needs the mouse then they are kind.\n∀x ((Round(x) ∧ Likes(x, rabbit)) → (Visits(rabbit, mouse))) ::: If someone is round and they like the rabbit then the rabbit visits the mouse.\n∀x (Visits(rabbit, x) → (Visits(rabbit, mouse))) ::: If someone visits the rabbit then the rabbit visits the mouse.\n∀x (Likes(x, dog) → (Visits(dog, rabbit))) ::: If someone likes the dog then the dog visits the rabbit.\n∀x ((Visits(mouse, lion) ∧ Needs(mouse, dog)) → Needs(dog, lion)) ::: If the mouse visits the lion and the mouse needs the dog then the dog needs the lion.\n∀x (Needs(rabbit, lion) → Needs(lion, mouse)) ::: If the rabbit needs the lion then the lion needs the mouse.\n∀x (Visits(x, mouse) → Needs(mouse, dog)) ::: If someone visits the mouse then the mouse needs the dog.\nConclusion:\n¬Visits(rabbit, lion) ::: The rabbit does not visit the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-417",
    "context": "Anne is quiet. Bob is big. Bob is nice. Erin is kind. Erin is young. Harry is quiet. Harry is rough. If Harry is young and Harry is kind then Harry is big. If someone is young and not quiet then they are not nice. If someone is rough and quiet then they are nice. Nice people are cold. Kind, big people are young. If someone is kind then they are young. If someone is rough and cold then they are kind. If Anne is young then Anne is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nPremises:\nQuiet(Anne) ::: Anne is quiet.\nBig(Bob) ::: Bob is big.\nNice(Bob) ::: Bob is nice.\nKind(Erin) ::: Erin is kind.\nYoung(Erin) ::: Erin is young.\nQuiet(Harry) ::: Harry is quiet.\nRough(Harry) ::: Harry is rough.\n∀x ((Young(x) ∧ Kind(x)) → Big(x)) ::: If Harry is young and Harry is kind then Harry is big.\n∀x ((Young(x) ∧ ¬Quiet(x)) → ¬Nice(x)) ::: If someone is young and not quiet then they are not nice.\n∀x ((Rough(x) ∧ Quiet(x)) → Nice(x)) ::: If someone is rough and quiet then they are nice.\n∀x (Nice(x) → Cold(x)) ::: Nice people are cold.\n∀x ((Kind(x) ∧ Big(x)) → Young(x)) ::: Kind, big people are young.\n∀x (Kind(x) → Young(x)) ::: If someone is kind then they are young.\n∀x ((Rough(x) ∧ Cold(x)) → Kind(x)) ::: If someone is rough and cold then they are kind.\n∀x ((Young(x)) → Nice(x)) ::: If Anne is young then Anne is nice.\nConclusion:\nQuiet(Harry) ::: Harry is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-183",
    "context": "The bald eagle does not eat the lion. The bald eagle does not eat the squirrel. The bald eagle is rough. The lion eats the bald eagle. The lion eats the squirrel. The lion likes the mouse. The lion needs the squirrel. The mouse likes the squirrel. The mouse needs the lion. The squirrel eats the lion. The squirrel is rough. If someone is nice then they like the mouse. If the squirrel needs the lion and the squirrel is nice then the squirrel does not eat the mouse. If the squirrel likes the mouse then the squirrel needs the bald eagle. If someone likes the mouse and the mouse needs the squirrel then the mouse does not like the bald eagle. If the squirrel eats the lion then the squirrel is nice. If the squirrel does not need the bald eagle then the squirrel is round. If someone needs the bald eagle then they are round. If someone eats the mouse and the mouse is nice then the mouse does not need the bald eagle. If someone is round and rough then they eat the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle eats the lion.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nPremises:\n¬Eats(bald eagle, lion) ::: The bald eagle does not eat the lion.\n¬Eats(bald eagle, squirrel) ::: The bald eagle does not eat the squirrel.\nRough(bald eagle) ::: The bald eagle is rough.\nEats(lion, bald eagle) ::: The lion eats the bald eagle.\nEats(lion, squirrel) ::: The lion eats the squirrel.\nLikes(lion, mouse) ::: The lion likes the mouse.\nNeeds(lion, squirrel) ::: The lion needs the squirrel.\nLikes(mouse, squirrel) ::: The mouse likes the squirrel.\nNeeds(mouse, lion) ::: The mouse needs the lion.\nEats(squirrel, lion) ::: The squirrel eats the lion.\nRough(squirrel) ::: The squirrel is rough.\n∀x (Nice(x) → Likes(x, mouse)) ::: If someone is nice then they like the mouse.\n∀x ((Needs(squirrel, lion) ∧ Nice(squirrel)) → ¬Eats(squirrel, mouse)) ::: If the squirrel needs the lion and the squirrel is nice then the squirrel does not eat the mouse.\n∀x (Likes(squirrel, mouse) → Needs(squirrel, bald eagle)) ::: If the squirrel likes the mouse then the squirrel needs the bald eagle.\n∀x ((Likes(x, mouse) ∧ Needs(mouse, squirrel)) → ¬Likes(x, bald eagle)) ::: If someone likes the mouse and the mouse needs the squirrel then the mouse does not like the bald eagle.\n∀x (Eats(squirrel, lion) → Nice(squirrel)) ::: If the squirrel eats the lion then the squirrel is nice.\n∀x (¬Needs(squirrel, bald eagle) → Round(squirrel)) ::: If the squirrel does not need the bald eagle then the squirrel is round.\n∀x (Needs(x, bald eagle) → Round(x)) ::: If someone needs the bald eagle then they are round.\n∀x ((Eats(x, mouse) ∧ Nice(mouse)) → ¬Needs(x, bald eagle)) ::: If someone eats the mouse and the mouse is nice then the mouse does not need the bald eagle.\n∀x ((Round(x) ∧ Rough(x)) → Eats(x, mouse)) ::: If someone is round and rough then they eat the mouse.\nConclusion:\nEats(bald eagle, lion) ::: The bald eagle eats the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1169",
    "context": "Anne is green. Anne is rough. Anne is young. Dave is cold. Dave is nice. Dave is rough. Fiona is kind. Harry is green. Harry is kind. Harry is quiet. Harry is young. Kind, quiet things are green. If Dave is kind then Dave is quiet. All kind things are young. All rough, kind things are quiet. If Anne is cold and Anne is kind then Anne is green. If something is young then it is rough. If something is green and quiet then it is cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nPremises:\nGreen(Anne) ::: Anne is green.\nRough(Anne) ::: Anne is rough.\nYoung(Anne) ::: Anne is young.\nCold(Dave) ::: Dave is cold.\nNice(Dave) ::: Dave is nice.\nRough(Dave) ::: Dave is rough.\nKind(Fiona) ::: Fiona is kind.\nGreen(Harry) ::: Harry is green.\nKind(Harry) ::: Harry is kind.\nQuiet(Harry) ::: Harry is quiet.\nYoung(Harry) ::: Harry is young.\n∀x ((Kind(x) ∧ Quiet(x)) → Green(x)) ::: Kind, quiet things are green.\n∀x ((Kind(x) → Quiet(x))) ::: If Dave is kind then Dave is quiet.\n∀x (Kind(x) → Young(x)) ::: All kind things are young.\n∀x ((Rough(x) ∧ Kind(x)) → Quiet(x)) ::: All rough, kind things are quiet.\n∀x ((Cold(Anne) ∧ Kind(Anne)) → Green(Anne)) ::: If Anne is cold and Anne is kind then Anne is green.\n∀x (Young(x) → Rough(x)) ::: If something is young then it is rough.\n∀x ((Green(x) ∧ Quiet(x)) → Cold(x)) ::: If something is green and quiet then it is cold.\nConclusion:\n¬Young(Dave) ::: Dave is not young."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-172",
    "context": "The cat needs the cow. The cat visits the dog. The cat visits the lion. The cow eats the cat. The cow eats the dog. The cow is green. The dog eats the cow. The dog is green. The dog is nice. The dog visits the cat. The lion eats the dog. All green people are round. If someone needs the lion then the lion needs the cat. If someone is round then they are kind. If someone is round then they need the dog. If someone eats the dog then the dog eats the cow. If someone needs the cat then they visit the cow. If someone visits the cat and they are kind then the cat eats the dog. If someone needs the dog then the dog visits the lion. If someone is green and they visit the lion then they need the cat.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat visits the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nEats(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nKind(x) ::: x is kind.\nPremises:\nNeeds(cat, cow) ::: The cat needs the cow.\nVisits(cat, dog) ::: The cat visits the dog.\nVisits(cat, lion) ::: The cat visits the lion.\nEats(cow, cat) ::: The cow eats the cat.\nEats(cow, dog) ::: The cow eats the dog.\nGreen(cow) ::: The cow is green.\nEats(dog, cow) ::: The dog eats the cow.\nGreen(dog) ::: The dog is green.\nNice(dog) ::: The dog is nice.\nVisits(dog, cat) ::: The dog visits the cat.\nEats(lion, dog) ::: The lion eats the dog.\n∀x (Green(x) → Round(x)) ::: All green people are round.\n∀x (Needs(lion, x) → Needs(lion, cat)) ::: If someone needs the lion then the lion needs the cat.\n∀x (Round(x) → Kind(x)) ::: If someone is round then they are kind.\n∀x (Round(x) → Needs(x, dog)) ::: If someone is round then they need the dog.\n∀x (Eats(x, dog) → Eats(dog, cow)) ::: If someone eats the dog then the dog eats the cow.\n∀x (Needs(cat, x) → Visits(cat, cow)) ::: If someone needs the cat then they visit the cow.\n∀x ((Visits(cat, x) ∧ Kind(x)) → Eats(cat, dog)) ::: If someone visits the cat and they are kind then the cat eats the dog.\n∀x (Needs(dog, x) → Visits(dog, lion)) ::: If someone needs the dog then the dog visits the lion.\n∀x ((Green(x) ∧ Visits(x, lion)) → Needs(x, cat)) ::: If someone is green and they visit the lion then they need the cat.\nConclusion:\nVisits(cat, lion) ::: The cat visits the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-199",
    "context": "The dog is blue. The dog sees the mouse. The mouse is not round. The mouse sees the dog. The rabbit is cold. The rabbit is red. The rabbit sees the mouse. The squirrel is green. The squirrel needs the mouse. The squirrel sees the dog. The squirrel does not visit the dog. If something sees the dog then it sees the squirrel. If something is red and blue then it sees the squirrel. If something needs the squirrel and it is green then it visits the rabbit. If something needs the rabbit and the rabbit is blue then the rabbit does not need the dog. If the mouse needs the rabbit and the rabbit is cold then the mouse is green. If something sees the squirrel then it needs the rabbit. If something sees the rabbit then it needs the mouse. If something is blue then it needs the dog. If something is green and it sees the dog then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse is round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nSees(x, y) ::: x sees y.\nRound(x) ::: x is round.\nRed(x) ::: x is red.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\n∀x (Dog(x) → Blue(x)) ::: The dog is blue.\n∀x (Dog(x) → Sees(x, Mouse)) ::: The dog sees the mouse.\n¬Round(Mouse) ::: The mouse is not round.\n∀x (Mouse(x) → Sees(x, Dog)) ::: The mouse sees the dog.\n∀x (Rabbit(x) → Cold(x)) ::: The rabbit is cold.\n∀x (Rabbit(x) → Red(x)) ::: The rabbit is red.\n∀x (Rabbit(x) → Sees(x, Mouse)) ::: The rabbit sees the mouse.\n∀x (Squirrel(x) → Green(x)) ::: The squirrel is green.\n∀x (Squirrel(x) → Needs(x, Mouse)) ::: The squirrel needs the mouse.\n∀x (Squirrel(x) → Sees(x, Dog)) ::: The squirrel sees the dog.\n∀x (Squirrel(x) → ¬Visits(x, Dog)) ::: The squirrel does not visit the dog.\n∀x ((Sees(x, Dog)) → Sees(x, Squirrel)) ::: If something sees the dog then it sees the squirrel.\n∀x ((Red(x) ∧ Blue(x)) → Sees(x, Squirrel)) ::: If something is red and blue then it sees the squirrel.\n∀x ((Needs(x, Squirrel) ∧ Green(x)) → Visits(x, Rabbit)) ::: If something needs the squirrel and it is green then it visits the rabbit.\n∀x ((Needs(x, Rabbit) ∧ Blue(Rabbit)) → ¬Needs(x, Dog)) ::: If something needs the rabbit and the rabbit is blue then the rabbit does not need the dog.\n∀x ((Needs(Mouse, Rabbit) ∧ Cold(Rabbit)) → Green(Mouse)) ::: If the mouse needs the rabbit and the rabbit is cold then the mouse is green.\n∀x (Sees(x, Squirrel) → Needs(x, Rabbit)) ::: If something sees the squirrel then it needs the rabbit.\n∀x (Sees(x, Rabbit) → Needs(x, Mouse)) ::: If something sees the rabbit then it needs the mouse.\n∀x (Blue(x) → Needs(x, Dog)) ::: If something is blue then it needs the dog.\n∀x ((Green(x) ∧ Sees(x, Dog)) → Blue(x)) ::: If something is green and it sees the dog then it is blue.\nConclusion:\n¬Round(Mouse) ::: The mouse is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-121",
    "context": "The bald eagle needs the cow. The bald eagle needs the tiger. The bald eagle sees the cow. The cow is big. The cow needs the bald eagle. The cow needs the tiger. The mouse eats the cow. The mouse is blue. The mouse is cold. The mouse needs the bald eagle. The mouse sees the cow. The mouse sees the tiger. The tiger eats the cow. The tiger needs the bald eagle. The tiger needs the cow. The tiger needs the mouse. If someone needs the tiger then they are red. If the mouse needs the bald eagle and the bald eagle needs the cow then the mouse needs the cow. If the cow needs the mouse and the mouse sees the cow then the mouse is big. If someone eats the mouse then they see the cow. If someone sees the mouse and they see the bald eagle then the bald eagle needs the tiger. If someone is big then they see the bald eagle. If someone is big and they see the bald eagle then they need the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not see the bald eagle.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nBig(x) ::: x is big.\nEats(x, y) ::: x eats y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nPremises:\nNeeds(bald eagle, cow) ::: The bald eagle needs the cow.\nNeeds(bald eagle, tiger) ::: The bald eagle needs the tiger.\nSees(bald eagle, cow) ::: The bald eagle sees the cow.\nBig(cow) ::: The cow is big.\nNeeds(cow, bald eagle) ::: The cow needs the bald eagle.\nNeeds(cow, tiger) ::: The cow needs the tiger.\nEats(mouse, cow) ::: The mouse eats the cow.\nBlue(mouse) ::: The mouse is blue.\nCold(mouse) ::: The mouse is cold.\nNeeds(mouse, bald eagle) ::: The mouse needs the bald eagle.\nSees(mouse, cow) ::: The mouse sees the cow.\nSees(mouse, tiger) ::: The mouse sees the tiger.\nEats(tiger, cow) ::: The tiger eats the cow.\nNeeds(tiger, bald eagle) ::: The tiger needs the bald eagle.\nNeeds(tiger, cow) ::: The tiger needs the cow.\nNeeds(tiger, mouse) ::: The tiger needs the mouse.\n∀x (Needs(x, tiger) → Red(x)) ::: If someone needs the tiger then they are red.\n∀x ((Needs(mouse, bald eagle) ∧ Needs(bald eagle, cow)) → Needs(mouse, cow)) ::: If the mouse needs the bald eagle and the bald eagle needs the cow then the mouse needs the cow.\n∀x ((Needs(cow, mouse) ∧ Sees(mouse, cow)) → Big(mouse)) ::: If the cow needs the mouse and the mouse sees the cow then the mouse is big.\n∀x (Eats(x, mouse) → Sees(x, cow)) ::: If someone eats the mouse then they see the cow.\n∀x ((Sees(x, mouse) ∧ Sees(x, bald eagle)) → Needs(bald eagle, tiger)) ::: If someone sees the mouse and they see the bald eagle then the bald eagle needs the tiger.\n∀x (Big(x) → Sees(bald eagle, x)) ::: If someone is big then they see the bald eagle.\n∀x ((Big(x) ∧ Sees(bald eagle, x)) → Needs(x, mouse)) ::: If someone is big and they see the bald eagle then they need the mouse.\nConclusion:\n¬Sees(tiger, bald eagle) ::: The tiger does not see the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-111",
    "context": "The bald eagle chases the mouse. The bald eagle chases the squirrel. The bald eagle is cold. The lion chases the bald eagle. The lion does not chase the mouse. The lion chases the squirrel. The lion is blue. The lion needs the squirrel. The lion visits the squirrel. The mouse does not visit the bald eagle. The mouse does not visit the squirrel. The squirrel is cold. The squirrel is red. The squirrel does not visit the lion. If something visits the mouse then the mouse is green. If the mouse does not chase the lion then the mouse needs the lion. If something visits the squirrel and the squirrel does not chase the lion then the lion is green. If something is young then it visits the bald eagle. If something visits the bald eagle then the bald eagle visits the squirrel. If something visits the squirrel and the squirrel is red then it is young. If something needs the squirrel and it is not cold then the squirrel chases the bald eagle.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nBlue(x) ::: x is blue.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nPremises:\nChases(BaldEagle, Mouse) ::: The bald eagle chases the mouse.\nChases(BaldEagle, Squirrel) ::: The bald eagle chases the squirrel.\nCold(BaldEagle) ::: The bald eagle is cold.\nChases(Lion, BaldEagle) ::: The lion chases the bald eagle.\n¬Chases(Lion, Mouse) ::: The lion does not chase the mouse.\nChases(Lion, Squirrel) ::: The lion chases the squirrel.\nBlue(Lion) ::: The lion is blue.\nNeeds(Lion, Squirrel) ::: The lion needs the squirrel.\nVisits(Lion, Squirrel) ::: The lion visits the squirrel.\n¬Visits(Mouse, BaldEagle) ::: The mouse does not visit the bald eagle.\n¬Visits(Mouse, Squirrel) ::: The mouse does not visit the squirrel.\nCold(Squirrel) ::: The squirrel is cold.\nRed(Squirrel) ::: The squirrel is red.\n¬Visits(Squirrel, Lion) ::: The squirrel does not visit the lion.\n∀x ((Visits(x, Mouse)) → Green(Mouse)) ::: If something visits the mouse then the mouse is green.\n∀x (¬Chases(Mouse, Lion) → Needs(Mouse, Lion)) ::: If the mouse does not chase the lion then the mouse needs the lion.\n∀x ((Visits(x, Squirrel) ∧ ¬Chases(Squirrel, Lion)) → Green(Lion)) ::: If something visits the squirrel and the squirrel does not chase the lion then the lion is green.\n∀x (Young(x) → Visits(x, BaldEagle)) ::: If something is young then it visits the bald eagle.\n∀x ((Visits(x, BaldEagle)) → Visits(BaldEagle, Squirrel)) ::: If something visits the bald eagle then the bald eagle visits the squirrel.\n∀x ((Visits(x, Squirrel) ∧ Red(Squirrel)) → Young(x)) ::: If something visits the squirrel and the squirrel is red then it is young.\n∀x ((Needs(x, Squirrel) ∧ ¬Cold(x)) → Chases(Squirrel, BaldEagle)) ::: If something needs the squirrel and it is not cold then the squirrel chases the bald eagle.\nConclusion:\nCold(Squirrel) ::: The squirrel is cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-523",
    "context": "Anne is green. Anne is young. Charlie is blue. Charlie is green. Charlie is white. Dave is white. Erin is white. If Dave is kind and Dave is white then Dave is blue. If someone is white then they are nice. If someone is white then they are nice. All nice, green people are young. If someone is green then they are quiet. Nice people are kind. If Dave is blue then Dave is white. If Anne is nice and Anne is not white then Anne is green. If Dave is white and Dave is blue then Dave is green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nWhite(x) ::: x is white.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nPremises:\nGreen(Anne) ::: Anne is green.\nYoung(Anne) ::: Anne is young.\nBlue(Charlie) ::: Charlie is blue.\nGreen(Charlie) ::: Charlie is green.\nWhite(Charlie) ::: Charlie is white.\nWhite(Dave) ::: Dave is white.\nWhite(Erin) ::: Erin is white.\n∀x ((Kind(x) ∧ White(x)) → Blue(x)) ::: If Dave is kind and Dave is white then Dave is blue.\n∀x (White(x) → Nice(x)) ::: If someone is white then they are nice.\n∀x (Nice(x) → Kind(x)) ::: Nice people are kind.\n∀x ((Blue(x) → White(x)) ::: If Dave is blue then Dave is white.\n∀x ((Nice(x) ∧ ¬White(x)) → Green(x)) ::: If Anne is nice and Anne is not white then Anne is green.\n∀x ((White(x) ∧ Blue(x)) → Green(x)) ::: If Dave is white and Dave is blue then Dave is green.\n∀x ((Green(x) → Quiet(x)) ::: If someone is green then they are quiet.\n∀x ((Nice(x) ∧ Green(x)) → Young(x)) ::: All nice, green people are young.\nConclusion:\n¬Blue(Charlie) ::: Charlie is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-836",
    "context": "Anne is young. Bob is red. Bob is rough. Erin is green. Erin is kind. Gary is kind. Gary is round. If Anne is red and Anne is young then Anne is quiet. Round things are kind. If something is green and red then it is rough. If something is round then it is quiet. If something is young then it is round. Kind, red things are young. All red, round things are young. If something is round and quiet then it is green. All red, rough things are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not rough.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nQuiet(x) ::: x is quiet.\nPremises:\nYoung(Anne) ::: Anne is young.\nRed(Bob) ::: Bob is red.\nRough(Bob) ::: Bob is rough.\nGreen(Erin) ::: Erin is green.\nKind(Erin) ::: Erin is kind.\nKind(Gary) ::: Gary is kind.\nRound(Gary) ::: Gary is round.\n∀x ((Red(x) ∧ Young(x)) → Quiet(x)) ::: If Anne is red and Anne is young then Anne is quiet.\n∀x ((Round(x)) → Kind(x)) ::: Round things are kind.\n∀x ((Green(x) ∧ Red(x)) → Rough(x)) ::: If something is green and red then it is rough.\n∀x ((Round(x)) → Quiet(x)) ::: If something is round then it is quiet.\n∀x ((Young(x)) → Round(x)) ::: If something is young then it is round.\n∀x ((Kind(x) ∧ Red(x)) → Young(x)) ::: Kind, red things are young.\n∀x ((Red(x) ∧ Round(x)) → Young(x)) ::: All red, round things are young.\n∀x ((Round(x) ∧ Quiet(x)) → Green(x)) ::: If something is round and quiet then it is green.\n∀x ((Red(x) ∧ Rough(x)) → Kind(x)) ::: All red, rough things are kind.\nConclusion:\n¬Rough(Anne) ::: Anne is not rough."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-856",
    "context": "The bald eagle needs the lion. The bald eagle visits the lion. The lion is not cold. The lion does not like the tiger. The lion visits the tiger. The squirrel is kind. The squirrel is young. The squirrel likes the tiger. The squirrel does not need the lion. The squirrel visits the bald eagle. The tiger is cold. The tiger visits the bald eagle. If something visits the bald eagle then it is big. If something is big then it needs the squirrel. If something visits the squirrel and it visits the lion then it needs the squirrel. If something needs the squirrel then it is green. If something is young then it needs the tiger. Green things are young. If something is big and it visits the lion then the lion needs the squirrel. If the squirrel is big and the squirrel does not like the tiger then the tiger is not big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not need the lion.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nCold(x) ::: x is cold.\nLikes(x, y) ::: x likes y.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nPremises:\nNeeds(BaldEagle, Lion) ::: The bald eagle needs the lion.\nVisits(BaldEagle, Lion) ::: The bald eagle visits the lion.\n¬Cold(Lion) ::: The lion is not cold.\n¬Likes(Lion, Tiger) ::: The lion does not like the tiger.\nVisits(Lion, Tiger) ::: The lion visits the tiger.\nKind(Squirrel) ::: The squirrel is kind.\nYoung(Squirrel) ::: The squirrel is young.\nLikes(Squirrel, Tiger) ::: The squirrel likes the tiger.\n¬Needs(Squirrel, Lion) ::: The squirrel does not need the lion.\nVisits(Squirrel, BaldEagle) ::: The squirrel visits the bald eagle.\nCold(Tiger) ::: The tiger is cold.\nVisits(Tiger, BaldEagle) ::: The tiger visits the bald eagle.\n∀x (Visits(x, BaldEagle) → Big(x)) ::: If something visits the bald eagle then it is big.\n∀x (Big(x) → Needs(x, Squirrel)) ::: If something is big then it needs the squirrel.\n∀x ((Visits(x, Squirrel) ∧ Visits(x, Lion)) → Needs(x, Squirrel)) ::: If something visits the squirrel and it visits the lion then it needs the squirrel.\n∀x (Needs(x, Squirrel) → Green(x)) ::: If something needs the squirrel then it is green.\n∀x (Young(x) → Needs(x, Tiger)) ::: If something is young then it needs the tiger.\n∀x (Green(x) → Young(x)) ::: Green things are young.\n∀x ((Big(x) ∧ Visits(x, Lion)) → Needs(Lion, Squirrel)) ::: If something is big and it visits the lion then the lion needs the squirrel.\n∀x ((Big(Squirrel) ∧ ¬Likes(Squirrel, Tiger)) → ¬Big(Tiger)) ::: If the squirrel is big and the squirrel does not like the tiger then the tiger is not big.\nConclusion:\n¬Needs(Squirrel, Lion) ::: The squirrel does not need the lion."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-975",
    "context": "The lion is kind. The mouse chases the lion. The rabbit is blue. The rabbit is round. The tiger is blue. The tiger is cold. The tiger is young. If something sees the rabbit then the rabbit is cold. If something sees the tiger then the tiger is kind. If something is round then it is kind. If the rabbit sees the lion and the rabbit sees the mouse then the mouse sees the tiger. If something is kind then it sees the mouse. If something is blue and kind then it sees the rabbit. If something chases the lion and the lion chases the rabbit then the rabbit chases the mouse. If something is kind and it sees the mouse then it sees the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nChases(x, y) ::: x chases y.\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nSees(x, y) ::: x sees y.\n\nPremises:\nKind(lion) ::: The lion is kind.\nChases(mouse, lion) ::: The mouse chases the lion.\nBlue(rabbit) ::: The rabbit is blue.\nRound(rabbit) ::: The rabbit is round.\nBlue(tiger) ::: The tiger is blue.\nCold(tiger) ::: The tiger is cold.\nYoung(tiger) ::: The tiger is young.\n∀x ((Sees(x, rabbit)) → Cold(rabbit)) ::: If something sees the rabbit then the rabbit is cold.\n∀x ((Sees(x, tiger)) → Kind(tiger)) ::: If something sees the tiger then the tiger is kind.\n∀x (Round(x) → Kind(x)) ::: If something is round then it is kind.\n∀x ((Sees(rabbit, lion) ∧ Sees(rabbit, mouse)) → Sees(mouse, tiger)) ::: If the rabbit sees the lion and the rabbit sees the mouse then the mouse sees the tiger.\n∀x ((Kind(x)) → Sees(x, mouse)) ::: If something is kind then it sees the mouse.\n∀x ((Blue(x) ∧ Kind(x)) → Sees(x, rabbit)) ::: If something is blue and kind then it sees the rabbit.\n∀x ((Chases(x, lion) ∧ Chases(lion, rabbit)) → Chases(rabbit, mouse)) ::: If something chases the lion and the lion chases the rabbit then the rabbit chases the mouse.\n∀x ((Kind(x) ∧ Sees(x, mouse)) → Sees(x, lion)) ::: If something is kind and it sees the mouse then it sees the lion.\n\nConclusion:\n¬Kind(lion) ::: The lion is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-365",
    "context": "The cat likes the squirrel. The mouse visits the squirrel. The mouse visits the tiger. The squirrel likes the tiger. The squirrel needs the tiger. The squirrel visits the tiger. The tiger needs the cat. If something is red and it visits the squirrel then the squirrel is big. If something is red then it needs the squirrel. If the mouse needs the cat then the mouse is blue. If something is cold and it visits the tiger then it needs the mouse. If something needs the tiger and it visits the tiger then the tiger likes the mouse. If something needs the squirrel then the squirrel needs the cat. If something likes the mouse then it needs the cat. If something needs the cat then it is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not need the mouse.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nNeeds(x, y) ::: x needs y.\nRed(x) ::: x is red.\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nConclusion:\n¬Needs(Squirrel, Mouse) ::: The squirrel does not need the mouse.\nPremises:\nLikes(Cat, Squirrel) ::: The cat likes the squirrel.\nVisits(Mouse, Squirrel) ::: The mouse visits the squirrel.\nVisits(Mouse, Tiger) ::: The mouse visits the tiger.\nLikes(Squirrel, Tiger) ::: The squirrel likes the tiger.\nNeeds(Squirrel, Tiger) ::: The squirrel needs the tiger.\nVisits(Squirrel, Tiger) ::: The squirrel visits the tiger.\nNeeds(Tiger, Cat) ::: The tiger needs the cat.\n∀x ((Red(x) ∧ Visits(x, Squirrel)) → Big(Squirrel)) ::: If something is red and it visits the squirrel then the squirrel is big.\n∀x (Red(x) → Needs(x, Squirrel)) ::: If something is red then it needs the squirrel.\n∀x (Needs(Mouse, Cat) → Blue(Mouse)) ::: If the mouse needs the cat then the mouse is blue.\n∀x ((Cold(x) ∧ Visits(x, Tiger)) → Needs(x, Mouse)) ::: If something is cold and it visits the tiger then it needs the mouse.\n∀x ((Needs(x, Tiger) ∧ Visits(x, Tiger)) → Likes(Tiger, Mouse)) ::: If something needs the tiger and it visits the tiger then the tiger likes the mouse.\n∀x (Needs(x, Squirrel) → Needs(Squirrel, Cat)) ::: If something needs the squirrel then the squirrel needs the cat.\n∀x (Likes(x, Mouse) → Needs(x, Cat)) ::: If something likes the mouse then it needs the cat.\n∀x (Needs(x, Cat) → Red(x)) ::: If something needs the cat then it is red."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-908",
    "context": "Anne is quiet. Anne is red. Bob is kind. Bob is nice. Bob is quiet. Bob is not red. Bob is round. Charlie is big. Charlie is kind. Fiona is quiet. All round things are nice. All kind, red things are rough. If something is big then it is quiet. If something is rough then it is round. If Charlie is nice and Charlie is big then Charlie is not kind. If something is red then it is kind. If something is round and nice then it is not big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nPremises:\nQuiet(Anne) ::: Anne is quiet.\nRed(Anne) ::: Anne is red.\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\nQuiet(Bob) ::: Bob is quiet.\n¬Red(Bob) ::: Bob is not red.\nRound(Bob) ::: Bob is round.\nBig(Charlie) ::: Charlie is big.\nKind(Charlie) ::: Charlie is kind.\nQuiet(Fiona) ::: Fiona is quiet.\n∀x ((Round(x)) → Nice(x)) ::: All round things are nice.\n∀x ((Kind(x) ∧ Red(x)) → Rough(x)) ::: All kind, red things are rough.\n∀x ((Big(x)) → Quiet(x)) ::: If something is big then it is quiet.\n∀x ((Rough(x)) → Round(x)) ::: If something is rough then it is round.\n∀x ((Nice(x) ∧ Big(x)) → ¬Kind(x)) ::: If something is round and nice then it is not big.\n∀x ((Red(x)) → Kind(x)) ::: If something is red then it is kind.\nConclusion:\nKind(Bob) ::: Bob is kind."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-90",
    "context": "The bear is kind. The mouse chases the bear. The mouse chases the rabbit. The mouse visits the rabbit. The rabbit is blue. The rabbit needs the mouse. The squirrel chases the mouse. The squirrel chases the rabbit. The squirrel is blue. The squirrel is green. The squirrel is young. If the squirrel is young and the squirrel needs the rabbit then the squirrel visits the rabbit. If something is cold then it needs the squirrel. If something visits the mouse and the mouse needs the squirrel then it needs the rabbit. If something chases the bear then it is cold. If something visits the bear and the bear visits the squirrel then the squirrel visits the rabbit. If something needs the squirrel then the squirrel visits the mouse. If the mouse visits the bear and the mouse visits the squirrel then the squirrel visits the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not visit the rabbit.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nChases(x, y) ::: x chases y.\nVisits(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nPremises:\nKind(bear) ::: The bear is kind.\nChases(mouse, bear) ::: The mouse chases the bear.\nChases(mouse, rabbit) ::: The mouse chases the rabbit.\nVisits(mouse, rabbit) ::: The mouse visits the rabbit.\nBlue(rabbit) ::: The rabbit is blue.\nNeeds(rabbit, mouse) ::: The rabbit needs the mouse.\nChases(squirrel, mouse) ::: The squirrel chases the mouse.\nChases(squirrel, rabbit) ::: The squirrel chases the rabbit.\nBlue(squirrel) ::: The squirrel is blue.\nGreen(squirrel) ::: The squirrel is green.\nYoung(squirrel) ::: The squirrel is young.\n∀x ((Young(squirrel) ∧ Needs(squirrel, rabbit)) → Visits(squirrel, rabbit)) ::: If the squirrel is young and the squirrel needs the rabbit then the squirrel visits the rabbit.\n∀x (Cold(x) → Needs(x, squirrel)) ::: If something is cold then it needs the squirrel.\n∀x ((Visits(x, mouse) ∧ Needs(mouse, squirrel)) → Needs(x, rabbit)) ::: If something visits the mouse and the mouse needs the squirrel then it needs the rabbit.\n∀x (Chases(x, bear) → Cold(x)) ::: If something chases the bear then it is cold.\n∀x ((Visits(x, bear) ∧ Visits(bear, squirrel)) → Visits(squirrel, rabbit)) ::: If something visits the bear and the bear visits the squirrel then the squirrel visits the rabbit.\n∀x (Needs(x, squirrel) → Visits(squirrel, mouse)) ::: If something needs the squirrel then the squirrel visits the mouse.\n∀x ((Visits(x, bear) ∧ Visits(x, squirrel)) → Visits(squirrel, bear)) ::: If the mouse visits the bear and the mouse visits the squirrel then the squirrel visits the bear.\nConclusion:\n¬Visits(mouse, rabbit) ::: The mouse does not visit the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1304",
    "context": "Anne is quiet. Anne is rough. Erin is nice. Erin is rough. Erin is round. Fiona is big. Fiona is furry. Fiona is nice. Fiona is quiet. Fiona is red. Fiona is rough. Fiona is round. Harry is red. Harry is rough. All nice, big people are quiet. Quiet people are round. Rough, big people are furry. Big people are rough. If someone is furry then they are nice. If someone is rough then they are big. If Harry is round then Harry is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nPremises:\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nNice(Erin) ::: Erin is nice.\nRough(Erin) ::: Erin is rough.\nRound(Erin) ::: Erin is round.\nBig(Fiona) ::: Fiona is big.\nFurry(Fiona) ::: Fiona is furry.\nNice(Fiona) ::: Fiona is nice.\nQuiet(Fiona) ::: Fiona is quiet.\nRed(Fiona) ::: Fiona is red.\nRough(Fiona) ::: Fiona is rough.\nRound(Fiona) ::: Fiona is round.\nRed(Harry) ::: Harry is red.\nRough(Harry) ::: Harry is rough.\n∀x ((Nice(x) ∧ Big(x)) → Quiet(x)) ::: All nice, big people are quiet.\n∀x (Quiet(x) → Round(x)) ::: Quiet people are round.\n∀x ((Rough(x) ∧ Big(x)) → Furry(x)) ::: Rough, big people are furry.\n∀x (Big(x) → Rough(x)) ::: Big people are rough.\n∀x (Furry(x) → Nice(x)) ::: If someone is furry then they are nice.\n∀x (Rough(x) → Big(x)) ::: If someone is rough then they are big.\n∀x (Round(Harry) → Big(Harry)) ::: If Harry is round then Harry is big.\nConclusion:\n¬Red(Anne) ::: Anne is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-146",
    "context": "The bear visits the cow. The cow eats the bear. The lion eats the squirrel. The lion is cold. The lion is red. The lion does not visit the bear. The squirrel is red. If someone is rough then they chase the squirrel. If someone is red and they chase the squirrel then the squirrel visits the bear. If the cow is kind then the cow does not eat the squirrel. If someone is red and they visit the bear then the bear is red. If someone is red then they are rough. If someone visits the bear then they are rough. If someone visits the cow then the cow chases the bear. If the lion visits the bear and the lion does not visit the squirrel then the squirrel is not red. If someone eats the lion and the lion is green then they visit the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion is red.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nVisits(x, y) ::: x visits y.\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nKind(x) ::: x is kind.\nChase(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nPremises:\nVisits(bear, cow) ::: The bear visits the cow.\nEats(cow, bear) ::: The cow eats the bear.\nEats(lion, squirrel) ::: The lion eats the squirrel.\nCold(lion) ::: The lion is cold.\nRed(lion) ::: The lion is red.\n¬Visits(lion, bear) ::: The lion does not visit the bear.\nRed(squirrel) ::: The squirrel is red.\n∀x (Rough(x) → Chase(x, squirrel)) ::: If someone is rough then they chase the squirrel.\n∀x ((Red(x) ∧ Chase(x, squirrel)) → Visits(squirrel, bear)) ::: If someone is red and they chase the squirrel then the squirrel visits the bear.\n∀x (Kind(cow) → ¬Eats(cow, squirrel)) ::: If the cow is kind then the cow does not eat the squirrel.\n∀x ((Red(x) ∧ Visits(x, bear)) → Red(bear)) ::: If someone is red and they visit the bear then the bear is red.\n∀x (Red(x) → Rough(x)) ::: If someone is red then they are rough.\n∀x (Visits(x, bear) → Rough(x)) ::: If someone visits the bear then they are rough.\n∀x (Visits(x, cow) → Chase(cow, bear)) ::: If someone visits the cow then the cow chases the bear.\n∀x ((Visits(lion, bear) ∧ ¬Visits(lion, squirrel)) → ¬Red(squirrel)) ::: If the lion visits the bear and the lion does not visit the squirrel then the squirrel is not red.\n∀x ((Eats(x, lion) ∧ Green(lion)) → Visits(x, lion)) ::: If someone eats the lion and the lion is green then they visit the lion.\nConclusion:\nRed(lion) ::: The lion is red."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-271",
    "context": "Bob is rough. Charlie is red. Charlie is rough. Erin is blue. Erin is rough. Erin is smart. Harry is blue. Harry is nice. Harry is red. Harry is rough. Nice people are smart. Nice people are red. All red, rough people are smart. If someone is smart and rough then they are nice. All rough people are red. All round, rough people are blue. All red, big people are nice. All nice, rough people are round. If Bob is nice then Bob is rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nPremises:\nRough(Bob) ::: Bob is rough.\nRed(Charlie) ::: Charlie is red.\nRough(Charlie) ::: Charlie is rough.\nBlue(Erin) ::: Erin is blue.\nRough(Erin) ::: Erin is rough.\nSmart(Erin) ::: Erin is smart.\nBlue(Harry) ::: Harry is blue.\nNice(Harry) ::: Harry is nice.\nRed(Harry) ::: Harry is red.\nRough(Harry) ::: Harry is rough.\n∀x (Nice(x) → Smart(x)) ::: Nice people are smart.\n∀x (Nice(x) → Red(x)) ::: Nice people are red.\n∀x ((Red(x) ∧ Rough(x)) → Smart(x)) ::: All red, rough people are smart.\n∀x ((Smart(x) ∧ Rough(x)) → Nice(x)) ::: If someone is smart and rough then they are nice.\n∀x (Rough(x) → Red(x)) ::: All rough people are red.\n∀x ((Round(x) ∧ Rough(x)) → Blue(x)) ::: All round, rough people are blue.\n∀x ((Red(x) ∧ Big(x)) → Nice(x)) ::: All red, big people are nice.\n∀x ((Nice(x) ∧ Rough(x)) → Round(x)) ::: All nice, rough people are round.\n∀x ((Nice(Bob)) → Rough(Bob)) ::: If Bob is nice then Bob is rough.\nConclusion:\n¬Blue(Harry) ::: Harry is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-927",
    "context": "Anne is cold. Anne is not furry. Anne is red. Anne is round. Bob is red. Fiona is not round. Gary is furry. If someone is red then they are round. Red people are round. Furry, blue people are round. If someone is cold and not blue then they are not red. If someone is round and red then they are quiet. If someone is cold then they are smart. If someone is blue and smart then they are not cold. If someone is quiet and round then they are cold. Round, smart people are not furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nQuiet(x) ::: x is quiet.\nPremises:\nCold(Anne) ::: Anne is cold.\n¬Furry(Anne) ::: Anne is not furry.\nRed(Anne) ::: Anne is red.\nRound(Anne) ::: Anne is round.\nRed(Bob) ::: Bob is red.\n¬Round(Fiona) ::: Fiona is not round.\nFurry(Gary) ::: Gary is furry.\n∀x (Red(x) → Round(x)) ::: If someone is red then they are round.\n∀x (Red(x) → Round(x)) ::: Red people are round.\n∀x ((Furry(x) ∧ Blue(x)) → Round(x)) ::: Furry, blue people are round.\n∀x ((Cold(x) ∧ ¬Blue(x)) → ¬Red(x)) ::: If someone is cold and not blue then they are not red.\n∀x ((Round(x) ∧ Red(x)) → Quiet(x)) ::: If someone is round and red then they are quiet.\n∀x (Cold(x) → Smart(x)) ::: If someone is cold then they are smart.\n∀x ((Blue(x) ∧ Smart(x)) → ¬Cold(x)) ::: If someone is blue and smart then they are not cold.\n∀x ((Quiet(x) ∧ Round(x)) → Cold(x)) ::: If someone is quiet and round then they are cold.\n∀x ((Round(x) ∧ Smart(x)) → ¬Furry(x)) ::: Round, smart people are not furry.\nConclusion:\n¬Cold(Gary) ::: Gary is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-664",
    "context": "Anne is kind. Erin is kind. Erin is smart. Fiona is big. Fiona is red. Fiona is smart. Gary is big. Gary is blue. Gary is not red. Gary is young. Red people are young. If Fiona is smart then Fiona is not round. All round people are red. If someone is blue and round then they are not big. If Anne is kind then Anne is round. If Erin is kind then Erin is smart. All kind, young people are blue. If Fiona is smart then Fiona is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nYoung(x) ::: x is young.\nRound(x) ::: x is round.\nPremises:\nKind(Anne) ::: Anne is kind.\nKind(Erin) ::: Erin is kind.\nSmart(Erin) ::: Erin is smart.\nBig(Fiona) ::: Fiona is big.\nRed(Fiona) ::: Fiona is red.\nSmart(Fiona) ::: Fiona is smart.\nBig(Gary) ::: Gary is big.\nBlue(Gary) ::: Gary is blue.\n¬Red(Gary) ::: Gary is not red.\nYoung(Gary) ::: Gary is young.\n∀x (Red(x) → Young(x)) ::: Red people are young.\n∀x ((Smart(x) → ¬Round(x))) ::: If Fiona is smart then Fiona is not round.\n∀x ((Round(x) → Red(x))) ::: All round people are red.\n∀x ((Blue(x) ∧ Round(x)) → ¬Big(x)) ::: If someone is blue and round then they are not big.\n∀x (Kind(Anne) → Round(Anne)) ::: If Anne is kind then Anne is round.\n∀x (Kind(Erin) → Smart(Erin)) ::: If Erin is kind then Erin is smart.\n∀x ((Kind(x) ∧ Young(x)) → Blue(x)) ::: All kind, young people are blue.\n∀x (Smart(Fiona) → Big(Fiona)) ::: If Fiona is smart then Fiona is big.\nConclusion:\nKind(Anne) ::: Anne is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1338",
    "context": "Dave is furry. Fiona is furry. Fiona is white. Gary is quiet. Gary is red. Harry is blue. Harry is furry. Harry is quiet. Harry is red. Harry is white. Harry is young. If Fiona is white then Fiona is big. All furry, big people are red. If someone is white then they are big. If someone is furry then they are white. If someone is blue and young then they are white. White people are young. If someone is big and blue then they are quiet. Furry people are young. Red people are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nWhite(x) ::: x is white.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nPremises:\nFurry(Dave) ::: Dave is furry.\nFurry(Fiona) ::: Fiona is furry.\nWhite(Fiona) ::: Fiona is white.\nQuiet(Gary) ::: Gary is quiet.\nRed(Gary) ::: Gary is red.\nBlue(Harry) ::: Harry is blue.\nFurry(Harry) ::: Harry is furry.\nQuiet(Harry) ::: Harry is quiet.\nRed(Harry) ::: Harry is red.\nWhite(Harry) ::: Harry is white.\nYoung(Harry) ::: Harry is young.\n∀x ((White(x) → Big(x))) ::: If Fiona is white then Fiona is big.\n∀x ((Furry(x) ∧ Big(x)) → Red(x)) ::: All furry, big people are red.\n∀x ((White(x) → Big(x))) ::: If someone is white then they are big.\n∀x (Furry(x) → White(x)) ::: If someone is furry then they are white.\n∀x ((Blue(x) ∧ Young(x)) → White(x)) ::: If someone is blue and young then they are white.\n∀x (White(x) → Young(x)) ::: White people are young.\n∀x ((Big(x) ∧ Blue(x)) → Quiet(x)) ::: If someone is big and blue then they are quiet.\n∀x (Furry(x) → Young(x)) ::: Furry people are young.\n∀x (Red(x) → Blue(x)) ::: Red people are blue.\nConclusion:\n¬Furry(Fiona) ::: Fiona is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-572",
    "context": "Anne is nice. Anne is white. Anne is young. Dave is cold. Dave is nice. Dave is smart. Erin is cold. Erin is not kind. Erin is not nice. Erin is smart. Erin is young. Fiona is kind. Smart people are white. Kind, cold people are smart. Kind people are big. If Fiona is cold and Fiona is big then Fiona is nice. If someone is nice and big then they are cold. If someone is young and white then they are cold. If Anne is nice then Anne is cold. Big, young people are nice. Big people are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not big.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nBig(x) ::: x is big.\nPremises:\nNice(Anne) ::: Anne is nice.\nWhite(Anne) ::: Anne is white.\nYoung(Anne) ::: Anne is young.\nCold(Dave) ::: Dave is cold.\nNice(Dave) ::: Dave is nice.\nSmart(Dave) ::: Dave is smart.\nCold(Erin) ::: Erin is cold.\n¬Kind(Erin) ::: Erin is not kind.\n¬Nice(Erin) ::: Erin is not nice.\nSmart(Erin) ::: Erin is smart.\nYoung(Erin) ::: Erin is young.\nKind(Fiona) ::: Fiona is kind.\n∀x (Smart(x) → White(x)) ::: Smart people are white.\n∀x ((Kind(x) ∧ Cold(x)) → Smart(x)) ::: Kind, cold people are smart.\n∀x (Kind(x) → Big(x)) ::: Kind people are big.\n∀x ((Cold(Fiona) ∧ Big(Fiona)) → Nice(Fiona)) ::: If Fiona is cold and Fiona is big then Fiona is nice.\n∀x ((Nice(x) ∧ Big(x)) → Cold(x)) ::: If someone is nice and big then they are cold.\n∀x ((Young(x) ∧ White(x)) → Cold(x)) ::: If someone is young and white then they are cold.\n∀x (Nice(Anne) → Cold(Anne)) ::: If Anne is nice then Anne is cold.\n∀x ((Big(x) ∧ Young(x)) → Nice(x)) ::: Big, young people are nice.\n∀x (Big(x) → Young(x)) ::: Big people are young.\nConclusion:\n¬Big(Erin) ::: Erin is not big."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-280",
    "context": "The bald eagle needs the mouse. The bald eagle sees the mouse. The cow is red. The cow is rough. The cow sees the bald eagle. The cow sees the mouse. The dog eats the bald eagle. The dog is cold. The dog is rough. The dog needs the bald eagle. The mouse eats the bald eagle. The mouse eats the dog. The mouse is red. The mouse is rough. The mouse is young. The mouse sees the cow. If something is young then it needs the dog. If something eats the cow then the cow is kind. If something is young then it sees the bald eagle. If something is cold and it needs the dog then it eats the mouse. If something needs the bald eagle and it is red then it is young. If something eats the mouse then it needs the mouse. If something eats the bald eagle then it is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nEats(x, y) ::: x eats y.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nPremises:\nNeeds(BaldEagle, Mouse) ::: The bald eagle needs the mouse.\nSees(BaldEagle, Mouse) ::: The bald eagle sees the mouse.\nRed(Cow) ::: The cow is red.\nRough(Cow) ::: The cow is rough.\nSees(Cow, BaldEagle) ::: The cow sees the bald eagle.\nSees(Cow, Mouse) ::: The cow sees the mouse.\nEats(Dog, BaldEagle) ::: The dog eats the bald eagle.\nCold(Dog) ::: The dog is cold.\nRough(Dog) ::: The dog is rough.\nNeeds(Dog, BaldEagle) ::: The dog needs the bald eagle.\nEats(Mouse, BaldEagle) ::: The mouse eats the bald eagle.\nEats(Mouse, Dog) ::: The mouse eats the dog.\nRed(Mouse) ::: The mouse is red.\nRough(Mouse) ::: The mouse is rough.\nYoung(Mouse) ::: The mouse is young.\nSees(Mouse, Cow) ::: The mouse sees the cow.\n∀x (Young(x) → Needs(x, Dog)) ::: If something is young then it needs the dog.\n∀x (Eats(x, Cow) → Kind(Cow)) ::: If something eats the cow then the cow is kind.\n∀x (Young(x) → Sees(x, BaldEagle)) ::: If something is young then it sees the bald eagle.\n∀x ((Cold(x) ∧ Needs(x, Dog)) → Eats(x, Mouse)) ::: If something is cold and it needs the dog then it eats the mouse.\n∀x ((Needs(x, BaldEagle) ∧ Red(x)) → Young(x)) ::: If something needs the bald eagle and it is red then it is young.\n∀x (Eats(x, Mouse) → Needs(x, Mouse)) ::: If something eats the mouse then it needs the mouse.\n∀x (Eats(x, BaldEagle) → Red(x)) ::: If something eats the bald eagle then it is red.\nConclusion:\nCold(Dog) ::: The dog is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-907",
    "context": "The bald eagle is green. The bald eagle likes the bear. The bald eagle likes the cat. The bald eagle likes the tiger. The bald eagle sees the bear. The bear likes the bald eagle. The bear sees the cat. The cat likes the bear. The cat likes the tiger. The cat sees the bald eagle. The tiger chases the bald eagle. The tiger chases the bear. The tiger chases the cat. The tiger is big. The tiger is red. The tiger sees the cat. If something chases the tiger then it likes the cat. If something is kind then it is red. If something likes the tiger then the tiger chases the bald eagle. If something is red then it is kind. If something is kind then it sees the bald eagle. If the tiger sees the cat and the tiger likes the bear then the tiger chases the cat. If the cat likes the tiger and the tiger sees the bald eagle then the bald eagle is red. If something chases the bald eagle then the bald eagle chases the bear. If something chases the bear and the bear chases the bald eagle then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not red.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nChases(x, y) ::: x chases y.\nBig(x) ::: x is big.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nPremises:\nGreen(bald eagle) ::: The bald eagle is green.\nLikes(bald eagle, bear) ::: The bald eagle likes the bear.\nLikes(bald eagle, cat) ::: The bald eagle likes the cat.\nLikes(bald eagle, tiger) ::: The bald eagle likes the tiger.\nSees(bald eagle, bear) ::: The bald eagle sees the bear.\nLikes(bear, bald eagle) ::: The bear likes the bald eagle.\nSees(bear, cat) ::: The bear sees the cat.\nLikes(cat, bear) ::: The cat likes the bear.\nLikes(cat, tiger) ::: The cat likes the tiger.\nSees(cat, bald eagle) ::: The cat sees the bald eagle.\nChases(tiger, bald eagle) ::: The tiger chases the bald eagle.\nChases(tiger, bear) ::: The tiger chases the bear.\nChases(tiger, cat) ::: The tiger chases the cat.\nBig(tiger) ::: The tiger is big.\nRed(tiger) ::: The tiger is red.\nSees(tiger, cat) ::: The tiger sees the cat.\n∀x ((Chases(x, tiger) → Likes(x, cat))) ::: If something chases the tiger then it likes the cat.\n∀x ((Kind(x) → Red(x))) ::: If something is kind then it is red.\n∀x ((Likes(x, tiger) → Chases(tiger, bald eagle))) ::: If something likes the tiger then the tiger chases the bald eagle.\n∀x ((Red(x) → Kind(x))) ::: If something is red then it is kind.\n∀x ((Kind(x) → Sees(x, bald eagle))) ::: If something is kind then it sees the bald eagle.\n∀x ((Sees(tiger, cat) ∧ Likes(tiger, bear)) → Chases(tiger, cat)) ::: If the tiger sees the cat and the tiger likes the bear then the tiger chases the cat.\n∀x ((Likes(cat, tiger) ∧ Sees(tiger, bald eagle)) → Red(bald eagle)) ::: If the cat likes the tiger and the tiger sees the bald eagle then the bald eagle is red.\n∀x ((Chases(x, bald eagle)) → Chases(bald eagle, bear)) ::: If something chases the bald eagle then the bald eagle chases the bear.\n∀x ((Chases(x, bear) ∧ Chases(bear, bald eagle)) → Blue(x)) ::: If something chases the bear and the bear chases the bald eagle then it is blue.\nConclusion:\n¬Red(tiger) ::: The tiger is not red."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-412",
    "context": "Dave is furry. Dave is green. Dave is quiet. Dave is red. Fiona is blue. Fiona is furry. Fiona is green. Fiona is quiet. Fiona is red. Gary is blue. Gary is nice. Gary is quiet. Gary is red. Gary is smart. Harry is blue. Harry is smart. If something is blue and furry then it is quiet. If Dave is furry then Dave is nice. If something is furry then it is blue. Quiet things are red. All furry, green things are quiet. If something is red then it is green. All nice things are furry. All smart things are nice. Red things are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not nice.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nPremises:\nFurry(Dave) ::: Dave is furry.\nGreen(Dave) ::: Dave is green.\nQuiet(Dave) ::: Dave is quiet.\nRed(Dave) ::: Dave is red.\nBlue(Fiona) ::: Fiona is blue.\nFurry(Fiona) ::: Fiona is furry.\nGreen(Fiona) ::: Fiona is green.\nQuiet(Fiona) ::: Fiona is quiet.\nRed(Fiona) ::: Fiona is red.\nBlue(Gary) ::: Gary is blue.\nNice(Gary) ::: Gary is nice.\nQuiet(Gary) ::: Gary is quiet.\nRed(Gary) ::: Gary is red.\nSmart(Gary) ::: Gary is smart.\nBlue(Harry) ::: Harry is blue.\nSmart(Harry) ::: Harry is smart.\n∀x ((Blue(x) ∧ Furry(x)) → Quiet(x)) ::: If something is blue and furry then it is quiet.\n∀x (Furry(Dave) → Nice(Dave)) ::: If Dave is furry then Dave is nice.\n∀x (Furry(x) → Blue(x)) ::: If something is furry then it is blue.\n∀x (Quiet(x) → Red(x)) ::: Quiet things are red.\n∀x ((Furry(x) ∧ Green(x)) → Quiet(x)) ::: All furry, green things are quiet.\n∀x (Red(x) → Green(x)) ::: If something is red then it is green.\n∀x (Nice(x) → Furry(x)) ::: All nice things are furry.\n∀x (Smart(x) → Nice(x)) ::: All smart things are nice.\n∀x (Red(x) → Quiet(x)) ::: Red things are quiet.\nConclusion:\n¬Nice(Fiona) ::: Fiona is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1055",
    "context": "Anne is furry. Anne is not quiet. Anne is red. Anne is smart. Charlie is not quiet. Gary is green. Gary is quiet. Gary is smart. Harry is furry. Harry is quiet. All kind, furry things are smart. If something is smart then it is cold. If something is smart then it is cold. All green things are kind. Green things are kind. All red, cold things are kind. If something is kind and smart then it is furry. All red things are green. Furry things are red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nGreen(x) ::: x is green.\nCold(x) ::: x is cold.\nKind(x) ::: x is kind.\nPremises:\nFurry(Anne) ::: Anne is furry.\n¬Quiet(Anne) ::: Anne is not quiet.\nRed(Anne) ::: Anne is red.\nSmart(Anne) ::: Anne is smart.\n¬Quiet(Charlie) ::: Charlie is not quiet.\nGreen(Gary) ::: Gary is green.\nQuiet(Gary) ::: Gary is quiet.\nSmart(Gary) ::: Gary is smart.\nFurry(Harry) ::: Harry is furry.\nQuiet(Harry) ::: Harry is quiet.\n∀x ((Kind(x) ∧ Furry(x)) → Smart(x)) ::: All kind, furry things are smart.\n∀x (Smart(x) → Cold(x)) ::: If something is smart then it is cold.\n∀x (Green(x) → Kind(x)) ::: All green things are kind.\n∀x (Green(x) → Kind(x)) ::: Green things are kind.\n∀x ((Red(x) ∧ Cold(x)) → Kind(x)) ::: All red, cold things are kind.\n∀x ((Kind(x) ∧ Smart(x)) → Furry(x)) ::: If something is kind and smart then it is furry.\n∀x (Red(x) → Green(x)) ::: All red things are green.\n∀x (Furry(x) → Red(x)) ::: Furry things are red.\nConclusion:\nFurry(Harry) ::: Harry is furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1220",
    "context": "Anne is blue. Bob is blue. Bob is green. Bob is smart. Dave is big. Dave is nice. Fiona is smart. If something is nice then it is not green. Quiet, blue things are big. If something is blue then it is young. If something is nice then it is quiet. Young things are blue. If Anne is young then Anne is quiet. If Dave is young then Dave is green. All big, quiet things are nice. If Fiona is blue then Fiona is not green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nSmart(x) ::: x is smart.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nPremises:\nBlue(Anne) ::: Anne is blue.\nBlue(Bob) ::: Bob is blue.\nGreen(Bob) ::: Bob is green.\nSmart(Bob) ::: Bob is smart.\nBig(Dave) ::: Dave is big.\nNice(Dave) ::: Dave is nice.\nSmart(Fiona) ::: Fiona is smart.\n∀x (Nice(x) → ¬Green(x)) ::: If something is nice then it is not green.\n∀x ((Quiet(x) ∧ Blue(x)) → Big(x)) ::: Quiet, blue things are big.\n∀x (Blue(x) → Young(x)) ::: If something is blue then it is young.\n∀x (Nice(x) → Quiet(x)) ::: If something is nice then it is quiet.\n∀x (Young(x) → Blue(x)) ::: Young things are blue.\n∀x (Young(Anne) → Quiet(Anne)) ::: If Anne is young then Anne is quiet.\n∀x (Young(Dave) → Green(Dave)) ::: If Dave is young then Dave is green.\n∀x ((Big(x) ∧ Quiet(x)) → Nice(x)) ::: All big, quiet things are nice.\n∀x (Blue(Fiona) → ¬Green(Fiona)) ::: If Fiona is blue then Fiona is not green.\nConclusion:\n¬Blue(Anne) ::: Anne is not blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-298",
    "context": "Anne is round. Anne is young. Dave is cold. Dave is not quiet. Dave is red. Dave is rough. Dave is round. Erin is quiet. Erin is not rough. Fiona is cold. Fiona is quiet. Fiona is smart. All round, young people are quiet. All smart people are cold. If Anne is quiet and Anne is cold then Anne is rough. If Dave is quiet and Dave is rough then Dave is smart. All quiet people are red. If someone is red and round then they are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not smart.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nCold(x) ::: x is cold.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nPremises:\nRound(Anne) ::: Anne is round.\nYoung(Anne) ::: Anne is young.\nCold(Dave) ::: Dave is cold.\n¬Quiet(Dave) ::: Dave is not quiet.\nRed(Dave) ::: Dave is red.\nRough(Dave) ::: Dave is rough.\nRound(Dave) ::: Dave is round.\nQuiet(Erin) ::: Erin is quiet.\n¬Rough(Erin) ::: Erin is not rough.\nCold(Fiona) ::: Fiona is cold.\nQuiet(Fiona) ::: Fiona is quiet.\nSmart(Fiona) ::: Fiona is smart.\n∀x ((Round(x) ∧ Young(x)) → Quiet(x)) ::: All round, young people are quiet.\n∀x (Smart(x) → Cold(x)) ::: All smart people are cold.\n∀x ((Quiet(Anne) ∧ Cold(Anne)) → Rough(Anne)) ::: If Anne is quiet and Anne is cold then Anne is rough.\n∀x ((Quiet(Dave) ∧ Rough(Dave)) → Smart(Dave)) ::: If Dave is quiet and Dave is rough then Dave is smart.\n∀x (Quiet(x) → Red(x)) ::: All quiet people are red.\n∀x ((Red(x) ∧ Round(x)) → Smart(x)) ::: If someone is red and round then they are smart.\nConclusion:\n¬Smart(Erin) ::: Erin is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-725",
    "context": "Anne is cold. Anne is smart. Bob is big. Bob is rough. Erin is big. Erin is cold. Erin is kind. Erin is rough. Erin is smart. Erin is white. Erin is young. Harry is cold. Harry is kind. Harry is rough. Smart things are cold. If Erin is kind then Erin is young. White things are kind. If something is rough and kind then it is smart. If Anne is smart then Anne is white. All smart, cold things are kind. Big, cold things are young. If Bob is rough then Bob is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is kind.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nCold(Anne) ::: Anne is cold.\nSmart(Anne) ::: Anne is smart.\nBig(Bob) ::: Bob is big.\nRough(Bob) ::: Bob is rough.\nBig(Erin) ::: Erin is big.\nCold(Erin) ::: Erin is cold.\nKind(Erin) ::: Erin is kind.\nRough(Erin) ::: Erin is rough.\nSmart(Erin) ::: Erin is smart.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\nCold(Harry) ::: Harry is cold.\nKind(Harry) ::: Harry is kind.\nRough(Harry) ::: Harry is rough.\nSmart things are cold: ∀x (Smart(x) → Cold(x))\n∀x ((Kind(Erin) → Young(Erin))) ::: If Erin is kind then Erin is young.\n∀x (White(x) → Kind(x)) ::: White things are kind.\n∀x ((Rough(x) ∧ Kind(x)) → Smart(x)) ::: If something is rough and kind then it is smart.\n∀x ((Smart(Anne) → White(Anne))) ::: If Anne is smart then Anne is white.\n∀x ((Smart(x) ∧ Cold(x)) → Kind(x)) ::: All smart, cold things are kind.\n∀x ((Big(x) ∧ Cold(x)) → Young(x)) ::: Big, cold things are young.\n∀x ((Rough(Bob) → White(Bob))) ::: If Bob is rough then Bob is white.\nConclusion:\nKind(Harry) ::: Harry is kind."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-717",
    "context": "Anne is cold. Anne is quiet. Bob is green. Bob is round. Erin is furry. Erin is quiet. Fiona is furry. All furry people are quiet. If someone is furry and green then they are blue. All cold people are blue. If someone is quiet and furry then they are cold. All furry, blue people are not green. If Erin is round then Erin is not nice. If Erin is green and Erin is blue then Erin is nice. If someone is quiet and not green then they are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nQuiet(x) ::: x is quiet.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nFurry(x) ::: x is furry.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nPremises:\nCold(Anne) ::: Anne is cold.\nQuiet(Anne) ::: Anne is quiet.\nGreen(Bob) ::: Bob is green.\nRound(Bob) ::: Bob is round.\nFurry(Erin) ::: Erin is furry.\nQuiet(Erin) ::: Erin is quiet.\nFurry(Fiona) ::: Fiona is furry.\n∀x (Furry(x) → Quiet(x)) ::: All furry people are quiet.\n∀x ((Furry(x) ∧ Green(x)) → Blue(x)) ::: If someone is furry and green then they are blue.\n∀x (Cold(x) → Blue(x)) ::: All cold people are blue.\n∀x ((Quiet(x) ∧ Furry(x)) → Cold(x)) ::: If someone is quiet and furry then they are cold.\n∀x ((Furry(x) ∧ Blue(x)) → ¬Green(x)) ::: All furry, blue people are not green.\n∀x ((Erin = x) ∧ Round(Erin) → ¬Nice(Erin)) ::: If Erin is round then Erin is not nice.\n∀x ((Erin = x) ∧ (Green(Erin) ∧ Blue(Erin)) → Nice(Erin)) ::: If Erin is green and Erin is blue then Erin is nice.\n∀x ((Quiet(x) ∧ ¬Green(x)) → Round(x)) ::: If someone is quiet and not green then they are round.\nConclusion:\n¬Round(Bob) ::: Bob is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-187",
    "context": "Anne is big. Anne is rough. Dave is blue. Dave is cold. Dave is red. Dave is rough. Dave is round. Gary is round. Harry is cold. Harry is rough. All round things are blue. If something is cold then it is blue. Blue, red things are round. If something is rough then it is red. All big, red things are cold. All round things are green. Round, cold things are big. If something is green then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not cold.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nPremises:\nBig(Anne) ::: Anne is big.\nRough(Anne) ::: Anne is rough.\nBlue(Dave) ::: Dave is blue.\nCold(Dave) ::: Dave is cold.\nRed(Dave) ::: Dave is red.\nRough(Dave) ::: Dave is rough.\nRound(Dave) ::: Dave is round.\nRound(Gary) ::: Gary is round.\nCold(Harry) ::: Harry is cold.\nRough(Harry) ::: Harry is rough.\n∀x (Round(x) → Blue(x)) ::: All round things are blue.\n∀x (Cold(x) → Blue(x)) ::: If something is cold then it is blue.\n∀x ((Blue(x) ∧ Red(x)) → Round(x)) ::: Blue, red things are round.\n∀x (Rough(x) → Red(x)) ::: If something is rough then it is red.\n∀x ((Big(x) ∧ Red(x)) → Cold(x)) ::: All big, red things are cold.\n∀x (Round(x) → Green(x)) ::: All round things are green.\n∀x ((Round(x) ∧ Cold(x)) → Big(x)) ::: Round, cold things are big.\n∀x (Green(x) → Blue(x)) ::: If something is green then it is blue.\nConclusion:\n¬Cold(Gary) ::: Gary is not cold."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-492",
    "context": "Anne is big. Anne is blue. Anne is kind. Anne is round. Charlie is green. Gary is kind. Harry is round. All blue things are rough. All white things are kind. If something is green and kind then it is round. If Anne is rough then Anne is big. All big things are blue. If something is green then it is blue. Blue things are big. If Anne is big and Anne is green then Anne is kind. Rough things are white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is blue.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nPremises:\nBig(Anne) ::: Anne is big.\nBlue(Anne) ::: Anne is blue.\nKind(Anne) ::: Anne is kind.\nRound(Anne) ::: Anne is round.\nGreen(Charlie) ::: Charlie is green.\nKind(Gary) ::: Gary is kind.\nRound(Harry) ::: Harry is round.\n∀x (Blue(x) → Rough(x)) ::: All blue things are rough.\n∀x (White(x) → Kind(x)) ::: All white things are kind.\n∀x ((Green(x) ∧ Kind(x)) → Round(x)) ::: If something is green and kind then it is round.\n∀x (Rough(Anne) → Big(Anne)) ::: If Anne is rough then Anne is big.\n∀x (Big(x) → Blue(x)) ::: All big things are blue.\n∀x (Green(x) → Blue(x)) ::: If something is green then it is blue.\n∀x (Blue(x) → Big(x)) ::: Blue things are big.\n∀x ((Big(Anne) ∧ Green(Anne)) → Kind(Anne)) ::: If Anne is big and Anne is green then Anne is kind.\n∀x (Rough(x) → White(x)) ::: Rough things are white.\nConclusion:\nBlue(Anne) ::: Anne is blue."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1229",
    "context": "Anne is cold. Anne is white. Bob is nice. Bob is white. Dave is blue. Gary is blue. Gary is smart. All blue people are smart. If someone is smart then they are cold. If someone is white then they are quiet. If someone is nice and quiet then they are blue. All white, furry people are blue. If Gary is furry then Gary is cold. If Bob is not white then Bob is smart. All cold, blue people are not furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not white.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nWhite(x) ::: x is white.\nNice(x) ::: x is nice.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nQuiet(x) ::: x is quiet.\nFurry(x) ::: x is furry.\nPremises:\nCold(Anne) ::: Anne is cold.\nWhite(Anne) ::: Anne is white.\nNice(Bob) ::: Bob is nice.\nWhite(Bob) ::: Bob is white.\nBlue(Dave) ::: Dave is blue.\nBlue(Gary) ::: Gary is blue.\nSmart(Gary) ::: Gary is smart.\n∀x (Blue(x) → Smart(x)) ::: All blue people are smart.\n∀x (Smart(x) → Cold(x)) ::: If someone is smart then they are cold.\n∀x (White(x) → Quiet(x)) ::: If someone is white then they are quiet.\n∀x ((Nice(x) ∧ Quiet(x)) → Blue(x)) ::: If someone is nice and quiet then they are blue.\n∀x ((White(x) ∧ Furry(x)) → Blue(x)) ::: All white, furry people are blue.\n∀x (Furry(Gary) → Cold(Gary)) ::: If Gary is furry then Gary is cold.\n∀x ((¬White(x)) → Smart(x)) ::: If Bob is not white then Bob is smart.\n∀x ((Cold(x) ∧ Blue(x)) → ¬Furry(x)) ::: All cold, blue people are not furry.\nConclusion:\n¬White(Bob) ::: Bob is not white."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-77",
    "context": "The bear is blue. The cat eats the cow. The cat is red. The cat is round. The cat does not need the cow. The cat does not need the dog. The cow is not round. The dog chases the bear. The dog chases the cat. The dog is round. If the bear is not green then the bear eats the cat. If the dog needs the cat then the dog chases the bear. If the cow needs the bear then the cow is green. If the dog chases the cow then the dog needs the bear. Red things are nice. If something is green then it needs the cow. If something is nice then it eats the bear. If something is nice and it eats the bear then the bear is red. If something eats the dog and it is not red then the dog does not need the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not eat the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nEats(x, y) ::: x eats y.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nChases(x, y) ::: x chases y.\nGreen(x) ::: x is green.\nNice(x) ::: x is nice.\nPremises:\nBlue(bear) ::: The bear is blue.\nEats(cat, cow) ::: The cat eats the cow.\nRed(cat) ::: The cat is red.\nRound(cat) ::: The cat is round.\n¬Needs(cat, cow) ::: The cat does not need the cow.\n¬Needs(cat, dog) ::: The cat does not need the dog.\n¬Round(cow) ::: The cow is not round.\nChases(dog, bear) ::: The dog chases the bear.\nChases(dog, cat) ::: The dog chases the cat.\nRound(dog) ::: The dog is round.\n¬Green(bear) → Eats(bear, cat) ::: If the bear is not green then the bear eats the cat.\nNeeds(dog, cat) → Chases(dog, bear) ::: If the dog needs the cat then the dog chases the bear.\nNeeds(cow, bear) → Green(cow) ::: If the cow needs the bear then the cow is green.\nChases(dog, cow) → Needs(dog, bear) ::: If the dog chases the cow then the dog needs the bear.\n∀x (Red(x) → Nice(x)) ::: Red things are nice.\n∀x (Green(x) → Needs(x, cow)) ::: If something is green then it needs the cow.\n∀x (Nice(x) → Eats(x, bear)) ::: If something is nice then it eats the bear.\n∀x ((Nice(x) ∧ Eats(x, bear)) → Red(bear)) ::: If something is nice and it eats the bear then the bear is red.\n∀x ((Eats(x, dog) ∧ ¬Red(x)) → ¬Needs(dog, cow)) ::: If something eats the dog and it is not red then the dog does not need the cow.\nConclusion:\n¬Eats(dog, bear) ::: The dog does not eat the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-222",
    "context": "The bald eagle chases the cow. The bald eagle chases the mouse. The bald eagle visits the cow. The cow sees the mouse. The dog sees the mouse. The mouse chases the cow. The mouse is kind. The mouse is nice. The mouse sees the dog. The mouse visits the bald eagle. The mouse visits the dog. If something chases the cow and it sees the cow then the cow sees the dog. If something is nice then it visits the cow. If something chases the dog then it is cold. If something is nice then it chases the bald eagle. If something sees the cow then it is rough. If something sees the bald eagle then it is cold. All cold things are kind. If something chases the bald eagle then it chases the dog. If something is cold and it sees the dog then it sees the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The bald eagle visits the cow.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nVisits(x, y) ::: x visits y.\nSees(x, y) ::: x sees y.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nPremises:\nChases(bald eagle, cow) ::: The bald eagle chases the cow.\nChases(bald eagle, mouse) ::: The bald eagle chases the mouse.\nVisits(bald eagle, cow) ::: The bald eagle visits the cow.\nSees(cow, mouse) ::: The cow sees the mouse.\nSees(dog, mouse) ::: The dog sees the mouse.\nChases(mouse, cow) ::: The mouse chases the cow.\nKind(mouse) ::: The mouse is kind.\nNice(mouse) ::: The mouse is nice.\nSees(mouse, dog) ::: The mouse sees the dog.\nVisits(mouse, bald eagle) ::: The mouse visits the bald eagle.\nVisits(mouse, dog) ::: The mouse visits the dog.\n∀x ((Chases(x, cow) ∧ Sees(x, cow)) → Sees(cow, dog)) ::: If something chases the cow and it sees the cow then the cow sees the dog.\n∀x (Nice(x) → Visits(x, cow)) ::: If something is nice then it visits the cow.\n∀x (Chases(x, dog) → Cold(x)) ::: If something chases the dog then it is cold.\n∀x (Nice(x) → Chases(x, bald eagle)) ::: If something is nice then it chases the bald eagle.\n∀x (Sees(x, cow) → Rough(x)) ::: If something sees the cow then it is rough.\n∀x (Sees(x, bald eagle) → Cold(x)) ::: If something sees the bald eagle then it is cold.\n∀x (Cold(x) → Kind(x)) ::: All cold things are kind.\n∀x (Chases(x, bald eagle) → Chases(x, dog)) ::: If something chases the bald eagle then it chases the dog.\n∀x ((Cold(x) ∧ Sees(x, dog)) → Sees(x, cow)) ::: If something is cold and it sees the dog then it sees the cow.\nConclusion:\nVisits(bald eagle, cow) ::: The bald eagle visits the cow."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-423",
    "context": "Anne is cold. Anne is furry. Anne is not quiet. Charlie is kind. Fiona is not quiet. Fiona is young. Harry is cold. Kind things are furry. Nice things are big. Furry things are nice. If something is young and furry then it is quiet. If Anne is quiet then Anne is cold. Kind, big things are young. If something is kind and not furry then it is not young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBig(x) ::: x is big.\nNice(x) ::: x is nice.\nPremises:\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\n¬Quiet(Anne) ::: Anne is not quiet.\nKind(Charlie) ::: Charlie is kind.\n¬Quiet(Fiona) ::: Fiona is not quiet.\nYoung(Fiona) ::: Fiona is young.\nCold(Harry) ::: Harry is cold.\n∀x ((Young(x) ∧ Furry(x)) → Quiet(x)) ::: If something is young and furry then it is quiet.\n∀x (Quiet(Anne) → Cold(Anne)) ::: If Anne is quiet then Anne is cold.\n∀x ((Kind(x) ∧ Big(x)) → Young(x)) ::: Kind, big things are young.\n∀x ((Kind(x) ∧ ¬Furry(x)) → ¬Young(x)) ::: If something is kind and not furry then it is not young.\n∀x (Kind(x) → Furry(x)) ::: Kind things are furry.\n∀x (Nice(x) → Big(x)) ::: Nice things are big.\n∀x (Furry(x) → Nice(x)) ::: Furry things are nice.\nConclusion:\n¬Kind(Charlie) ::: Charlie is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-341",
    "context": "The cat chases the mouse. The cat chases the squirrel. The cat is red. The cat is rough. The cat sees the mouse. The mouse does not chase the cat. The mouse needs the squirrel. The mouse sees the cat. The rabbit chases the squirrel. The rabbit needs the mouse. The rabbit does not see the mouse. The squirrel does not chase the cat. The squirrel chases the rabbit. The squirrel is kind. The squirrel is not rough. The squirrel needs the cat. If someone is blue then they see the rabbit. If someone needs the squirrel then they see the rabbit. If someone is kind and they need the squirrel then the squirrel is young. If someone chases the mouse then they do not need the mouse. If someone needs the rabbit then the rabbit needs the squirrel. If someone needs the squirrel and they see the rabbit then the squirrel chases the rabbit. If the cat is red and the cat needs the squirrel then the cat is rough. If someone sees the rabbit then they need the rabbit. If someone sees the mouse and the mouse chases the cat then they chase the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not need the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSees(x, y) ::: x sees y.\nNeeds(x, y) ::: x needs y.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nYoung(x) ::: x is young.\nPremises:\nChases(cat, mouse) ::: The cat chases the mouse.\nChases(cat, squirrel) ::: The cat chases the squirrel.\nRed(cat) ::: The cat is red.\nRough(cat) ::: The cat is rough.\nSees(cat, mouse) ::: The cat sees the mouse.\n¬Chases(mouse, cat) ::: The mouse does not chase the cat.\nNeeds(mouse, squirrel) ::: The mouse needs the squirrel.\nSees(mouse, cat) ::: The mouse sees the cat.\nChases(rabbit, squirrel) ::: The rabbit chases the squirrel.\nNeeds(rabbit, mouse) ::: The rabbit needs the mouse.\n¬Sees(rabbit, mouse) ::: The rabbit does not see the mouse.\n¬Chases(squirrel, cat) ::: The squirrel does not chase the cat.\nKind(squirrel) ::: The squirrel is kind.\n¬Rough(squirrel) ::: The squirrel is not rough.\nNeeds(squirrel, cat) ::: The squirrel needs the cat.\n∀x ((Blue(x) → Sees(x, rabbit))) ::: If someone is blue then they see the rabbit.\n∀x ((Needs(x, squirrel) → Sees(x, rabbit))) ::: If someone needs the squirrel then they see the rabbit.\n∀x ((Kind(x) ∧ Needs(x, squirrel)) → Young(squirrel)) ::: If someone is kind and they need the squirrel then the squirrel is young.\n∀x ((Chases(x, mouse)) → ¬Needs(x, mouse)) ::: If someone chases the mouse then they do not need the mouse.\n∀x ((Needs(x, rabbit)) → Needs(rabbit, squirrel)) ::: If someone needs the rabbit then the rabbit needs the squirrel.\n∀x ((Needs(x, squirrel) ∧ Sees(x, rabbit)) → Chases(squirrel, rabbit)) ::: If someone needs the squirrel and they see the rabbit then the squirrel chases the rabbit.\n∀x ((Red(cat) ∧ Needs(cat, squirrel)) → Rough(cat)) ::: If the cat is red and the cat needs the squirrel then the cat is rough.\n∀x (Sees(x, rabbit) → Needs(x, rabbit)) ::: If someone sees the rabbit then they need the rabbit.\n∀x ((Sees(x, mouse) ∧ Chases(mouse, cat)) → Chases(x, squirrel)) ::: If someone sees the mouse and the mouse chases the cat then they chase the squirrel.\nConclusion:\n¬Needs(cat, rabbit) ::: The cat does not need the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-112",
    "context": "The bear is not rough. The bear likes the squirrel. The mouse is green. The rabbit is blue. The rabbit is rough. The rabbit likes the bear. The squirrel is blue. If someone likes the mouse then they chase the mouse. If someone likes the bear then they like the mouse. If the rabbit likes the bear and the bear chases the mouse then the mouse likes the bear. If someone likes the squirrel and they need the mouse then the squirrel does not chase the bear. If someone likes the bear then the bear likes the mouse. If the bear likes the squirrel and the squirrel is big then the squirrel chases the mouse. If someone is big and they do not chase the bear then the bear chases the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit likes the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nChase(x, y) ::: x chases y.\nBig(x) ::: x is big.\nNeed(x, y) ::: x needs y.\n\nPremises:\n¬Rough(bear) ::: The bear is not rough.\nLikes(bear, squirrel) ::: The bear likes the squirrel.\nGreen(mouse) ::: The mouse is green.\nBlue(rabbit) ::: The rabbit is blue.\nRough(rabbit) ::: The rabbit is rough.\nLikes(rabbit, bear) ::: The rabbit likes the bear.\nBlue(squirrel) ::: The squirrel is blue.\n∀x (Likes(x, mouse) → Chase(x, mouse)) ::: If someone likes the mouse then they chase the mouse.\n∀x (Likes(x, bear) → Likes(x, mouse)) ::: If someone likes the bear then they like the mouse.\n(Likes(rabbit, bear) ∧ Chase(bear, mouse)) → Likes(mouse, bear) ::: If the rabbit likes the bear and the bear chases the mouse then the mouse likes the bear.\n∀x ((Likes(x, squirrel) ∧ Need(x, mouse)) → ¬Chase(squirrel, bear)) ::: If someone likes the squirrel and they need the mouse then the squirrel does not chase the bear.\n∀x (Likes(x, bear) → Likes(bear, mouse)) ::: If someone likes the bear then the bear likes the mouse.\n(Likes(bear, squirrel) ∧ Big(squirrel)) → Chase(squirrel, mouse) ::: If the bear likes the squirrel and the squirrel is big then the squirrel chases the mouse.\n∀x ((Big(x) ∧ ¬Chase(x, bear)) → Chase(bear, squirrel)) ::: If someone is big and they do not chase the bear then the bear chases the squirrel.\n\nConclusion:\nLikes(rabbit, bear) ::: The rabbit likes the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1126",
    "context": "Anne is quiet. Bob is big. Bob is green. Gary is cold. Gary is rough. Gary is smart. Harry is smart. If someone is quiet then they are big. All green, quiet people are cold. If someone is green and big then they are quiet. If someone is round and quiet then they are cold. If someone is smart then they are round. Smart, cold people are round. If Anne is quiet and Anne is cold then Anne is smart. Big people are cold. Big, round people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not cold.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nPremises:\nQuiet(Anne) ::: Anne is quiet.\nBig(Bob) ::: Bob is big.\nGreen(Bob) ::: Bob is green.\nCold(Gary) ::: Gary is cold.\nRough(Gary) ::: Gary is rough.\nSmart(Gary) ::: Gary is smart.\nSmart(Harry) ::: Harry is smart.\n∀x (Quiet(x) → Big(x)) ::: If someone is quiet then they are big.\n∀x ((Green(x) ∧ Quiet(x)) → Cold(x)) ::: All green, quiet people are cold.\n∀x ((Green(x) ∧ Big(x)) → Quiet(x)) ::: If someone is green and big then they are quiet.\n∀x ((Round(x) ∧ Quiet(x)) → Cold(x)) ::: If someone is round and quiet then they are cold.\n∀x (Smart(x) → Round(x)) ::: If someone is smart then they are round.\n∀x ((Smart(x) ∧ Cold(x)) → Round(x)) ::: Smart, cold people are round.\n∀x ((Quiet(Anne) ∧ Cold(Anne)) → Smart(Anne)) ::: If Anne is quiet and Anne is cold then Anne is smart.\n∀x (Big(x) → Cold(x)) ::: Big people are cold.\n∀x ((Big(x) ∧ Round(x)) → Rough(x)) ::: Big, round people are rough.\nConclusion:\n¬Cold(Gary) ::: Gary is not cold."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-873",
    "context": "The bald eagle is green. The bald eagle likes the squirrel. The bald eagle likes the tiger. The bear is nice. The bear is round. The bear likes the bald eagle. The bear likes the tiger. The squirrel is young. The squirrel likes the bear. The squirrel needs the bald eagle. The squirrel sees the tiger. The tiger is cold. The tiger likes the bear. The tiger likes the squirrel. The tiger needs the bear. The tiger sees the bear. If something needs the bald eagle and the bald eagle likes the bear then the bald eagle needs the tiger. If something needs the squirrel then it needs the tiger. If something is green then it needs the squirrel. If something needs the bear and it needs the bald eagle then the bear likes the bald eagle. If something likes the bald eagle then it is young. If something likes the bear and it sees the bald eagle then it needs the bear. Round things are green. If something sees the squirrel and the squirrel likes the bear then it is cold. If something needs the bear and the bear is green then it is round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel does not need the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nLikes(x, y) ::: x likes y.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nCold(x) ::: x is cold.\nPremises:\nGreen(bald eagle) ::: The bald eagle is green.\nLikes(bald eagle, squirrel) ::: The bald eagle likes the squirrel.\nLikes(bald eagle, tiger) ::: The bald eagle likes the tiger.\nNice(bear) ::: The bear is nice.\nRound(bear) ::: The bear is round.\nLikes(bear, bald eagle) ::: The bear likes the bald eagle.\nLikes(bear, tiger) ::: The bear likes the tiger.\nYoung(squirrel) ::: The squirrel is young.\nLikes(squirrel, bear) ::: The squirrel likes the bear.\nNeeds(squirrel, bald eagle) ::: The squirrel needs the bald eagle.\nSees(squirrel, tiger) ::: The squirrel sees the tiger.\nCold(tiger) ::: The tiger is cold.\nLikes(tiger, bear) ::: The tiger likes the bear.\nLikes(tiger, squirrel) ::: The tiger likes the squirrel.\nNeeds(tiger, bear) ::: The tiger needs the bear.\nSees(tiger, bear) ::: The tiger sees the bear.\n∀x ((Needs(x, bald eagle) ∧ Likes(bald eagle, bear)) → Needs(bald eagle, tiger)) ::: If something needs the bald eagle and the bald eagle likes the bear then the bald eagle needs the tiger.\n∀x (Needs(x, squirrel) → Needs(x, tiger)) ::: If something needs the squirrel then it needs the tiger.\n∀x (Green(x) → Needs(x, squirrel)) ::: If something is green then it needs the squirrel.\n∀x ((Needs(x, bear) ∧ Needs(x, bald eagle)) → Likes(bear, bald eagle)) ::: If something needs the bear and it needs the bald eagle then the bear likes the bald eagle.\n∀x (Likes(x, bald eagle) → Young(x)) ::: If something likes the bald eagle then it is young.\n∀x ((Likes(x, bear) ∧ Sees(x, bald eagle)) → Needs(x, bear)) ::: If something likes the bear and it sees the bald eagle then it needs the bear.\n∀x ((Round(x) → Green(x)) ::: Round things are green.\n∀x ((Sees(x, squirrel) ∧ Likes(squirrel, bear)) → Cold(x)) ::: If something sees the squirrel and the squirrel likes the bear then it is cold.\n∀x ((Needs(x, bear) ∧ Green(bear)) → Round(x)) ::: If something needs the bear and the bear is green then it is round.\nConclusion:\n¬Needs(squirrel, squirrel) ::: The squirrel does not need the squirrel."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-177",
    "context": "Anne is furry. Anne is smart. Bob is kind. Bob is nice. Charlie is big. Charlie is green. Charlie is nice. Charlie is young. Gary is furry. Gary is kind. Gary is nice. Gary is young. If something is young then it is nice. If Anne is green then Anne is big. Smart things are nice. All smart, kind things are green. Young, big things are kind. Kind, smart things are furry. If something is nice and big then it is young. All nice things are kind. If Anne is young and Anne is big then Anne is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nYoung(x) ::: x is young.\nPremises:\nFurry(Anne) ::: Anne is furry.\nSmart(Anne) ::: Anne is smart.\nKind(Bob) ::: Bob is kind.\nNice(Bob) ::: Bob is nice.\nBig(Charlie) ::: Charlie is big.\nGreen(Charlie) ::: Charlie is green.\nNice(Charlie) ::: Charlie is nice.\nYoung(Charlie) ::: Charlie is young.\nFurry(Gary) ::: Gary is furry.\nKind(Gary) ::: Gary is kind.\nNice(Gary) ::: Gary is nice.\nYoung(Gary) ::: Gary is young.\n∀x (Young(x) → Nice(x)) ::: If something is young then it is nice.\n∀x ((x = Anne) ∧ Green(x) → Big(x)) ::: If Anne is green then Anne is big.\n∀x (Smart(x) → Nice(x)) ::: Smart things are nice.\n∀x ((Smart(x) ∧ Kind(x)) → Green(x)) ::: All smart, kind things are green.\n∀x ((Young(x) ∧ Big(x)) → Kind(x)) ::: Young, big things are kind.\n∀x ((Kind(x) ∧ Smart(x)) → Furry(x)) ::: Kind, smart things are furry.\n∀x ((Nice(x) ∧ Big(x)) → Young(x)) ::: If something is nice and big then it is young.\n∀x (Nice(x) → Kind(x)) ::: All nice things are kind.\n∀x ((x = Anne) ∧ Young(x) ∧ Big(x) → Nice(x)) ::: If Anne is young and Anne is big then Anne is nice.\nConclusion:\nYoung(Gary) ::: Gary is young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1246",
    "context": "Charlie is quiet. Dave is kind. Dave is quiet. Dave is red. Dave is smart. Fiona is furry. Fiona is red. Fiona is rough. Harry is red. Harry is rough. All smart, furry people are red. If someone is red then they are quiet. If someone is smart and rough then they are big. If someone is rough and furry then they are smart. If someone is big then they are furry. All smart people are rough. Quiet people are smart. All big people are quiet. If Fiona is furry then Fiona is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nRough(x) ::: x is rough.\nBig(x) ::: x is big.\nPremises:\nQuiet(Charlie) ::: Charlie is quiet.\nKind(Dave) ::: Dave is kind.\nQuiet(Dave) ::: Dave is quiet.\nRed(Dave) ::: Dave is red.\nSmart(Dave) ::: Dave is smart.\nFurry(Fiona) ::: Fiona is furry.\nRed(Fiona) ::: Fiona is red.\nRough(Fiona) ::: Fiona is rough.\nRed(Harry) ::: Harry is red.\nRough(Harry) ::: Harry is rough.\n∀x ((Smart(x) ∧ Furry(x)) → Red(x)) ::: All smart, furry people are red.\n∀x (Red(x) → Quiet(x)) ::: If someone is red then they are quiet.\n∀x ((Smart(x) ∧ Rough(x)) → Big(x)) ::: If someone is smart and rough then they are big.\n∀x ((Rough(x) ∧ Furry(x)) → Smart(x)) ::: If someone is rough and furry then they are smart.\n∀x (Big(x) → Furry(x)) ::: If someone is big then they are furry.\n∀x (Smart(x) → Rough(x)) ::: All smart people are rough.\n∀x (Quiet(x) → Smart(x)) ::: Quiet people are smart.\n∀x (Big(x) → Quiet(x)) ::: All big people are quiet.\n∀x (Furry(Fiona) → Red(Fiona)) ::: If Fiona is furry then Fiona is red.\nConclusion:\n¬Kind(Dave) ::: Dave is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1057",
    "context": "Bob is kind. Bob is quiet. Bob is white. Charlie is quiet. Erin is furry. Erin is quiet. Erin is white. Fiona is blue. Fiona is furry. Fiona is kind. Fiona is quiet. All kind, rough people are furry. Green, furry people are quiet. If someone is rough then they are kind. If someone is quiet and kind then they are rough. If someone is white then they are quiet. If someone is blue and white then they are kind. If someone is white then they are blue. If Charlie is quiet then Charlie is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nBlue(x) ::: x is blue.\nRough(x) ::: x is rough.\nPremises:\nKind(Bob) ::: Bob is kind.\nQuiet(Bob) ::: Bob is quiet.\nWhite(Bob) ::: Bob is white.\nQuiet(Charlie) ::: Charlie is quiet.\nFurry(Erin) ::: Erin is furry.\nQuiet(Erin) ::: Erin is quiet.\nWhite(Erin) ::: Erin is white.\nBlue(Fiona) ::: Fiona is blue.\nFurry(Fiona) ::: Fiona is furry.\nKind(Fiona) ::: Fiona is kind.\nQuiet(Fiona) ::: Fiona is quiet.\n∀x ((Kind(x) ∧ Rough(x)) → Furry(x)) ::: All kind, rough people are furry.\n∀x ((Green(x) ∧ Furry(x)) → Quiet(x)) ::: Green, furry people are quiet.\n∀x (Rough(x) → Kind(x)) ::: If someone is rough then they are kind.\n∀x ((Quiet(x) ∧ Kind(x)) → Rough(x)) ::: If someone is quiet and kind then they are rough.\n∀x (White(x) → Quiet(x)) ::: If someone is white then they are quiet.\n∀x ((Blue(x) ∧ White(x)) → Kind(x)) ::: If someone is blue and white then they are kind.\n∀x (White(x) → Blue(x)) ::: If someone is white then they are blue.\n∀x (Quiet(Charlie) → White(Charlie)) ::: If Charlie is quiet then Charlie is white.\nConclusion:\n¬Green(Erin) ::: Erin is not green."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-882",
    "context": "Bob is nice. Dave is big. Erin is furry. Erin is nice. Erin is rough. Harry is cold. Harry is white. All rough people are furry. If someone is rough and cold then they are white. If someone is nice then they are big. Furry, nice people are big. All big people are red. All nice, big people are rough. All furry, big people are cold. All cold, white people are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is white.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nWhite(x) ::: x is white.\nPremises:\nNice(Bob) ::: Bob is nice.\nBig(Dave) ::: Dave is big.\nFurry(Erin) ::: Erin is furry.\nNice(Erin) ::: Erin is nice.\nRough(Erin) ::: Erin is rough.\nCold(Harry) ::: Harry is cold.\nWhite(Harry) ::: Harry is white.\n∀x (Rough(x) → Furry(x)) ::: All rough people are furry.\n∀x ((Rough(x) ∧ Cold(x)) → White(x)) ::: If someone is rough and cold then they are white.\n∀x (Nice(x) → Big(x)) ::: If someone is nice then they are big.\n∀x ((Furry(x) ∧ Nice(x)) → Big(x)) ::: Furry, nice people are big.\n∀x (Big(x) → Red(x)) ::: All big people are red.\n∀x ((Nice(x) ∧ Big(x)) → Rough(x)) ::: All nice, big people are rough.\n∀x ((Furry(x) ∧ Big(x)) → Cold(x)) ::: All furry, big people are cold.\n∀x ((Cold(x) ∧ White(x)) → Rough(x)) ::: All cold, white people are rough.\nConclusion:\nWhite(Harry) ::: Harry is white."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-572",
    "context": "Charlie is green. Charlie is kind. Charlie is nice. Charlie is rough. Erin is kind. Erin is nice. Erin is quiet. Fiona is quiet. Fiona is rough. Harry is smart. All rough, green people are quiet. If someone is green and rough then they are nice. All kind, smart people are green. If Erin is green and Erin is blue then Erin is quiet. All quiet people are smart. All kind people are green. If someone is smart then they are kind. All rough, nice people are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is not quiet.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nPremises:\nGreen(Charlie) ::: Charlie is green.\nKind(Charlie) ::: Charlie is kind.\nNice(Charlie) ::: Charlie is nice.\nRough(Charlie) ::: Charlie is rough.\nKind(Erin) ::: Erin is kind.\nNice(Erin) ::: Erin is nice.\nQuiet(Erin) ::: Erin is quiet.\nQuiet(Fiona) ::: Fiona is quiet.\nRough(Fiona) ::: Fiona is rough.\nSmart(Harry) ::: Harry is smart.\n∀x ((Green(x) ∧ Rough(x)) → Quiet(x)) ::: All rough, green people are quiet.\n∀x ((Green(x) ∧ Rough(x)) → Nice(x)) ::: If someone is green and rough then they are nice.\n∀x ((Kind(x) ∧ Smart(x)) → Green(x)) ::: All kind, smart people are green.\n∀x ((Green(Erin) ∧ Blue(Erin)) → Quiet(Erin)) ::: If Erin is green and Erin is blue then Erin is quiet.\n∀x (Quiet(x) → Smart(x)) ::: All quiet people are smart.\n∀x (Kind(x) → Green(x)) ::: All kind people are green.\n∀x (Smart(x) → Kind(x)) ::: If someone is smart then they are kind.\n∀x ((Rough(x) ∧ Nice(x)) → Blue(x)) ::: All rough, nice people are blue.\nConclusion:\n¬Quiet(Fiona) ::: Fiona is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-109",
    "context": "Anne is rough. Anne is round. Dave is green. Dave is rough. Gary is furry. Gary is green. Gary is quiet. Gary is round. Harry is furry. Harry is green. Harry is round. Harry is smart. If Dave is round and Dave is kind then Dave is furry. Green, round people are kind. If someone is furry and rough then they are round. If someone is round and smart then they are quiet. If someone is rough then they are furry. If someone is kind and furry then they are smart. If Anne is green then Anne is smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not quiet.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nPremises:\nRough(Anne) ::: Anne is rough.\nRound(Anne) ::: Anne is round.\nGreen(Dave) ::: Dave is green.\nRough(Dave) ::: Dave is rough.\nFurry(Gary) ::: Gary is furry.\nGreen(Gary) ::: Gary is green.\nQuiet(Gary) ::: Gary is quiet.\nRound(Gary) ::: Gary is round.\nFurry(Harry) ::: Harry is furry.\nGreen(Harry) ::: Harry is green.\nRound(Harry) ::: Harry is round.\nSmart(Harry) ::: Harry is smart.\n∀x ((Round(x) ∧ Kind(x)) → Furry(x)) ::: If Dave is round and Dave is kind then Dave is furry.\n∀x ((Green(x) ∧ Round(x)) → Kind(x)) ::: Green, round people are kind.\n∀x ((Furry(x) ∧ Rough(x)) → Round(x)) ::: If someone is furry and rough then they are round.\n∀x ((Round(x) ∧ Smart(x)) → Quiet(x)) ::: If someone is round and smart then they are quiet.\n∀x (Rough(x) → Furry(x)) ::: If someone is rough then they are furry.\n∀x ((Kind(x) ∧ Furry(x)) → Smart(x)) ::: If someone is kind and furry then they are smart.\n∀x (Green(x) → Smart(x)) ::: If Anne is green then Anne is smart.\nConclusion:\n¬Quiet(Anne) ::: Anne is not quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-739",
    "context": "The bald eagle eats the dog. The bald eagle sees the dog. The dog is cold. The dog likes the squirrel. The dog sees the rabbit. The rabbit eats the dog. The rabbit eats the squirrel. The rabbit likes the dog. The rabbit sees the squirrel. The squirrel likes the bald eagle. If someone is cold and they like the bald eagle then they eat the rabbit. If someone likes the dog and they see the squirrel then the dog likes the bald eagle. If the bald eagle sees the dog and the bald eagle is cold then the bald eagle likes the dog. If someone likes the rabbit then they are young. If someone likes the dog and the dog likes the squirrel then they like the bald eagle. If the bald eagle is red and the bald eagle likes the squirrel then the squirrel eats the rabbit. If the dog likes the bald eagle and the bald eagle sees the dog then the bald eagle is cold. If someone sees the bald eagle then the bald eagle is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit likes the dog.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nSees(x, y) ::: x sees y.\nCold(x) ::: x is cold.\nLikes(x, y) ::: x likes y.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nPremises:\nEats(bald eagle, dog) ::: The bald eagle eats the dog.\nSees(bald eagle, dog) ::: The bald eagle sees the dog.\nCold(dog) ::: The dog is cold.\nLikes(dog, squirrel) ::: The dog likes the squirrel.\nSees(dog, rabbit) ::: The dog sees the rabbit.\nEats(rabbit, dog) ::: The rabbit eats the dog.\nEats(rabbit, squirrel) ::: The rabbit eats the squirrel.\nLikes(rabbit, dog) ::: The rabbit likes the dog.\nSees(rabbit, squirrel) ::: The rabbit sees the squirrel.\nLikes(squirrel, bald eagle) ::: The squirrel likes the bald eagle.\n∀x ((Cold(x) ∧ Likes(x, bald eagle)) → Eats(x, rabbit)) ::: If someone is cold and they like the bald eagle then they eat the rabbit.\n∀x ((Likes(x, dog) ∧ Sees(x, squirrel)) → Likes(dog, bald eagle)) ::: If someone likes the dog and they see the squirrel then the dog likes the bald eagle.\n∀x ((Sees(bald eagle, dog) ∧ Cold(bald eagle)) → Likes(bald eagle, dog)) ::: If the bald eagle sees the dog and the bald eagle is cold then the bald eagle likes the dog.\n∀x (Likes(x, rabbit) → Young(x)) ::: If someone likes the rabbit then they are young.\n∀x ((Likes(x, dog) ∧ Likes(dog, squirrel)) → Likes(x, bald eagle)) ::: If someone likes the dog and the dog likes the squirrel then they like the bald eagle.\n∀x ((Red(bald eagle) ∧ Likes(bald eagle, squirrel)) → Eats(squirrel, rabbit)) ::: If the bald eagle is red and the bald eagle likes the squirrel then the squirrel eats the rabbit.\n∀x ((Likes(dog, bald eagle) ∧ Sees(bald eagle, dog)) → Cold(bald eagle)) ::: If the dog likes the bald eagle and the bald eagle sees the dog then the bald eagle is cold.\n∀x (Sees(x, bald eagle) → Young(bald eagle)) ::: If someone sees the bald eagle then the bald eagle is young.\nConclusion:\nLikes(rabbit, dog) ::: The rabbit likes the dog."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-445",
    "context": "The dog does not chase the squirrel. The dog chases the tiger. The dog does not eat the squirrel. The dog is green. The dog is not red. The dog does not visit the rabbit. The rabbit is kind. The squirrel is green. The squirrel is red. The tiger chases the rabbit. The tiger eats the dog. If someone is kind then they eat the tiger. All kind people are round. If the rabbit chases the squirrel and the rabbit is green then the squirrel chases the rabbit. If someone is round then they chase the squirrel. If the dog is nice then the dog eats the squirrel. If someone is green then they eat the rabbit. If someone eats the tiger then they are green. If someone chases the rabbit then they are kind.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The squirrel is not red.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChase(x, y) ::: x chases y.\nEat(x, y) ::: x eats y.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nVisit(x, y) ::: x visits y.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nNice(x) ::: x is nice.\nPremises:\n¬Chase(Dog, Squirrel) ::: The dog does not chase the squirrel.\nChase(Dog, Tiger) ::: The dog chases the tiger.\n¬Eat(Dog, Squirrel) ::: The dog does not eat the squirrel.\nGreen(Dog) ::: The dog is green.\n¬Red(Dog) ::: The dog is not red.\n¬Visit(Dog, Rabbit) ::: The dog does not visit the rabbit.\nKind(Rabbit) ::: The rabbit is kind.\nGreen(Squirrel) ::: The squirrel is green.\nRed(Squirrel) ::: The squirrel is red.\nChase(Tiger, Rabbit) ::: The tiger chases the rabbit.\nEat(Tiger, Dog) ::: The tiger eats the dog.\n∀x ((Kind(x) → Eat(x, Tiger))) ::: If someone is kind then they eat the tiger.\n∀x (Kind(x) → Round(x)) ::: All kind people are round.\n∀x ((Chase(Rabbit, Squirrel) ∧ Green(Rabbit)) → Chase(Squirrel, Rabbit)) ::: If the rabbit chases the squirrel and the rabbit is green then the squirrel chases the rabbit.\n∀x (Round(x) → Chase(x, Squirrel)) ::: If someone is round then they chase the squirrel.\n∀x (Nice(x) → Eat(x, Squirrel)) ::: If the dog is nice then the dog eats the squirrel.\n∀x (Green(x) → Eat(x, Rabbit)) ::: If someone is green then they eat the rabbit.\n∀x (Eat(x, Tiger) → Green(x)) ::: If someone eats the tiger then they are green.\n∀x (Chase(x, Rabbit) → Kind(x)) ::: If someone chases the rabbit then they are kind.\nConclusion:\n¬Red(Squirrel) ::: The squirrel is not red."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-428",
    "context": "The cat is rough. The mouse likes the rabbit. The mouse sees the rabbit. The rabbit sees the squirrel. The squirrel eats the cat. The squirrel eats the rabbit. The squirrel is red. All red people are young. If the squirrel is green and the squirrel likes the rabbit then the rabbit eats the mouse. If someone sees the cat and they like the squirrel then the squirrel sees the cat. If someone is young then they see the mouse. If someone eats the rabbit and they see the mouse then the mouse is red. If someone is cold then they eat the squirrel. If someone sees the rabbit and the rabbit is green then they are young. If someone likes the squirrel and they are red then they are young. If someone sees the squirrel and the squirrel sees the mouse then they like the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not like the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nEats(x, y) ::: x eats y.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nCold(x) ::: x is cold.\nPremises:\nRough(Cat) ::: The cat is rough.\nLikes(Mouse, Rabbit) ::: The mouse likes the rabbit.\nSees(Mouse, Rabbit) ::: The mouse sees the rabbit.\nSees(Rabbit, Squirrel) ::: The rabbit sees the squirrel.\nEats(Squirrel, Cat) ::: The squirrel eats the cat.\nEats(Squirrel, Rabbit) ::: The squirrel eats the rabbit.\nRed(Squirrel) ::: The squirrel is red.\n∀x (Red(x) → Young(x)) ::: All red people are young.\n∀x ((Green(x) ∧ Likes(x, Rabbit)) → Eats(Rabbit, Mouse)) ::: If the squirrel is green and the squirrel likes the rabbit then the rabbit eats the mouse.\n∀x ((Sees(x, Cat) ∧ Likes(x, Squirrel)) → Sees(Squirrel, Cat)) ::: If someone sees the cat and they like the squirrel then the squirrel sees the cat.\n∀x (Young(x) → Sees(x, Mouse)) ::: If someone is young then they see the mouse.\n∀x ((Eats(x, Rabbit) ∧ Sees(x, Mouse)) → Red(Mouse)) ::: If someone eats the rabbit and they see the mouse then the mouse is red.\n∀x (Cold(x) → Eats(x, Squirrel)) ::: If someone is cold then they eat the squirrel.\n∀x ((Sees(x, Rabbit) ∧ Green(Rabbit)) → Young(x)) ::: If someone sees the rabbit and the rabbit is green then they are young.\n∀x ((Likes(x, Squirrel) ∧ Red(x)) → Young(x)) ::: If someone likes the squirrel and they are red then they are young.\n∀x ((Sees(x, Squirrel) ∧ Sees(Squirrel, Mouse)) → Likes(x, Rabbit)) ::: If someone sees the squirrel and the squirrel sees the mouse then they like the rabbit.\nConclusion:\n¬Likes(Cat, Rabbit) ::: The cat does not like the rabbit."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-517",
    "context": "Charlie is cold. Charlie is quiet. Charlie is young. Erin is cold. Erin is green. Erin is kind. Erin is round. Erin is young. Fiona is big. Fiona is round. Harry is green. Harry is kind. All cold, kind people are quiet. All quiet, big people are young. Green people are young. If Erin is young then Erin is cold. If someone is cold then they are big. All kind, round people are green. All big people are kind. Young people are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Fiona is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nQuiet(x) ::: x is quiet.\nYoung(x) ::: x is young.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nPremises:\nCold(Charlie) ::: Charlie is cold.\nQuiet(Charlie) ::: Charlie is quiet.\nYoung(Charlie) ::: Charlie is young.\nCold(Erin) ::: Erin is cold.\nGreen(Erin) ::: Erin is green.\nKind(Erin) ::: Erin is kind.\nRound(Erin) ::: Erin is round.\nYoung(Erin) ::: Erin is young.\nBig(Fiona) ::: Fiona is big.\nRound(Fiona) ::: Fiona is round.\nGreen(Harry) ::: Harry is green.\nKind(Harry) ::: Harry is kind.\n∀x ((Cold(x) ∧ Kind(x)) → Quiet(x)) ::: All cold, kind people are quiet.\n∀x ((Quiet(x) ∧ Big(x)) → Young(x)) ::: All quiet, big people are young.\n∀x (Green(x) → Young(x)) ::: Green people are young.\n∀x ((Young(x) → Cold(x)) ::: If Erin is young then Erin is cold.\n∀x ((Cold(x) → Big(x)) ::: If someone is cold then they are big.\n∀x ((Kind(x) ∧ Round(x)) → Green(x)) ::: All kind, round people are green.\n∀x (Big(x) → Kind(x)) ::: All big people are kind.\n∀x (Young(x) → Cold(x)) ::: Young people are cold.\nConclusion:\nRound(Fiona) ::: Fiona is round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-867",
    "context": "Anne is big. Anne is blue. Anne is furry. Anne is nice. Anne is quiet. Anne is rough. Anne is round. Charlie is blue. Charlie is not quiet. Charlie is round. Dave is furry. Dave is quiet. Gary is rough. Gary is round. All round things are rough. All round things are rough. If Dave is round then Dave is blue. If Dave is blue and Dave is round then Dave is furry. If something is blue then it is nice. Big things are nice. If something is nice and rough then it is big. Nice things are round. Quiet things are blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not rough.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nRound(x) ::: x is round.\nNotQuiet(x) ::: x is not quiet.\nPremises:\nBig(Anne) ::: Anne is big.\nBlue(Anne) ::: Anne is blue.\nFurry(Anne) ::: Anne is furry.\nNice(Anne) ::: Anne is nice.\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nRound(Anne) ::: Anne is round.\nBlue(Charlie) ::: Charlie is blue.\nNotQuiet(Charlie) ::: Charlie is not quiet.\nRound(Charlie) ::: Charlie is round.\nFurry(Dave) ::: Dave is furry.\nQuiet(Dave) ::: Dave is quiet.\nRough(Gary) ::: Gary is rough.\nRound(Gary) ::: Gary is round.\n∀x (Round(x) → Rough(x)) ::: All round things are rough.\n∀x (Round(x) → Rough(x)) ::: All round things are rough.\n∀x ((Dave(x) ∧ Round(x)) → Blue(x)) ::: If Dave is round then Dave is blue.\n∀x ((Dave(x) ∧ Blue(x) ∧ Round(x)) → Furry(x)) ::: If Dave is blue and Dave is round then Dave is furry.\n∀x (Blue(x) → Nice(x)) ::: If something is blue then it is nice.\n∀x (Big(x) → Nice(x)) ::: Big things are nice.\n∀x ((Nice(x) ∧ Rough(x)) → Big(x)) ::: If something is nice and rough then it is big.\n∀x (Nice(x) → Round(x)) ::: Nice things are round.\n∀x (Quiet(x) → Blue(x)) ::: Quiet things are blue.\nConclusion:\n¬Rough(Gary) ::: Gary is not rough."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-465",
    "context": "Anne is big. Anne is furry. Anne is green. Anne is not kind. Bob is furry. Bob is green. Bob is red. Bob is round. Erin is not blue. Erin is red. Gary is not furry. Big people are round. All blue people are not round. If someone is big and round then they are green. If Bob is not red then Bob is not big. If Bob is round then Bob is big. Red people are kind. If Gary is not blue then Gary is furry. If someone is kind and green then they are furry. Kind people are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not green.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nPremises:\nBig(Anne) ::: Anne is big.\nFurry(Anne) ::: Anne is furry.\nGreen(Anne) ::: Anne is green.\n¬Kind(Anne) ::: Anne is not kind.\nFurry(Bob) ::: Bob is furry.\nGreen(Bob) ::: Bob is green.\nRed(Bob) ::: Bob is red.\nRound(Bob) ::: Bob is round.\n¬Blue(Erin) ::: Erin is not blue.\nRed(Erin) ::: Erin is red.\n¬Furry(Gary) ::: Gary is not furry.\n∀x (Big(x) → Round(x)) ::: Big people are round.\n∀x (Blue(x) → ¬Round(x)) ::: All blue people are not round.\n∀x ((Big(x) ∧ Round(x)) → Green(x)) ::: If someone is big and round then they are green.\n∀x (¬Red(Bob) → ¬Big(Bob)) ::: If Bob is not red then Bob is not big.\n∀x (Round(x) → Big(x)) ::: If Bob is round then Bob is big.\n∀x (Red(x) → Kind(x)) ::: Red people are kind.\n∀x (¬Blue(Gary) → Furry(Gary)) ::: If Gary is not blue then Gary is furry.\n∀x ((Kind(x) ∧ Green(x)) → Furry(x)) ::: If someone is kind and green then they are furry.\n∀x (Kind(x) → Big(x)) ::: Kind people are big.\nConclusion:\n¬Green(Gary) ::: Gary is not green."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-76",
    "context": "The bear eats the cow. The bear is blue. The cow eats the squirrel. The cow is young. The cow visits the lion. The lion is red. The lion is young. The lion visits the cow. The squirrel sees the bear. The squirrel visits the bear. If something sees the cow and the cow eats the squirrel then the cow is red. If the cow eats the bear and the bear sees the cow then the bear is blue. If something is blue and it sees the squirrel then the squirrel is round. If something sees the squirrel then the squirrel eats the cow. If the lion sees the cow and the cow visits the squirrel then the cow eats the squirrel. If something is red then it eats the lion. If the bear visits the squirrel and the bear is round then the bear sees the cow. If something eats the lion then it sees the cow. If something is young and cold then it eats the cow.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow is young.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nEats(x, y) ::: x eats y.\nIsBlue(x) ::: x is blue.\nIsYoung(x) ::: x is young.\nVisits(x, y) ::: x visits y.\nIsRed(x) ::: x is red.\nIsRound(x) ::: x is round.\nSees(x, y) ::: x sees y.\nConclusion:\nIsYoung(Cow) ::: The cow is young.\nPremises:\nEats(Bear, Cow) ::: The bear eats the cow.\nIsBlue(Bear) ::: The bear is blue.\nEats(Cow, Squirrel) ::: The cow eats the squirrel.\nIsYoung(Cow) ::: The cow is young.\nVisits(Cow, Lion) ::: The cow visits the lion.\nIsRed(Lion) ::: The lion is red.\nIsYoung(Lion) ::: The lion is young.\nVisits(Lion, Cow) ::: The lion visits the cow.\nSees(Squirrel, Bear) ::: The squirrel sees the bear.\nVisits(Squirrel, Bear) ::: The squirrel visits the bear.\n∀x ((Sees(x, Cow) ∧ Eats(Cow, Squirrel)) → IsRed(Cow)) ::: If something sees the cow and the cow eats the squirrel then the cow is red.\n∀x ((Eats(Cow, Bear) ∧ Sees(Bear, Cow)) → IsBlue(Bear)) ::: If the cow eats the bear and the bear sees the cow then the bear is blue.\n∀x ((IsBlue(x) ∧ Sees(x, Squirrel)) → IsRound(Squirrel)) ::: If something is blue and it sees the squirrel then the squirrel is round.\n∀x (Sees(x, Squirrel) → Eats(Squirrel, Cow)) ::: If something sees the squirrel then the squirrel eats the cow.\n∀x ((Sees(Cow, Lion) ∧ Visits(Lion, Cow)) → Eats(Cow, Squirrel)) ::: If the lion sees the cow and the cow visits the squirrel then the cow eats the squirrel.\n∀x (IsRed(x) → Eats(x, Lion)) ::: If something is red then it eats the lion.\n∀x ((Visits(Bear, Squirrel) ∧ IsRound(Bear)) → Sees(Bear, Cow)) ::: If the bear visits the squirrel and the bear is round then the bear sees the cow.\n∀x (Eats(x, Lion) → Sees(x, Cow)) ::: If something eats the lion then it sees the cow.\n∀x ((IsYoung(x) ∧ IsCold(x)) → Eats(x, Cow)) ::: If something is young and cold then it eats the cow."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1028",
    "context": "Bob is blue. Bob is round. Erin is nice. Erin is round. Erin is smart. Gary is not young. Harry is blue. Harry is furry. Harry is nice. Harry is round. All smart things are furry. Young, nice things are furry. If something is furry then it is young. Round, nice things are not quiet. All round things are smart. If Bob is young then Bob is nice. If something is smart and not young then it is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nRound(x) ::: x is round.\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nFurry(x) ::: x is furry.\nQuiet(x) ::: x is quiet.\nPremises:\nBlue(Bob) ::: Bob is blue.\nRound(Bob) ::: Bob is round.\nNice(Erin) ::: Erin is nice.\nRound(Erin) ::: Erin is round.\nSmart(Erin) ::: Erin is smart.\n¬Young(Gary) ::: Gary is not young.\nBlue(Harry) ::: Harry is blue.\nFurry(Harry) ::: Harry is furry.\nNice(Harry) ::: Harry is nice.\nRound(Harry) ::: Harry is round.\n∀x (Smart(x) → Furry(x)) ::: All smart things are furry.\n∀x ((Young(x) ∧ Nice(x)) → Furry(x)) ::: Young, nice things are furry.\n∀x (Furry(x) → Young(x)) ::: If something is furry then it is young.\n∀x ((Round(x) ∧ Nice(x)) → ¬Quiet(x)) ::: Round, nice things are not quiet.\n∀x (Round(x) → Smart(x)) ::: All round things are smart.\n∀x ((Blue(Bob) → Nice(Bob))) ::: If Bob is young then Bob is nice.\n∀x ((Smart(x) ∧ ¬Young(x)) → Blue(x)) ::: If something is smart and not young then it is blue.\nConclusion:\n¬Smart(Erin) ::: Erin is not smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-983",
    "context": "Charlie is blue. Charlie is quiet. Dave is blue. Dave is cold. Dave is young. Erin is blue. Erin is quiet. Erin is white. Erin is young. Gary is cold. Gary is quiet. Gary is young. All quiet things are furry. If Charlie is cold then Charlie is young. White things are cold. All young things are nice. If Gary is nice then Gary is young. If something is young then it is nice. If something is furry and blue then it is white. If something is young and furry then it is nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is not furry.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nQuiet(x) ::: x is quiet.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nPremises:\nBlue(Charlie) ::: Charlie is blue.\nQuiet(Charlie) ::: Charlie is quiet.\nBlue(Dave) ::: Dave is blue.\nCold(Dave) ::: Dave is cold.\nYoung(Dave) ::: Dave is young.\nBlue(Erin) ::: Erin is blue.\nQuiet(Erin) ::: Erin is quiet.\nWhite(Erin) ::: Erin is white.\nYoung(Erin) ::: Erin is young.\nCold(Gary) ::: Gary is cold.\nQuiet(Gary) ::: Gary is quiet.\nYoung(Gary) ::: Gary is young.\n∀x (Quiet(x) → Furry(x)) ::: All quiet things are furry.\n∀x ((Blue(Charlie) ∧ Cold(Charlie)) → Young(Charlie)) ::: If Charlie is cold then Charlie is young.\n∀x (White(x) → Cold(x)) ::: White things are cold.\n∀x (Young(x) → Nice(x)) ::: All young things are nice.\n∀x ((Gary is nice) → Young(Gary)) ::: If Gary is nice then Gary is young.\n∀x ((Young(x)) → Nice(x)) ::: If something is young then it is nice.\n∀x ((Furry(x) ∧ Blue(x)) → White(x)) ::: If something is furry and blue then it is white.\n∀x ((Young(x) ∧ Furry(x)) → Nice(x)) ::: If something is young and furry then it is nice.\nConclusion:\n¬Furry(Dave) ::: Dave is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1027",
    "context": "Dave is quiet. Erin is not blue. Erin is green. Erin is quiet. Fiona is rough. Fiona is young. Gary is blue. If something is quiet then it is red. All young things are red. If something is blue then it is rough. All green things are quiet. Kind, red things are not quiet. If Gary is red and Gary is quiet then Gary is young. If something is blue and rough then it is green. If something is blue and kind then it is not green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Dave is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nBlue(x) ::: x is blue.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nPremises:\nQuiet(Dave) ::: Dave is quiet.\n¬Blue(Erin) ::: Erin is not blue.\nGreen(Erin) ::: Erin is green.\nQuiet(Erin) ::: Erin is quiet.\nRough(Fiona) ::: Fiona is rough.\nYoung(Fiona) ::: Fiona is young.\nBlue(Gary) ::: Gary is blue.\n∀x (Quiet(x) → Red(x)) ::: If something is quiet then it is red.\n∀x (Young(x) → Red(x)) ::: All young things are red.\n∀x (Blue(x) → Rough(x)) ::: If something is blue then it is rough.\n∀x (Green(x) → Quiet(x)) ::: All green things are quiet.\n∀x ((Kind(x) ∧ Red(x)) → ¬Quiet(x)) ::: Kind, red things are not quiet.\n∀x ((Red(Gary) ∧ Quiet(Gary)) → Young(Gary)) ::: If Gary is red and quiet then Gary is young.\n∀x ((Blue(x) ∧ Rough(x)) → Green(x)) ::: If something is blue and rough then it is green.\n∀x ((Blue(x) ∧ Kind(x)) → ¬Green(x)) ::: If something is blue and kind then it is not green.\nConclusion:\nQuiet(Dave) ::: Dave is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-785",
    "context": "The bald eagle is round. The bear needs the bald eagle. The cat eats the bear. The cat does not eat the lion. The cat is round. The lion needs the bear. The lion sees the bald eagle. If something is round then it sees the bald eagle. If something is red and not young then it needs the lion. If something sees the bald eagle then it needs the lion. If something needs the lion and it needs the bear then the bear is round. If the lion is round and the lion does not eat the cat then the cat eats the bald eagle. If something needs the lion and the lion sees the bald eagle then it is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cat does not eat the bear.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRound(x) ::: x is round.\nNeeds(x, y) ::: x needs y.\nEats(x, y) ::: x eats y.\nRed(x) ::: x is red.\nYoung(x) ::: x is young.\nSees(x, y) ::: x sees y.\nPremises:\nRound(BaldEagle) ::: The bald eagle is round.\nNeeds(Bear, BaldEagle) ::: The bear needs the bald eagle.\nEats(Cat, Bear) ::: The cat eats the bear.\n¬Eats(Cat, Lion) ::: The cat does not eat the lion.\nRound(Cat) ::: The cat is round.\nNeeds(Lion, Bear) ::: The lion needs the bear.\nSees(Lion, BaldEagle) ::: The lion sees the bald eagle.\n∀x (Round(x) → Sees(x, BaldEagle)) ::: If something is round then it sees the bald eagle.\n∀x ((Red(x) ∧ ¬Young(x)) → Needs(x, Lion)) ::: If something is red and not young then it needs the lion.\n∀x (Sees(x, BaldEagle) → Needs(x, Lion)) ::: If something sees the bald eagle then it needs the lion.\n∀x ((Needs(x, Lion) ∧ Needs(x, Bear)) → Round(Bear)) ::: If something needs the lion and it needs the bear then the bear is round.\n∀x ((Round(Lion) ∧ ¬Eats(Lion, Cat)) → Eats(Cat, BaldEagle)) ::: If the lion is round and the lion does not eat the cat then the cat eats the bald eagle.\n∀x ((Needs(x, Lion) ∧ Sees(x, BaldEagle)) → Red(x)) ::: If something needs the lion and the lion sees the bald eagle then it is red.\nConclusion:\n¬Eats(Cat, Bear) ::: The cat does not eat the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-940",
    "context": "The bald eagle is kind. The bald eagle is not red. The bald eagle likes the dog. The dog needs the lion. The lion does not need the bald eagle. The mouse likes the dog. The mouse does not see the dog. If someone needs the mouse then the mouse does not see the bald eagle. If someone needs the dog then the dog needs the lion. If someone is rough then they see the mouse. If someone sees the mouse then the mouse is kind. If someone needs the lion then they do not see the bald eagle. If someone sees the dog then they need the mouse. All kind people are rough. If someone sees the mouse then they like the lion.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The dog does not need the mouse.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nRed(x) ::: x is red.\nLikes(x, y) ::: x likes y.\nNeeds(x, y) ::: x needs y.\nSee(x, y) ::: x sees y.\nRough(x) ::: x is rough.\nPremises:\nKind(bald eagle) ::: The bald eagle is kind.\n¬Red(bald eagle) ::: The bald eagle is not red.\nLikes(bald eagle, dog) ::: The bald eagle likes the dog.\nNeeds(dog, lion) ::: The dog needs the lion.\n¬Needs(lion, bald eagle) ::: The lion does not need the bald eagle.\nLikes(mouse, dog) ::: The mouse likes the dog.\n¬See(mouse, dog) ::: The mouse does not see the dog.\n∀x (Needs(x, mouse) → ¬See(mouse, bald eagle)) ::: If someone needs the mouse then the mouse does not see the bald eagle.\n∀x (Needs(x, dog) → Needs(dog, lion)) ::: If someone needs the dog then the dog needs the lion.\n∀x (Rough(x) → See(x, mouse)) ::: If someone is rough then they see the mouse.\n∀x (See(x, mouse) → Kind(mouse)) ::: If someone sees the mouse then the mouse is kind.\n∀x (Needs(x, lion) → ¬See(x, bald eagle)) ::: If someone needs the lion then they do not see the bald eagle.\n∀x (See(x, dog) → Needs(x, mouse)) ::: If someone sees the dog then they need the mouse.\n∀x (Kind(x) → Rough(x)) ::: All kind people are rough.\n∀x (See(x, mouse) → Likes(x, lion)) ::: If someone sees the mouse then they like the lion.\nConclusion:\n¬Needs(dog, mouse) ::: The dog does not need the mouse."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1342",
    "context": "Bob is kind. Charlie is green. Charlie is kind. Charlie is round. Gary is cold. Gary is green. Gary is rough. Gary is white. Harry is cold. Harry is furry. Harry is kind. Harry is white. If someone is rough and green then they are white. Furry, rough people are green. Rough people are furry. Kind people are round. If someone is round then they are rough. If Bob is white then Bob is cold. White people are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is cold.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nRound(x) ::: x is round.\nCold(x) ::: x is cold.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nFurry(x) ::: x is furry.\nPremises:\nKind(Bob) ::: Bob is kind.\nGreen(Charlie) ::: Charlie is green.\nKind(Charlie) ::: Charlie is kind.\nRound(Charlie) ::: Charlie is round.\nCold(Gary) ::: Gary is cold.\nGreen(Gary) ::: Gary is green.\nRough(Gary) ::: Gary is rough.\nWhite(Gary) ::: Gary is white.\nCold(Harry) ::: Harry is cold.\nFurry(Harry) ::: Harry is furry.\nKind(Harry) ::: Harry is kind.\n∀x ((Rough(x) ∧ Green(x)) → White(x)) ::: If someone is rough and green then they are white.\n∀x ((Furry(x) ∧ Rough(x)) → Green(x)) ::: Furry, rough people are green.\n∀x (Rough(x) → Furry(x)) ::: Rough people are furry.\n∀x (Kind(x) → Round(x)) ::: Kind people are round.\n∀x (Round(x) → Rough(x)) ::: If someone is round then they are rough.\n∀x ((White(x) → Cold(x)) ::: If Bob is white then Bob is cold.\n∀x (White(x) → Furry(x)) ::: White people are furry.\nConclusion:\nCold(Harry) ::: Harry is cold."
    ]
  },
  {
    "id": "ProofWriter_RelNeg-OWA-D5-610",
    "context": "The cat is kind. The cat does not see the mouse. The cat visits the dog. The cat visits the rabbit. The dog is big. The dog visits the mouse. The mouse chases the cat. The mouse is not blue. The mouse does not see the cat. The rabbit is big. The rabbit visits the cat. The rabbit visits the dog. If someone is big and they chase the dog then they visit the rabbit. If someone is cold then they are not big. If someone is blue then they chase the dog. If someone chases the rabbit and the rabbit is cold then they visit the dog. If someone chases the dog and the dog chases the cat then the dog chases the rabbit. If someone is cold then they see the dog. If someone visits the dog and the dog chases the rabbit then the dog sees the mouse. If someone visits the dog and they are big then they are blue. If someone chases the dog then the dog is blue.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit does not visit the dog.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nSee(x, y) ::: x sees y.\nVisit(x, y) ::: x visits y.\nBig(x) ::: x is big.\nChase(x, y) ::: x chases y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nPremises:\nKind(cat) ::: The cat is kind.\n¬See(cat, mouse) ::: The cat does not see the mouse.\nVisit(cat, dog) ::: The cat visits the dog.\nVisit(cat, rabbit) ::: The cat visits the rabbit.\nBig(dog) ::: The dog is big.\nVisit(dog, mouse) ::: The dog visits the mouse.\nChase(mouse, cat) ::: The mouse chases the cat.\n¬Blue(mouse) ::: The mouse is not blue.\n¬See(mouse, cat) ::: The mouse does not see the cat.\nBig(rabbit) ::: The rabbit is big.\nVisit(rabbit, cat) ::: The rabbit visits the cat.\nVisit(rabbit, dog) ::: The rabbit visits the dog.\n∀x ((Big(x) ∧ Chase(x, dog)) → Visit(x, rabbit)) ::: If someone is big and they chase the dog then they visit the rabbit.\n∀x (Cold(x) → ¬Big(x)) ::: If someone is cold then they are not big.\n∀x (Blue(x) → Chase(x, dog)) ::: If someone is blue then they chase the dog.\n∀x ((Chase(x, rabbit) ∧ Cold(rabbit)) → Visit(x, dog)) ::: If someone chases the rabbit and the rabbit is cold then they visit the dog.\n∀x ((Chase(x, dog) ∧ Chase(dog, cat)) → Chase(dog, rabbit)) ::: If someone chases the dog and the dog chases the cat then the dog chases the rabbit.\n∀x (Cold(x) → See(x, dog)) ::: If someone is cold then they see the dog.\n∀x ((Visit(x, dog) ∧ Chase(dog, rabbit)) → See(dog, mouse)) ::: If someone visits the dog and the dog chases the rabbit then the dog sees the mouse.\n∀x ((Visit(x, dog) ∧ Big(x)) → Blue(x)) ::: If someone visits the dog and they are big then they are blue.\n∀x (Chase(x, dog) → Blue(dog)) ::: If someone chases the dog then the dog is blue.\nConclusion:\n¬Visit(rabbit, dog) ::: The rabbit does not visit the dog."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-459",
    "context": "Bob is not cold. Bob is furry. Bob is round. Charlie is big. Charlie is furry. Charlie is quiet. Charlie is red. Charlie is not white. Erin is big. Gary is big. Gary is quiet. If someone is red and cold then they are furry. All furry people are round. If Charlie is furry then Charlie is round. Big people are red. Round people are quiet. If someone is red then they are cold.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Bob is not red.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nRed(x) ::: x is red.\nWhite(x) ::: x is white.\nPremises:\n¬Cold(Bob) ::: Bob is not cold.\nFurry(Bob) ::: Bob is furry.\nRound(Bob) ::: Bob is round.\nBig(Charlie) ::: Charlie is big.\nFurry(Charlie) ::: Charlie is furry.\nQuiet(Charlie) ::: Charlie is quiet.\nRed(Charlie) ::: Charlie is red.\n¬White(Charlie) ::: Charlie is not white.\nBig(Erin) ::: Erin is big.\nBig(Gary) ::: Gary is big.\nQuiet(Gary) ::: Gary is quiet.\n∀x ((Red(x) ∧ Cold(x)) → Furry(x)) ::: If someone is red and cold then they are furry.\n∀x (Furry(x) → Round(x)) ::: All furry people are round.\n∀x (Furry(Charlie) → Round(Charlie)) ::: If Charlie is furry then Charlie is round.\n∀x (Big(x) → Red(x)) ::: Big people are red.\n∀x (Round(x) → Quiet(x)) ::: Round people are quiet.\n∀x (Red(x) → Cold(x)) ::: If someone is red then they are cold.\nConclusion:\n¬Red(Bob) ::: Bob is not red."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-107",
    "context": "Charlie is cold. Charlie is furry. Charlie is red. Charlie is rough. Charlie is smart. Dave is furry. Dave is rough. Fiona is kind. Fiona is young. Harry is red. If something is rough then it is cold. All smart things are red. All kind things are rough. All red, kind things are rough. If Dave is cold and Dave is young then Dave is kind. Cold, young things are furry. Cold, furry things are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is furry.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nPremises:\nCold(Charlie) ::: Charlie is cold.\nFurry(Charlie) ::: Charlie is furry.\nRed(Charlie) ::: Charlie is red.\nRough(Charlie) ::: Charlie is rough.\nSmart(Charlie) ::: Charlie is smart.\nFurry(Dave) ::: Dave is furry.\nRough(Dave) ::: Dave is rough.\nKind(Fiona) ::: Fiona is kind.\nYoung(Fiona) ::: Fiona is young.\nRed(Harry) ::: Harry is red.\n∀x (Rough(x) → Cold(x)) ::: If something is rough then it is cold.\n∀x (Smart(x) → Red(x)) ::: All smart things are red.\n∀x (Kind(x) → Rough(x)) ::: All kind things are rough.\n∀x ((Red(x) ∧ Kind(x)) → Rough(x)) ::: All red, kind things are rough.\n∀x ((Dave is cold) ∧ (Dave is young) → Kind(Dave)) ::: If Dave is cold and Dave is young then Dave is kind.\n∀x ((Cold(x) ∧ Young(x)) → Furry(x)) ::: Cold, young things are furry.\n∀x ((Cold(x) ∧ Furry(x)) → Smart(x)) ::: Cold, furry things are smart.\nConclusion:\nFurry(Charlie) ::: Charlie is furry."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-500",
    "context": "Anne is blue. Anne is cold. Anne is furry. Anne is red. Anne is round. Anne is white. Bob is big. Dave is round. Dave is white. Harry is big. Harry is red. Harry is white. All blue things are white. If something is cold then it is red. Furry, blue things are red. If something is round and big then it is blue. If Anne is cold and Anne is red then Anne is big. All red things are round. If something is big then it is cold. If something is cold and furry then it is white.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not blue.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nRed(x) ::: x is red.\nRound(x) ::: x is round.\nWhite(x) ::: x is white.\nBig(x) ::: x is big.\nPremises:\nBlue(Anne) ::: Anne is blue.\nCold(Anne) ::: Anne is cold.\nFurry(Anne) ::: Anne is furry.\nRed(Anne) ::: Anne is red.\nRound(Anne) ::: Anne is round.\nWhite(Anne) ::: Anne is white.\nBig(Bob) ::: Bob is big.\nRound(Dave) ::: Dave is round.\nWhite(Dave) ::: Dave is white.\nBig(Harry) ::: Harry is big.\nRed(Harry) ::: Harry is red.\nWhite(Harry) ::: Harry is white.\n∀x (Blue(x) → White(x)) ::: All blue things are white.\n∀x (Cold(x) → Red(x)) ::: If something is cold then it is red.\n∀x ((Furry(x) ∧ Blue(x)) → Red(x)) ::: Furry, blue things are red.\n∀x ((Round(x) ∧ Big(x)) → Blue(x)) ::: If something is round and big then it is blue.\n∀x ((Cold(x) ∧ Red(x)) → Big(x)) ::: If Anne is cold and Anne is red then Anne is big.\n∀x (Red(x) → Round(x)) ::: All red things are round.\n∀x (Big(x) → Cold(x)) ::: If something is big then it is cold.\n∀x ((Cold(x) ∧ Furry(x)) → White(x)) ::: If something is cold and furry then it is white.\nConclusion:\n¬Blue(Anne) ::: Anne is not blue."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-683",
    "context": "The bear chases the cat. The bear chases the cow. The bear likes the cat. The bear likes the lion. The bear visits the cat. The cat is red. The cat visits the bear. The cat visits the cow. The cow visits the lion. The lion chases the cat. The lion is nice. If something likes the bear and it visits the lion then it is green. If something likes the lion and the lion is nice then it chases the lion. If something is green and it chases the cow then the cow is cold. Cold things are green. If something chases the lion and the lion chases the cat then it is cold. If the lion likes the cat and the cat chases the lion then the lion is nice. If something likes the cat then it likes the lion. If something likes the cat then it likes the lion. If something chases the lion then the lion visits the bear.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The lion does not like the lion.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nGreen(x) ::: x is green.\nCold(x) ::: x is cold.\nPremises:\nChases(bear, cat) ::: The bear chases the cat.\nChases(bear, cow) ::: The bear chases the cow.\nLikes(bear, cat) ::: The bear likes the cat.\nLikes(bear, lion) ::: The bear likes the lion.\nVisits(bear, cat) ::: The bear visits the cat.\nRed(cat) ::: The cat is red.\nVisits(cat, bear) ::: The cat visits the bear.\nVisits(cat, cow) ::: The cat visits the cow.\nVisits(cow, lion) ::: The cow visits the lion.\nChases(lion, cat) ::: The lion chases the cat.\nNice(lion) ::: The lion is nice.\n∀x ((Likes(x, bear) ∧ Visits(x, lion)) → Green(x)) ::: If something likes the bear and it visits the lion then it is green.\n∀x ((Likes(x, lion) ∧ Nice(lion)) → Chases(x, lion)) ::: If something likes the lion and the lion is nice then it chases the lion.\n∀x ((Green(x) ∧ Chases(x, cow)) → Cold(cow)) ::: If something is green and it chases the cow then the cow is cold.\n∀x (Cold(x) → Green(x)) ::: Cold things are green.\n∀x ((Chases(x, lion) ∧ Chases(lion, cat)) → Cold(x)) ::: If something chases the lion and the lion chases the cat then it is cold.\n∀x ((Likes(lion, cat) ∧ Chases(cat, lion)) → Nice(lion)) ::: If the lion likes the cat and the cat chases the lion then the lion is nice.\n∀x (Likes(x, cat) → Likes(x, lion)) ::: If something likes the cat then it likes the lion.\n∀x (Chases(x, lion) → Visits(lion, bear)) ::: If something chases the lion then the lion visits the bear.\nConclusion:\n¬Likes(lion, lion) ::: The lion does not like the lion."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1110",
    "context": "Bob is blue. Bob is cold. Bob is nice. Bob is round. Bob is smart. Bob is white. Dave is cold. Dave is white. Erin is blue. Erin is cold. Erin is nice. Erin is round. Erin is smart. Fiona is blue. Fiona is nice. Fiona is smart. White people are nice. All rough people are smart. If someone is blue and rough then they are smart. All nice, rough people are smart. If someone is nice and round then they are rough. White, smart people are blue. All blue people are nice. Nice people are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is round.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nRound(x) ::: x is round.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nRough(x) ::: x is rough.\nPremises:\nBlue(Bob) ::: Bob is blue.\nCold(Bob) ::: Bob is cold.\nNice(Bob) ::: Bob is nice.\nRound(Bob) ::: Bob is round.\nSmart(Bob) ::: Bob is smart.\nWhite(Bob) ::: Bob is white.\nCold(Dave) ::: Dave is cold.\nWhite(Dave) ::: Dave is white.\nBlue(Erin) ::: Erin is blue.\nCold(Erin) ::: Erin is cold.\nNice(Erin) ::: Erin is nice.\nRound(Erin) ::: Erin is round.\nSmart(Erin) ::: Erin is smart.\nBlue(Fiona) ::: Fiona is blue.\nNice(Fiona) ::: Fiona is nice.\nSmart(Fiona) ::: Fiona is smart.\n∀x (White(x) → Nice(x)) ::: White people are nice.\n∀x (Rough(x) → Smart(x)) ::: All rough people are smart.\n∀x ((Blue(x) ∧ Rough(x)) → Smart(x)) ::: If someone is blue and rough then they are smart.\n∀x ((Nice(x) ∧ Rough(x)) → Smart(x)) ::: All nice, rough people are smart.\n∀x ((Nice(x) ∧ Round(x)) → Rough(x)) ::: If someone is nice and round then they are rough.\n∀x ((White(x) ∧ Smart(x)) → Blue(x)) ::: White, smart people are blue.\n∀x (Blue(x) → Nice(x)) ::: All blue people are nice.\n∀x (Nice(x) → Round(x)) ::: Nice people are round.\nConclusion:\nRound(Erin) ::: Erin is round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-1066",
    "context": "Bob is big. Charlie is furry. Charlie is kind. Charlie is smart. Fiona is furry. Fiona is young. Gary is smart. Big, smart things are kind. If something is red and not smart then it is kind. Smart things are furry. If something is red and big then it is furry. If Charlie is red then Charlie is kind. If something is kind then it is young. Young things are not red. If something is furry and smart then it is big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not furry.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nPremises:\nBig(Bob) ::: Bob is big.\nFurry(Charlie) ::: Charlie is furry.\nKind(Charlie) ::: Charlie is kind.\nSmart(Charlie) ::: Charlie is smart.\nFurry(Fiona) ::: Fiona is furry.\nYoung(Fiona) ::: Fiona is young.\nSmart(Gary) ::: Gary is smart.\n∀x ((Big(x) ∧ Smart(x)) → Kind(x)) ::: Big, smart things are kind.\n∀x ((Red(x) ∧ ¬Smart(x)) → Kind(x)) ::: If something is red and not smart then it is kind.\n∀x (Smart(x) → Furry(x)) ::: Smart things are furry.\n∀x ((Red(x) ∧ Big(x)) → Furry(x)) ::: If something is red and big then it is furry.\n∀x (Kind(Charlie) → Young(x)) ::: If something is kind then it is young.\n∀x (Young(x) → ¬Red(x)) ::: Young things are not red.\n∀x ((Furry(x) ∧ Smart(x)) → Big(x)) ::: If something is furry and smart then it is big.\nConclusion:\n¬Furry(Charlie) ::: Charlie is not furry."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-488",
    "context": "Anne is big. Bob is big. Bob is furry. Bob is nice. Bob is rough. Bob is white. Bob is young. Erin is blue. Harry is nice. Harry is rough. Harry is white. Harry is young. If something is big then it is furry. If Erin is furry and Erin is white then Erin is blue. If something is furry and big then it is nice. If something is big then it is furry. If something is white and nice then it is rough. Furry, nice things are young. Furry, young things are white. All big, blue things are white. Young, blue things are nice.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not nice.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nFurry(x) ::: x is furry.\nNice(x) ::: x is nice.\nRough(x) ::: x is rough.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nPremises:\nBig(Anne) ::: Anne is big.\nBig(Bob) ::: Bob is big.\nFurry(Bob) ::: Bob is furry.\nNice(Bob) ::: Bob is nice.\nRough(Bob) ::: Bob is rough.\nWhite(Bob) ::: Bob is white.\nYoung(Bob) ::: Bob is young.\nBlue(Erin) ::: Erin is blue.\nNice(Harry) ::: Harry is nice.\nRough(Harry) ::: Harry is rough.\nWhite(Harry) ::: Harry is white.\nYoung(Harry) ::: Harry is young.\n∀x (Big(x) → Furry(x)) ::: If something is big then it is furry.\n∀x ((Furry(x) ∧ White(x)) → Blue(x)) ::: If Erin is furry and Erin is white then Erin is blue.\n∀x ((Furry(x) ∧ Big(x)) → Nice(x)) ::: If something is furry and big then it is nice.\n∀x (White(x) → Rough(x)) ::: If something is white and nice then it is rough.\n∀x ((Furry(x) ∧ Nice(x)) → Young(x)) ::: Furry, nice things are young.\n∀x ((Furry(x) ∧ Young(x)) → White(x)) ::: Furry, young things are white.\n∀x ((Big(x) ∧ Blue(x)) → White(x)) ::: All big, blue things are white.\n∀x ((Young(x) ∧ Blue(x)) → Nice(x)) ::: Young, blue things are nice.\nConclusion:\n¬Nice(Erin) ::: Erin is not nice."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-960",
    "context": "Anne is quiet. Anne is not round. Anne is young. Charlie is not quiet. Charlie is young. Dave is blue. Dave is not smart. Harry is blue. Harry is kind. Harry is young. All blue, kind things are rough. Rough, kind things are quiet. Round things are kind. If Anne is round then Anne is kind. If Anne is smart and Anne is quiet then Anne is not round. All blue things are round. If something is kind and not round then it is young. If something is quiet and not blue then it is young. Quiet things are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nKind(x) ::: x is kind.\nRough(x) ::: x is rough.\nPremises:\nQuiet(Anne) ::: Anne is quiet.\n¬Round(Anne) ::: Anne is not round.\nYoung(Anne) ::: Anne is young.\n¬Quiet(Charlie) ::: Charlie is not quiet.\nYoung(Charlie) ::: Charlie is young.\nBlue(Dave) ::: Dave is blue.\n¬Smart(Dave) ::: Dave is not smart.\nBlue(Harry) ::: Harry is blue.\nKind(Harry) ::: Harry is kind.\nYoung(Harry) ::: Harry is young.\n∀x ((Blue(x) ∧ Kind(x)) → Rough(x)) ::: All blue, kind things are rough.\n∀x ((Rough(x) ∧ Kind(x)) → Quiet(x)) ::: Rough, kind things are quiet.\n∀x (Round(x) → Kind(x)) ::: Round things are kind.\n∀x (Quiet(Anne) → Kind(Anne)) ::: If Anne is quiet then Anne is kind.\n∀x ((Smart(x) ∧ Quiet(x)) → ¬Round(x)) ::: If someone is smart and quiet then they are not round.\n∀x (Blue(x) → Round(x)) ::: All blue things are round.\n∀x ((Kind(x) ∧ ¬Round(x)) → Young(x)) ::: If something is kind and not round then it is young.\n∀x ((Quiet(x) ∧ ¬Blue(x)) → Young(x)) ::: If something is quiet and not blue then it is young.\n∀x (Quiet(x) → Young(x)) ::: Quiet things are young.\nConclusion:\n¬Quiet(Charlie) ::: Charlie is not quiet."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1331",
    "context": "Bob is big. Dave is big. Dave is quiet. Dave is round. Fiona is round. Harry is kind. Harry is smart. Big people are kind. All kind, big people are round. If someone is smart then they are kind. If someone is green and smart then they are furry. If someone is quiet and furry then they are smart. Furry, big people are quiet. All smart, kind people are big. If someone is furry then they are big. Round people are furry.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Harry is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nRound(x) ::: x is round.\nKind(x) ::: x is kind.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nPremises:\nBig(Bob) ::: Bob is big.\nBig(Dave) ::: Dave is big.\nQuiet(Dave) ::: Dave is quiet.\nRound(Dave) ::: Dave is round.\nRound(Fiona) ::: Fiona is round.\nKind(Harry) ::: Harry is kind.\nSmart(Harry) ::: Harry is smart.\n∀x (Big(x) → Kind(x)) ::: Big people are kind.\n∀x ((Kind(x) ∧ Big(x)) → Round(x)) ::: All kind, big people are round.\n∀x (Smart(x) → Kind(x)) ::: If someone is smart then they are kind.\n∀x ((Green(x) ∧ Smart(x)) → Furry(x)) ::: If someone is green and smart then they are furry.\n∀x ((Quiet(x) ∧ Furry(x)) → Smart(x)) ::: If someone is quiet and furry then they are smart.\n∀x ((Furry(x) ∧ Big(x)) → Quiet(x)) ::: Furry, big people are quiet.\n∀x ((Smart(x) ∧ Kind(x)) → Big(x)) ::: All smart, kind people are big.\n∀x (Furry(x) → Big(x)) ::: If someone is furry then they are big.\n∀x (Round(x) → Furry(x)) ::: Round people are furry.\nConclusion:\n¬Kind(Harry) ::: Harry is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-559",
    "context": "The bear is big. The bear needs the rabbit. The bear sees the rabbit. The mouse likes the tiger. The mouse needs the rabbit. The mouse sees the rabbit. The mouse sees the tiger. The rabbit is round. The rabbit likes the tiger. The rabbit needs the tiger. The tiger is red. The tiger likes the mouse. If something sees the mouse and it likes the mouse then it sees the bear. If something needs the tiger then it likes the mouse. If something is red then it likes the mouse. If something likes the mouse then it sees the mouse. If something needs the mouse then the mouse sees the tiger. If the rabbit is nice then the rabbit likes the bear. If something is big and nice then it needs the bear. If something is round and it sees the bear then the bear likes the mouse. If something likes the rabbit and the rabbit needs the tiger then the tiger likes the rabbit.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not need the bear.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nNeeds(x, y) ::: x needs y.\nSees(x, y) ::: x sees y.\nLikes(x, y) ::: x likes y.\nRound(x) ::: x is round.\nRed(x) ::: x is red.\nNice(x) ::: x is nice.\nPremises:\nBig(bear) ::: The bear is big.\nNeeds(bear, rabbit) ::: The bear needs the rabbit.\nSees(bear, rabbit) ::: The bear sees the rabbit.\nLikes(mouse, tiger) ::: The mouse likes the tiger.\nNeeds(mouse, rabbit) ::: The mouse needs the rabbit.\nSees(mouse, rabbit) ::: The mouse sees the rabbit.\nSees(mouse, tiger) ::: The mouse sees the tiger.\nRound(rabbit) ::: The rabbit is round.\nLikes(rabbit, tiger) ::: The rabbit likes the tiger.\nNeeds(rabbit, tiger) ::: The rabbit needs the tiger.\nRed(tiger) ::: The tiger is red.\nLikes(x, mouse) ∧ Sees(x, mouse) → Sees(x, bear) ::: If something sees the mouse and it likes the mouse then it sees the bear.\nNeeds(x, tiger) → Likes(x, mouse) ::: If something needs the tiger then it likes the mouse.\nRed(x) → Likes(x, mouse) ::: If something is red then it likes the mouse.\nLikes(x, mouse) → Sees(x, mouse) ::: If something likes the mouse then it sees the mouse.\nNeeds(x, mouse) → Sees(mouse, tiger) ::: If something needs the mouse then the mouse sees the tiger.\nNice(rabbit) → Likes(rabbit, bear) ::: If the rabbit is nice then the rabbit likes the bear.\nBig(x) ∧ Nice(x) → Needs(x, bear) ::: If something is big and nice then it needs the bear.\nRound(x) ∧ Sees(x, bear) → Likes(bear, mouse) ::: If something is round and it sees the bear then the bear likes the mouse.\nLikes(x, rabbit) ∧ Needs(rabbit, tiger) → Likes(tiger, rabbit) ::: If something likes the rabbit and the rabbit needs the tiger then the tiger likes the rabbit.\nConclusion:\n¬Needs(mouse, bear) ::: The mouse does not need the bear."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1218",
    "context": "Anne is blue. Anne is kind. Anne is quiet. Anne is rough. Charlie is kind. Charlie is quiet. Charlie is rough. Charlie is smart. Charlie is white. Charlie is young. Erin is young. Fiona is kind. All white things are young. Young, blue things are quiet. Kind things are blue. If Charlie is rough and Charlie is quiet then Charlie is white. All white, smart things are young. All quiet things are white. If something is white and rough then it is smart. If Fiona is rough then Fiona is young. Blue things are rough.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is quiet.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nKind(x) ::: x is kind.\nQuiet(x) ::: x is quiet.\nRough(x) ::: x is rough.\nSmart(x) ::: x is smart.\nWhite(x) ::: x is white.\nYoung(x) ::: x is young.\nPremises:\nBlue(Anne) ::: Anne is blue.\nKind(Anne) ::: Anne is kind.\nQuiet(Anne) ::: Anne is quiet.\nRough(Anne) ::: Anne is rough.\nKind(Charlie) ::: Charlie is kind.\nQuiet(Charlie) ::: Charlie is quiet.\nRough(Charlie) ::: Charlie is rough.\nSmart(Charlie) ::: Charlie is smart.\nWhite(Charlie) ::: Charlie is white.\nYoung(Charlie) ::: Charlie is young.\nYoung(Erin) ::: Erin is young.\nKind(Fiona) ::: Fiona is kind.\n∀x (White(x) → Young(x)) ::: All white things are young.\n∀x ((Young(x) ∧ Blue(x)) → Quiet(x)) ::: Young, blue things are quiet.\n∀x (Kind(x) → Blue(x)) ::: Kind things are blue.\n∀x ((Rough(x) ∧ Quiet(x)) → White(x)) ::: If Charlie is rough and Charlie is quiet then Charlie is white.\n∀x ((White(x) ∧ Smart(x)) → Young(x)) ::: All white, smart things are young.\n∀x (Quiet(x) → White(x)) ::: All quiet things are white.\n∀x ((White(x) ∧ Rough(x)) → Smart(x)) ::: If something is white and rough then it is smart.\n∀x (Rough(Fiona) → Young(Fiona)) ::: If Fiona is rough then Fiona is young.\n∀x (Blue(x) → Rough(x)) ::: Blue things are rough.\nConclusion:\nQuiet(Anne) ::: Anne is quiet."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-726",
    "context": "The bear visits the tiger. The cat is kind. The mouse is green. The mouse is kind. The mouse sees the tiger. The tiger is rough. The tiger visits the cat. If something visits the bear then it sees the bear. If something sees the bear then the bear likes the cat. If something visits the cat then the cat visits the bear. If something sees the bear and the bear likes the cat then it is cold. Cold things are rough. If something is green and it likes the tiger then the tiger visits the mouse.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not visit the cat.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nVisits(x, y) ::: x visits y.\nKind(x) ::: x is kind.\nGreen(x) ::: x is green.\nSees(x, y) ::: x sees y.\nRough(x) ::: x is rough.\nLikes(x, y) ::: x likes y.\nCold(x) ::: x is cold.\nPremises:\nVisits(bear, tiger) ::: The bear visits the tiger.\nKind(cat) ::: The cat is kind.\nGreen(mouse) ::: The mouse is green.\nKind(mouse) ::: The mouse is kind.\nSees(mouse, tiger) ::: The mouse sees the tiger.\nRough(tiger) ::: The tiger is rough.\nVisits(tiger, cat) ::: The tiger visits the cat.\n∀x (Visits(x, bear) → Sees(x, bear)) ::: If something visits the bear then it sees the bear.\n∀x (Sees(x, bear) → Likes(bear, cat)) ::: If something sees the bear then the bear likes the cat.\n∀x (Visits(x, cat) → Visits(cat, bear)) ::: If something visits the cat then the cat visits the bear.\n∀x ((Sees(x, bear) ∧ Likes(bear, cat)) → Cold(x)) ::: If something sees the bear and the bear likes the cat then it is cold.\n∀x (Cold(x) → Rough(x)) ::: Cold things are rough.\n∀x ((Green(x) ∧ Likes(x, tiger)) → Visits(tiger, mouse)) ::: If something is green and it likes the tiger then the tiger visits the mouse.\nConclusion:\n¬Visits(tiger, cat) ::: The tiger does not visit the cat."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-268",
    "context": "Anne is green. Charlie is blue. Charlie is not green. Charlie is nice. Erin is young. Harry is kind. Harry is white. If something is blue then it is nice. If something is blue and not quiet then it is nice. If something is nice then it is kind. If Erin is green then Erin is white. All green things are blue. If something is young then it is white. If Harry is white then Harry is young. If Erin is nice and Erin is blue then Erin is young. All white things are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not white.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nBlue(x) ::: x is blue.\nNice(x) ::: x is nice.\nYoung(x) ::: x is young.\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nQuiet(x) ::: x is quiet.\nPremises:\nGreen(Anne) ::: Anne is green.\nBlue(Charlie) ::: Charlie is blue.\n¬Green(Charlie) ::: Charlie is not green.\nNice(Charlie) ::: Charlie is nice.\nYoung(Erin) ::: Erin is young.\nKind(Harry) ::: Harry is kind.\nWhite(Harry) ::: Harry is white.\n∀x ((Blue(x) → Nice(x))) ::: If something is blue then it is nice.\n∀x ((Blue(x) ∧ ¬Quiet(x)) → Nice(x)) ::: If something is blue and not quiet then it is nice.\n∀x (Nice(x) → Kind(x)) ::: If something is nice then it is kind.\n∀x ((Erin is green) → White(Erin)) ::: If Erin is green then Erin is white.\n∀x (Green(x) → Blue(x)) ::: All green things are blue.\n∀x (Young(x) → White(x)) ::: If something is young then it is white.\n∀x (White(Harry) → Young(Harry)) ::: If Harry is white then Harry is young.\n∀x ((Nice(Erin) ∧ Blue(Erin)) → Young(Erin)) ::: If Erin is nice and Erin is blue then Erin is young.\n∀x (White(x) → Green(x)) ::: All white things are green.\nConclusion:\n¬White(Charlie) ::: Charlie is not white."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-251",
    "context": "Anne is nice. Anne is smart. Bob is round. Gary is big. Gary is smart. Harry is rough. Harry is smart. All young people are cold. All smart, big people are rough. If someone is big then they are young. If someone is round then they are big. All cold, round people are big. If someone is nice and round then they are smart. If Bob is young and Bob is big then Bob is nice. If Bob is nice and Bob is cold then Bob is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is smart.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nYoung(x) ::: x is young.\nPremises:\nNice(Anne) ::: Anne is nice.\nSmart(Anne) ::: Anne is smart.\nRound(Bob) ::: Bob is round.\nBig(Gary) ::: Gary is big.\nSmart(Gary) ::: Gary is smart.\nRough(Harry) ::: Harry is rough.\nSmart(Harry) ::: Harry is smart.\n∀x (Young(x) → Cold(x)) ::: All young people are cold.\n∀x ((Smart(x) ∧ Big(x)) → Rough(x)) ::: All smart, big people are rough.\n∀x (Big(x) → Young(x)) ::: If someone is big then they are young.\n∀x (Round(x) → Big(x)) ::: If someone is round then they are big.\n∀x ((Cold(x) ∧ Round(x)) → Big(x)) ::: All cold, round people are big.\n∀x ((Nice(x) ∧ Round(x)) → Smart(x)) ::: If someone is nice and round then they are smart.\n∀x ((Young(x) ∧ Big(x)) → Nice(x)) ::: If someone is young and big then they are nice.\n∀x ((Nice(x) ∧ Cold(x)) → Young(x)) ::: If someone is nice and cold then they are young.\nConclusion:\nSmart(Anne) ::: Anne is smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-402",
    "context": "Bob is nice. Bob is white. Charlie is round. Charlie is white. Erin is furry. Erin is nice. Gary is young. All furry, nice things are young. If something is red then it is furry. All furry things are red. All nice things are red. Round, kind things are nice. All young, furry things are kind. If something is white and round then it is furry. If something is red and round then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Charlie is not round.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNice(x) ::: x is nice.\nWhite(x) ::: x is white.\nRound(x) ::: x is round.\nFurry(x) ::: x is furry.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nPremises:\nNice(Bob) ::: Bob is nice.\nWhite(Bob) ::: Bob is white.\nRound(Charlie) ::: Charlie is round.\nWhite(Charlie) ::: Charlie is white.\nFurry(Erin) ::: Erin is furry.\nNice(Erin) ::: Erin is nice.\nYoung(Gary) ::: Gary is young.\n∀x ((Furry(x) ∧ Nice(x)) → Young(x)) ::: All furry, nice things are young.\n∀x (Red(x) → Furry(x)) ::: If something is red then it is furry.\n∀x (Furry(x) → Red(x)) ::: All furry things are red.\n∀x (Nice(x) → Red(x)) ::: All nice things are red.\n∀x ((Round(x) ∧ Kind(x)) → Nice(x)) ::: Round, kind things are nice.\n∀x ((Young(x) ∧ Furry(x)) → Kind(x)) ::: All young, furry things are kind.\n∀x ((White(x) ∧ Round(x)) → Furry(x)) ::: If something is white and round then it is furry.\n∀x ((Red(x) ∧ Round(x)) → Young(x)) ::: If something is red and round then it is young.\nConclusion:\n¬Round(Charlie) ::: Charlie is not round."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-849",
    "context": "The cow chases the mouse. The cow likes the mouse. The cow likes the rabbit. The cow likes the squirrel. The cow sees the mouse. The cow sees the squirrel. The mouse likes the cow. The mouse likes the rabbit. The rabbit chases the squirrel. The rabbit sees the cow. The squirrel chases the rabbit. The squirrel is kind. The squirrel likes the rabbit. The squirrel sees the cow. If someone likes the cow and the cow sees the rabbit then the cow is kind. If someone sees the rabbit and they like the cow then the cow is cold. If someone is red then they like the cow. If someone chases the rabbit then they are rough. If someone likes the squirrel then they are red. If someone likes the cow and they like the squirrel then the cow is kind. If someone is kind then they chase the rabbit. If someone likes the rabbit and the rabbit is rough then the rabbit chases the squirrel. If someone sees the cow then they chase the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The mouse does not chase the rabbit.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nLikes(x, y) ::: x likes y.\nSees(x, y) ::: x sees y.\nKind(x) ::: x is kind.\nCold(x) ::: x is cold.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nPremises:\nChases(Cow, Mouse) ::: The cow chases the mouse.\nLikes(Cow, Mouse) ::: The cow likes the mouse.\nLikes(Cow, Rabbit) ::: The cow likes the rabbit.\nLikes(Cow, Squirrel) ::: The cow likes the squirrel.\nSees(Cow, Mouse) ::: The cow sees the mouse.\nSees(Cow, Squirrel) ::: The cow sees the squirrel.\nLikes(Mouse, Cow) ::: The mouse likes the cow.\nLikes(Mouse, Rabbit) ::: The mouse likes the rabbit.\nChases(Rabbit, Squirrel) ::: The rabbit chases the squirrel.\nSees(Rabbit, Cow) ::: The rabbit sees the cow.\nChases(Squirrel, Rabbit) ::: The squirrel chases the rabbit.\nKind(Squirrel) ::: The squirrel is kind.\nLikes(Squirrel, Rabbit) ::: The squirrel likes the rabbit.\nSees(Squirrel, Cow) ::: The squirrel sees the cow.\n∀x ((Likes(x, Cow) ∧ Sees(x, Rabbit)) → Kind(Cow)) ::: If someone likes the cow and the cow sees the rabbit then the cow is kind.\n∀x ((Sees(x, Rabbit) ∧ Likes(x, Cow)) → Cold(Cow)) ::: If someone sees the rabbit and they like the cow then the cow is cold.\n∀x (Red(x) → Likes(x, Cow)) ::: If someone is red then they like the cow.\n∀x (Chases(x, Rabbit) → Rough(x)) ::: If someone chases the rabbit then they are rough.\n∀x (Likes(x, Squirrel) → Red(x)) ::: If someone likes the squirrel then they are red.\n∀x ((Likes(x, Cow) ∧ Likes(x, Squirrel)) → Kind(Cow)) ::: If someone likes the cow and they like the squirrel then the cow is kind.\n∀x (Kind(x) → Chases(x, Rabbit)) ::: If someone is kind then they chase the rabbit.\n∀x ((Likes(x, Rabbit) ∧ Rough(Rabbit)) → Chases(Rabbit, Squirrel)) ::: If someone likes the rabbit and the rabbit is rough then the rabbit chases the squirrel.\n∀x (Sees(x, Cow) → Chases(x, Squirrel)) ::: If someone sees the cow then they chase the squirrel.\nConclusion:\n¬Chases(Mouse, Rabbit) ::: The mouse does not chase the rabbit."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-264",
    "context": "The bald eagle likes the cat. The bald eagle visits the rabbit. The cat needs the bald eagle. The cat needs the cow. The cat visits the rabbit. The cow likes the bald eagle. The cow likes the rabbit. The cow visits the bald eagle. The rabbit is green. The rabbit is red. The rabbit needs the cat. If someone needs the bald eagle and they are red then they visit the cow. If someone needs the bald eagle then the bald eagle needs the rabbit. If someone needs the cat then they like the bald eagle. If someone needs the bald eagle then they are red. If someone is green then they need the bald eagle. If someone likes the bald eagle and they need the bald eagle then the bald eagle visits the rabbit. If the cat likes the bald eagle then the bald eagle visits the cow. If someone visits the cow then they need the cat. If the cow is rough and the cow is nice then the cow is red.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit is green.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nLikes(x, y) ::: x likes y.\nVisits(x, y) ::: x visits y.\nNeeds(x, y) ::: x needs y.\nGreen(x) ::: x is green.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nNice(x) ::: x is nice.\nPremises:\nLikes(BaldEagle, Cat) ::: The bald eagle likes the cat.\nVisits(BaldEagle, Rabbit) ::: The bald eagle visits the rabbit.\nNeeds(Cat, BaldEagle) ::: The cat needs the bald eagle.\nNeeds(Cat, Cow) ::: The cat needs the cow.\nVisits(Cat, Rabbit) ::: The cat visits the rabbit.\nLikes(Cow, BaldEagle) ::: The cow likes the bald eagle.\nLikes(Cow, Rabbit) ::: The cow likes the rabbit.\nVisits(Cow, BaldEagle) ::: The cow visits the bald eagle.\nGreen(Rabbit) ::: The rabbit is green.\nRed(Rabbit) ::: The rabbit is red.\nNeeds(x, BaldEagle) ∧ Red(x) → Visits(x, Cow) ::: If someone needs the bald eagle and they are red then they visit the cow.\nNeeds(x, BaldEagle) → Needs(BaldEagle, Rabbit) ::: If someone needs the bald eagle then the bald eagle needs the rabbit.\nNeeds(x, Cat) → Likes(x, BaldEagle) ::: If someone needs the cat then they like the bald eagle.\nNeeds(x, BaldEagle) → Red(x) ::: If someone needs the bald eagle then they are red.\nGreen(x) → Needs(x, BaldEagle) ::: If someone is green then they need the bald eagle.\nLikes(x, BaldEagle) ∧ Needs(x, BaldEagle) → Visits(BaldEagle, Rabbit) ::: If someone likes the bald eagle and they need the bald eagle then the bald eagle visits the rabbit.\nLikes(Cat, BaldEagle) → Visits(BaldEagle, Cow) ::: If the cat likes the bald eagle then the bald eagle visits the cow.\nVisits(x, Cow) → Needs(x, Cat) ::: If someone visits the cow then they need the cat.\nRough(Cow) ∧ Nice(Cow) → Red(Cow) ::: If the cow is rough and the cow is nice then the cow is red.\nConclusion:\nGreen(Rabbit) ::: The rabbit is green."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-963",
    "context": "Anne is kind. Anne is round. Dave is blue. Dave is cold. Dave is furry. Dave is green. Dave is quiet. Erin is green. Fiona is furry. Fiona is round. If Fiona is quiet and Fiona is kind then Fiona is green. All green people are blue. Quiet, round people are cold. Kind people are green. If someone is quiet then they are blue. If someone is cold then they are furry. All blue, kind people are quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Anne is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nKind(x) ::: x is kind.\nRound(x) ::: x is round.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nPremises:\nKind(Anne) ::: Anne is kind.\nRound(Anne) ::: Anne is round.\nBlue(Dave) ::: Dave is blue.\nCold(Dave) ::: Dave is cold.\nFurry(Dave) ::: Dave is furry.\nGreen(Dave) ::: Dave is green.\nQuiet(Dave) ::: Dave is quiet.\nGreen(Erin) ::: Erin is green.\nFurry(Fiona) ::: Fiona is furry.\nRound(Fiona) ::: Fiona is round.\n∀x ((Quiet(x) ∧ Kind(x)) → Green(x)) ::: If Fiona is quiet and Fiona is kind then Fiona is green.\n∀x (Green(x) → Blue(x)) ::: All green people are blue.\n∀x ((Quiet(x) ∧ Round(x)) → Cold(x)) ::: Quiet, round people are cold.\n∀x (Kind(x) → Green(x)) ::: Kind people are green.\n∀x (Quiet(x) → Blue(x)) ::: If someone is quiet then they are blue.\n∀x (Cold(x) → Furry(x)) ::: If someone is cold then they are furry.\n∀x ((Blue(x) ∧ Kind(x)) → Quiet(x)) ::: All blue, kind people are quiet.\nConclusion:\n¬Kind(Anne) ::: Anne is not kind."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-324",
    "context": "The bear chases the rabbit. The bear is young. The bear sees the cow. The cow sees the bear. The cow sees the rabbit. The rabbit is red. The squirrel chases the cow. If someone is kind then they visit the cow. If someone chases the squirrel then the squirrel visits the cow. Young people are kind. If someone visits the bear then they see the squirrel. If someone chases the squirrel then the squirrel visits the cow. If someone visits the rabbit then the rabbit visits the cow. If someone is young then they visit the rabbit. If someone visits the cow then the cow is young. If someone is red then they visit the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The cow does not visit the squirrel.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nYoung(x) ::: x is young.\nSees(x, y) ::: x sees y.\nRed(x) ::: x is red.\nKind(x) ::: x is kind.\nVisits(x, y) ::: x visits y.\nPremises:\nChases(bear, rabbit) ::: The bear chases the rabbit.\nYoung(bear) ::: The bear is young.\nSees(bear, cow) ::: The bear sees the cow.\nSees(cow, bear) ::: The cow sees the bear.\nSees(cow, rabbit) ::: The cow sees the rabbit.\nRed(rabbit) ::: The rabbit is red.\nChases(squirrel, cow) ::: The squirrel chases the cow.\n∀x (Kind(x) → Visits(x, cow)) ::: If someone is kind then they visit the cow.\n∀x (Chases(x, squirrel) → Visits(squirrel, cow)) ::: If someone chases the squirrel then the squirrel visits the cow.\n∀x (Young(x) → Kind(x)) ::: Young people are kind.\n∀x (Visits(x, bear) → Sees(x, squirrel)) ::: If someone visits the bear then they see the squirrel.\n∀x (Chases(x, squirrel) → Visits(squirrel, cow)) ::: If someone chases the squirrel then the squirrel visits the cow.\n∀x (Visits(x, rabbit) → Visits(rabbit, cow)) ::: If someone visits the rabbit then the rabbit visits the cow.\n∀x (Young(x) → Visits(x, rabbit)) ::: If someone is young then they visit the rabbit.\n∀x (Visits(x, cow) → Young(cow)) ::: If someone visits the cow then the cow is young.\n∀x (Red(x) → Visits(x, squirrel)) ::: If someone is red then they visit the squirrel.\nConclusion:\n¬Visits(cow, squirrel) ::: The cow does not visit the squirrel."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-404",
    "context": "The bear chases the lion. The bear is cold. The bear is nice. The bear visits the rabbit. The lion is red. The rabbit chases the bear. The rabbit is green. The squirrel chases the bear. The squirrel likes the bear. The squirrel visits the lion. If something chases the squirrel then the squirrel is red. If something likes the lion then it chases the squirrel. If something is red then it likes the lion. If something is nice and it chases the lion then it likes the rabbit. If something likes the bear and the bear likes the rabbit then the bear is green. If the squirrel visits the rabbit and the rabbit likes the bear then the bear visits the squirrel.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The rabbit chases the bear.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nChases(x, y) ::: x chases y.\nCold(x) ::: x is cold.\nNice(x) ::: x is nice.\nVisits(x, y) ::: x visits y.\nRed(x) ::: x is red.\nGreen(x) ::: x is green.\nLikes(x, y) ::: x likes y.\n∀x (Chases(x, Lion) → Red(x)) ::: If something chases the lion then it is red.\n∀x (Likes(x, Lion) → Chases(x, Squirrel)) ::: If something likes the lion then it chases the squirrel.\n∀x (Red(x) → Likes(x, Lion)) ::: If something is red then it likes the lion.\n∀x ((Nice(x) ∧ Chases(x, Lion)) → Likes(x, Rabbit)) ::: If something is nice and it chases the lion then it likes the rabbit.\n∀x ((Likes(x, Bear) ∧ Likes(Bear, Rabbit)) → Green(Bear)) ::: If something likes the bear and the bear likes the rabbit then the bear is green.\n∀x ((Visits(Squirrel, Rabbit) ∧ Likes(Rabbit, Bear)) → Visits(Bear, Squirrel)) ::: If the squirrel visits the rabbit and the rabbit likes the bear then the bear visits the squirrel.\nConclusion:\nChases(Rabbit, Bear) ::: The rabbit chases the bear."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-481",
    "context": "The bald eagle needs the mouse. The bald eagle visits the mouse. The dog is young. The dog needs the mouse. The dog visits the mouse. The mouse is red. The mouse is rough. The mouse visits the bald eagle. The tiger is cold. The tiger needs the bald eagle. The tiger needs the dog. The tiger visits the dog. If the mouse visits the dog then the mouse visits the tiger. If something needs the tiger and the tiger is cold then it is green. If something is cold and it needs the bald eagle then the bald eagle visits the mouse. If something needs the mouse then it visits the bald eagle. If something is young then it needs the tiger. If something visits the dog and the dog is green then it is young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger does not need the bald eagle.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nYoung(x) ::: x is young.\nRed(x) ::: x is red.\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nPremises:\nNeeds(BaldEagle, Mouse) ::: The bald eagle needs the mouse.\nVisits(BaldEagle, Mouse) ::: The bald eagle visits the mouse.\nYoung(Dog) ::: The dog is young.\nNeeds(Dog, Mouse) ::: The dog needs the mouse.\nVisits(Dog, Mouse) ::: The dog visits the mouse.\nRed(Mouse) ::: The mouse is red.\nRough(Mouse) ::: The mouse is rough.\nVisits(Mouse, BaldEagle) ::: The mouse visits the bald eagle.\nCold(Tiger) ::: The tiger is cold.\nNeeds(Tiger, BaldEagle) ::: The tiger needs the bald eagle.\nNeeds(Tiger, Dog) ::: The tiger needs the dog.\nVisits(Tiger, Dog) ::: The tiger visits the dog.\n∀x ((Visits(Mouse, Dog)) → (Visits(Mouse, Tiger))) ::: If the mouse visits the dog then the mouse visits the tiger.\n∀x ((Needs(x, Tiger) ∧ Cold(Tiger)) → Green(x)) ::: If something needs the tiger and the tiger is cold then it is green.\n∀x ((Cold(x) ∧ Needs(BaldEagle, x)) → Visits(BaldEagle, Mouse)) ::: If something is cold and it needs the bald eagle then the bald eagle visits the mouse.\n∀x (Needs(x, Mouse) → Visits(BaldEagle, x)) ::: If something needs the mouse then it visits the bald eagle.\n∀x (Young(x) → Needs(x, Tiger)) ::: If something is young then it needs the tiger.\n∀x ((Visits(x, Dog) ∧ Green(Dog)) → Young(x)) ::: If something visits the dog and the dog is green then it is young.\nConclusion:\n¬Needs(Tiger, BaldEagle) ::: The tiger does not need the bald eagle."
    ]
  },
  {
    "id": "ProofWriter_RelNoneg-OWA-D5-618",
    "context": "The bear is young. The bear needs the dog. The bear visits the dog. The cow is blue. The cow is cold. The cow needs the tiger. The cow visits the bear. The dog chases the cow. The dog is cold. The dog is green. The dog needs the cow. The dog visits the bear. The dog visits the cow. The tiger visits the bear. Blue people are green. If someone needs the dog and they are green then they visit the tiger. If someone is rough and they chase the bear then they are green. If someone is blue and they visit the bear then the bear is blue. If someone chases the bear and they are blue then they need the dog. If someone chases the bear then they visit the cow. If someone visits the tiger then they visit the cow. If someone visits the cow and the cow visits the bear then they chase the dog. If someone is cold then they are young.",
    "question": "Based on the above information, is the following statement true, false, or unknown? The tiger is not young.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nYoung(x) ::: x is young.\nNeeds(x, y) ::: x needs y.\nVisits(x, y) ::: x visits y.\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nGreen(x) ::: x is green.\nChases(x, y) ::: x chases y.\nRough(x) ::: x is rough.\nConclusion:\n¬Young(Tiger) ::: The tiger is not young.\nPremises:\nYoung(Bear) ::: The bear is young.\nNeeds(Bear, Dog) ::: The bear needs the dog.\nVisits(Bear, Dog) ::: The bear visits the dog.\nBlue(Cow) ::: The cow is blue.\nCold(Cow) ::: The cow is cold.\nNeeds(Cow, Tiger) ::: The cow needs the tiger.\nVisits(Cow, Bear) ::: The cow visits the bear.\nChases(Dog, Cow) ::: The dog chases the cow.\nCold(Dog) ::: The dog is cold.\nGreen(Dog) ::: The dog is green.\nNeeds(Dog, Cow) ::: The dog needs the cow.\nVisits(Dog, Bear) ::: The dog visits the bear.\nVisits(Dog, Cow) ::: The dog visits the cow.\nVisits(Tiger, Bear) ::: The tiger visits the bear.\n∀x (Blue(x) → Green(x)) ::: Blue people are green.\n∀x ((Needs(x, Dog) ∧ Green(x)) → Visits(x, Tiger)) ::: If someone needs the dog and they are green then they visit the tiger.\n∀x ((Rough(x) ∧ Chases(x, Bear)) → Green(x)) ::: If someone is rough and they chase the bear then they are green.\n∀x ((Blue(x) ∧ Visits(x, Bear)) → Blue(Bear)) ::: If someone is blue and they visit the bear then the bear is blue.\n∀x ((Chases(x, Bear) ∧ Blue(x)) → Needs(x, Dog)) ::: If someone chases the bear and they are blue then they need the dog.\n∀x (Chases(x, Bear) → Visits(x, Cow)) ::: If someone chases the bear then they visit the cow.\n∀x (Visits(x, Tiger) → Visits(x, Cow)) ::: If someone visits the tiger then they visit the cow.\n∀x ((Visits(x, Cow) ∧ Visits(Cow, Bear)) → Chases(x, Dog)) ::: If someone visits the cow and the cow visits the bear then they chase the dog.\n∀x (Cold(x) → Young(x)) ::: If someone is cold then they are young."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1032",
    "context": "Bob is big. Bob is green. Dave is kind. Dave is white. Erin is green. Erin is kind. Erin is smart. Fiona is big. Fiona is blue. Fiona is furry. White, blue things are furry. All big, white things are smart. Furry things are green. Kind things are blue. All green things are furry. Green things are big.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is smart.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBig(x) ::: x is big.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nWhite(x) ::: x is white.\nSmart(x) ::: x is smart.\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nPremises:\nBig(Bob) ::: Bob is big.\nGreen(Bob) ::: Bob is green.\nKind(Dave) ::: Dave is kind.\nWhite(Dave) ::: Dave is white.\nGreen(Erin) ::: Erin is green.\nKind(Erin) ::: Erin is kind.\nSmart(Erin) ::: Erin is smart.\nBig(Fiona) ::: Fiona is big.\nBlue(Fiona) ::: Fiona is blue.\nFurry(Fiona) ::: Fiona is furry.\n∀x ((White(x) ∧ Blue(x)) → Furry(x)) ::: White, blue things are furry.\n∀x ((Big(x) ∧ White(x)) → Smart(x)) ::: All big, white things are smart.\n∀x (Furry(x) → Green(x)) ::: Furry things are green.\n∀x (Kind(x) → Blue(x)) ::: Kind things are blue.\n∀x (Green(x) → Big(x)) ::: Green things are big.\nConclusion:\nSmart(Erin) ::: Erin is smart."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-677",
    "context": "Bob is furry. Bob is green. Charlie is furry. Charlie is kind. Charlie is young. Erin is green. Erin is kind. Fiona is blue. Fiona is furry. Fiona is smart. All young people are kind. Furry, cold people are young. Furry, blue people are smart. If someone is kind and furry then they are blue. If Bob is smart then Bob is furry. All furry, blue people are kind. If someone is furry then they are cold. If someone is young and furry then they are green.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not kind.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nFurry(x) ::: x is furry.\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nYoung(x) ::: x is young.\nBlue(x) ::: x is blue.\nSmart(x) ::: x is smart.\nCold(x) ::: x is cold.\nPremises:\nFurry(Bob) ::: Bob is furry.\nGreen(Bob) ::: Bob is green.\nFurry(Charlie) ::: Charlie is furry.\nKind(Charlie) ::: Charlie is kind.\nYoung(Charlie) ::: Charlie is young.\nGreen(Erin) ::: Erin is green.\nKind(Erin) ::: Erin is kind.\nBlue(Fiona) ::: Fiona is blue.\nFurry(Fiona) ::: Fiona is furry.\nSmart(Fiona) ::: Fiona is smart.\n∀x (Young(x) → Kind(x)) ::: All young people are kind.\n∀x ((Furry(x) ∧ Cold(x)) → Young(x)) ::: Furry, cold people are young.\n∀x ((Furry(x) ∧ Blue(x)) → Smart(x)) ::: Furry, blue people are smart.\n∀x ((Kind(x) ∧ Furry(x)) → Blue(x)) ::: If someone is kind and furry then they are blue.\n∀x (Smart(Bob) → Furry(Bob)) ::: If Bob is smart then Bob is furry.\n∀x ((Furry(x) ∧ Blue(x)) → Kind(x)) ::: All furry, blue people are kind.\n∀x (Furry(x) → Cold(x)) ::: If someone is furry then they are cold.\n∀x ((Young(x) ∧ Furry(x)) → Green(x)) ::: If someone is young and furry then they are green.\nConclusion:\n¬Kind(Erin) ::: Erin is not kind."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-971",
    "context": "Charlie is green. Charlie is kind. Erin is blue. Erin is kind. Fiona is green. Gary is blue. Gary is furry. Gary is green. Gary is kind. Gary is round. If someone is round and kind then they are green. All green, round people are blue. Round people are big. If someone is kind then they are furry. All blue people are kind. If someone is green then they are big. If Erin is cold and Erin is green then Erin is blue. Cold, blue people are kind. All green, big people are round.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Erin is not round.",
    "answer": "C",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nGreen(x) ::: x is green.\nKind(x) ::: x is kind.\nBlue(x) ::: x is blue.\nFurry(x) ::: x is furry.\nRound(x) ::: x is round.\nBig(x) ::: x is big.\nCold(x) ::: x is cold.\nPremises:\nGreen(Charlie) ::: Charlie is green.\nKind(Charlie) ::: Charlie is kind.\nBlue(Erin) ::: Erin is blue.\nKind(Erin) ::: Erin is kind.\nGreen(Fiona) ::: Fiona is green.\nBlue(Gary) ::: Gary is blue.\nFurry(Gary) ::: Gary is furry.\nGreen(Gary) ::: Gary is green.\nKind(Gary) ::: Gary is kind.\nRound(Gary) ::: Gary is round.\n∀x ((Round(x) ∧ Kind(x)) → Green(x)) ::: If someone is round and kind then they are green.\n∀x ((Green(x) ∧ Round(x)) → Blue(x)) ::: All green, round people are blue.\n∀x (Round(x) → Big(x)) ::: Round people are big.\n∀x (Kind(x) → Furry(x)) ::: If someone is kind then they are furry.\n∀x (Blue(x) → Kind(x)) ::: All blue people are kind.\n∀x (Green(x) → Big(x)) ::: If someone is green then they are big.\n∀x ((Cold(x) ∧ Green(x)) → Blue(x)) ::: If Erin is cold and Erin is green then Erin is blue.\n∀x ((Cold(x) ∧ Blue(x)) → Kind(x)) ::: Cold, blue people are kind.\n∀x ((Green(x) ∧ Big(x)) → Round(x)) ::: All green, big people are round.\nConclusion:\n¬Round(Erin) ::: Erin is not round."
    ]
  },
  {
    "id": "ProofWriter_AttNeg-OWA-D5-959",
    "context": "Bob is rough. Fiona is cold. Fiona is rough. Gary is big. Gary is quiet. Harry is big. Harry is rough. If someone is white and smart then they are furry. All rough people are big. All furry people are white. If someone is quiet and cold then they are white. All furry people are white. If Harry is big then Harry is cold. Big, smart people are quiet. If someone is big then they are smart.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is big.",
    "answer": "A",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nRough(x) ::: x is rough.\nCold(x) ::: x is cold.\nBig(x) ::: x is big.\nQuiet(x) ::: x is quiet.\nWhite(x) ::: x is white.\nSmart(x) ::: x is smart.\nFurry(x) ::: x is furry.\nPremises:\nRough(Bob) ::: Bob is rough.\nCold(Fiona) ::: Fiona is cold.\nRough(Fiona) ::: Fiona is rough.\nBig(Gary) ::: Gary is big.\nQuiet(Gary) ::: Gary is quiet.\nBig(Harry) ::: Harry is big.\nRough(Harry) ::: Harry is rough.\n∀x ((White(x) ∧ Smart(x)) → Furry(x)) ::: If someone is white and smart then they are furry.\n∀x (Rough(x) → Big(x)) ::: All rough people are big.\n∀x (Furry(x) → White(x)) ::: All furry people are white.\n∀x ((Quiet(x) ∧ Cold(x)) → White(x)) ::: If someone is quiet and cold then they are white.\n∀x (Furry(x) → White(x)) ::: All furry people are white.\n∀x (Big(x) → Cold(x)) ::: If Harry is big then Harry is cold.\n∀x ((Big(x) ∧ Smart(x)) → Quiet(x)) ::: Big, smart people are quiet.\n∀x (Big(x) → Smart(x)) ::: If someone is big then they are smart.\nConclusion:\nBig(Gary) ::: Gary is big."
    ]
  },
  {
    "id": "ProofWriter_AttNoneg-OWA-D5-1186",
    "context": "Erin is blue. Erin is cold. Erin is smart. Fiona is round. Gary is cold. Gary is green. Gary is quiet. Gary is round. Gary is smart. Harry is smart. Nice, green people are round. Green people are nice. If someone is blue then they are green. If someone is blue then they are smart. Nice, round people are blue. Smart people are green. If Harry is blue and Harry is smart then Harry is quiet.",
    "question": "Based on the above information, is the following statement true, false, or unknown? Gary is not smart.",
    "answer": "B",
    "options": [
      "A) True",
      "B) False",
      "C) Unknown"
    ],
    "raw_logic_programs": [
      "Predicates:\nBlue(x) ::: x is blue.\nCold(x) ::: x is cold.\nSmart(x) ::: x is smart.\nRound(x) ::: x is round.\nGreen(x) ::: x is green.\nQuiet(x) ::: x is quiet.\nNice(x) ::: x is nice.\nPremises:\nBlue(Erin) ::: Erin is blue.\nCold(Erin) ::: Erin is cold.\nSmart(Erin) ::: Erin is smart.\nRound(Fiona) ::: Fiona is round.\nCold(Gary) ::: Gary is cold.\nGreen(Gary) ::: Gary is green.\nQuiet(Gary) ::: Gary is quiet.\nRound(Gary) ::: Gary is round.\nSmart(Gary) ::: Gary is smart.\nSmart(Harry) ::: Harry is smart.\n∀x ((Nice(x) ∧ Green(x)) → Round(x)) ::: Nice, green people are round.\n∀x (Green(x) → Nice(x)) ::: Green people are nice.\n∀x (Blue(x) → Green(x)) ::: If someone is blue then they are green.\n∀x (Blue(x) → Smart(x)) ::: If someone is blue then they are smart.\n∀x ((Nice(x) ∧ Round(x)) → Blue(x)) ::: Nice, round people are blue.\n∀x (Smart(x) → Green(x)) ::: Smart people are green.\n∀x ((Blue(Harry) ∧ Smart(Harry)) → Quiet(Harry)) ::: If Harry is blue and smart then Harry is quiet.\nConclusion:\n¬Smart(Gary) ::: Gary is not smart."
    ]
  }
]